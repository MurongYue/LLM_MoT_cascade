[
    {
        "question": "Some friends discussed the sizes of their coin collections. What is the mean of the numbers?",
        "answer": 84.0,
        "generated": [
            "number_of_coins_for_different_person = [76, 94, 86, 84, 80, 83, 82, 87]\nans = sum(number_of_coins_for_different_person) / len(number_of_coins_for_different_person)"
        ],
        "results": [
            84.0
        ],
        "result_counter": {
            "84.0": 1
        },
        "prediction": 84.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $155, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_155 = 22600\nquantity_supplied_price_155 = 5800\nif quantity_demanded_price_155 > quantity_supplied_price_155:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Wednesday and Thursday?",
        "answer": 3.0,
        "generated": [
            "wednesday_time = 18\nthursday_time = 21\nans = thursday_time - wednesday_time"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Erik has $7,616.00. How much money will Erik have left if he buys a parrot and a kinkajou?",
        "answer": 4656.0,
        "generated": [
            "parrot_price = 1123\nkinkajou_price = 1837\ntotal_money = 7616\nmoney_left = total_money - (parrot_price + kinkajou_price)\nans = money_left"
        ],
        "results": [
            4656.0
        ],
        "result_counter": {
            "4656.0": 1
        },
        "prediction": 4656.0
    },
    {
        "question": "Roxanne has $32.50. Does she have enough to buy a CD and a blender?",
        "answer": "yes",
        "generated": [
            "blender_price = 14.02\ncd_price = 18.35\ntotal_money = 32.50\nif total_money > blender_price + cd_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Fans of the Kingwood baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2009 and 2010?",
        "answer": 7.0,
        "generated": [
            "games_won_2009 = 39\ngames_won_2010 = 46\nans = games_won_2010 - games_won_2009"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "A farm equipment company kept a record of the number of tractors made each month. What is the mean of the numbers?",
        "answer": 94.0,
        "generated": [
            "number_of_tractors = [97, 93, 90, 90, 98, 96, 90, 98]\nans = sum(number_of_tractors) / len(number_of_tractors)"
        ],
        "results": [
            94.0
        ],
        "result_counter": {
            "94.0": 1
        },
        "prediction": 94.0
    },
    {
        "question": "A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Eve donate to clean water than Eli?",
        "answer": 10.0,
        "generated": [
            "eve_donation_clean_water = 15\neli_donation_clean_water = 5\nans = eve_donation_clean_water - eli_donation_clean_water"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "Vijay has $9.00. Does he have enough to buy a book about music and a book about hiking?",
        "answer": "no",
        "generated": [
            "music_book_price = 2.00\nhiking_book_price = 9.00\ntotal_money = 9.00\nif total_money >= music_book_price + hiking_book_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "A stock broker followed the stock prices of a certain set of companies. How much more did Computer Data Company's stock cost on Wednesday than on Thursday?",
        "answer": 8.0,
        "generated": [
            "computer_data_wednesday = 17\ncomputer_data_thursday = 9\nans = computer_data_wednesday - computer_data_thursday"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Brenda purchased 1.1 pounds of coarse gravel. What was the total cost?",
        "answer": 3.3,
        "generated": [
            "coarse_gravel_price_per_lb = 3\nweight = 1.1\ntotal_cost = coarse_gravel_price_per_lb * weight\nans = total_cost"
        ],
        "results": [
            3.3000000000000003
        ],
        "result_counter": {
            "3.3000000000000003": 1
        },
        "prediction": 3.3000000000000003
    },
    {
        "question": "Jordan has two dogs, Sprinkles and Champ. He is concerned because Sprinkles keeps eating Champ's food. Jordan asks their vet how much each dog's weight has changed since their last visit. Which dog's weight has changed the most?",
        "answer": "Champ",
        "generated": [
            "weight_changes = {'Sprinkles': 5, 'Champ': -6}\nmax_change = max(abs(value) for value in weight_changes.values())\nfor key, value in weight_changes.items():\n    if abs(value) == max_change:\n        ans = key"
        ],
        "results": [
            "Champ"
        ],
        "result_counter": {
            "Champ": 1
        },
        "prediction": "Champ"
    },
    {
        "question": "Rafi graphed the amount of snow that fell in the last 7 days. What is the median of the numbers?",
        "answer": 4.0,
        "generated": [
            "snowfall = [1, 7, 8, 4, 7, 3, 1]\nsnowfall = sorted(snowfall)\nmiddle1 = (len(snowfall) - 1) // 2\nmiddle2 = len(snowfall) // 2\nans = (snowfall[middle1] + snowfall[middle2]) / 2"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2007 and 2008?",
        "answer": 4.0,
        "generated": [
            "students_2007 = 41\nstudents_2008 = 45\nrate_of_change = students_2008 - students_2007\nans = rate_of_change"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "How much money does Philip need to buy 6 teapots and 2 casserole dishes?",
        "answer": 268.0,
        "generated": [
            "teapot_price = 38\ncasserole_dish_price = 20\ntotal_money_needed = (6 * teapot_price) + (2 * casserole_dish_price)\nans = total_money_needed"
        ],
        "results": [
            268.0
        ],
        "result_counter": {
            "268.0": 1
        },
        "prediction": 268.0
    },
    {
        "question": "Emma has $1.72. Does she have enough to buy a hair tie and a comb?",
        "answer": "yes",
        "generated": [
            "hair_tie_price = 0.94\ncomb_price = 0.75\ntotal_money = 1.72\nif total_money > hair_tie_price + comb_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "In a study on public parking, the director of transportation counted the number of cars in each of the city's parking lots. How many parking lots had exactly 44 cars?",
        "answer": 4.0,
        "generated": [
            "stem_and_leaf = {\n    1: [0],\n    2: [],\n    3: [0],\n    4: [2, 4, 4, 4, 4],\n    5: [],\n    6: [],\n    7: [],\n    8: [0]\n}\n\nans = stem_and_leaf[4].count(4)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "How much money does Madelyn need to buy 9 shell necklaces?",
        "answer": 3.87,
        "generated": [
            "shell_necklace_price = 0.43\nquantity = 9\nans = shell_necklace_price * quantity"
        ],
        "results": [
            3.87
        ],
        "result_counter": {
            "3.87": 1
        },
        "prediction": 3.87
    },
    {
        "question": "At a swim meet, Ernesto noted the size of various swim teams. How many teams have at least 30 swimmers?",
        "answer": 12.0,
        "generated": [
            "team_sizes = [22, 23, 27, 27, 32, 40, 43, 44, 51, 54, 58, 62, 62, 64, 65, 69]\nteams_with_30_or_more_swimmers = [size for size in team_sizes if size >= 30]\nans = len(teams_with_30_or_more_swimmers)"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "Each bag has 5 silver buttons. How many silver buttons are in 4 bags?",
        "answer": 20.0,
        "generated": [
            "number_of_bags = 4\nsilver_buttons_per_bag = 5\nans = number_of_bags * silver_buttons_per_bag"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "For Earth Day, Fairfax High's environmental club tracked the number of seeds planted by its members. How many members planted fewer than 3 seeds?",
        "answer": 19.0,
        "generated": [
            "seeds_planted_frequencies = {0: 2, 1: 3, 2: 14, 3: 13, 4: 5, 5: 19, 6: 11}\nfewer_than_3_seeds = seeds_planted_frequencies[0] + seeds_planted_frequencies[1]\nans = fewer_than_3_seeds"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "How much money does Annie need to buy a bottle of sunscreen, a package of dental floss, and a toothbrush?",
        "answer": 11.43,
        "generated": [
            "sunscreen_price = 7.77\ndental_floss_price = 1.55\ntoothbrush_price = 2.11\nans = sunscreen_price + dental_floss_price + toothbrush_price"
        ],
        "results": [
            11.43
        ],
        "result_counter": {
            "11.43": 1
        },
        "prediction": 11.43
    },
    {
        "question": "Jayla counted the number of pieces of pepperoni on each pizza she made. How many pizzas had fewer than 46 pieces of pepperoni?",
        "answer": 14.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\npizzas_with_pepperoni = [12, 15, 16, 22, 25, 26, 28, 29, 31, 37, 39, 40, 43, 43]\nans = len([pizza for pizza in pizzas_with_pepperoni if pizza < 46])"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "Look at the following schedule. Which class begins at 3.20 P.M.?",
        "answer": "Web Page Design class",
        "generated": [
            "class_schedule = {\n    'Introduction to Typing': ('8:05 A.M.', '9:10 A.M.'),\n    'Advanced Typing': ('9:15 A.M.', '10:25 A.M.'),\n    'Computer Finance': ('10:30 A.M.', '11:00 A.M.'),\n    'Word Processing': ('11:10 A.M.', '11:50 A.M.'),\n    'Computer Science': ('11:55 A.M.', '12:25 P.M.'),\n    'Computer Graphics': ('12:40 P.M.', '1:45 P.M.'),\n    'Beginning Programming': ('1:55 P.M.', '3:15 P.M.'),\n    'Web Page Design': ('3:20 P.M.', '4:25 P.M.')\n}\n\ndesired_time = '3:20 P.M.'\nfor class_name, time_range in class_schedule.items():\n    if time_range[0] == desired_time:\n        ans = class_name\n\n# Convert the answer to the format specified in the options\nif ans == 'Word Processing':\n    ans = 'Word Processing class'\nelif ans == 'Computer Finance':\n    ans = 'Computer Finance class'\nelif ans == 'Web Page Design':\n    ans = 'Web Page Design class'\nelif ans == 'Computer Graphics':\n    ans = 'Computer Graphics class'"
        ],
        "results": [
            "Web Page Design class"
        ],
        "result_counter": {
            "Web Page Design class": 1
        },
        "prediction": "Web Page Design class"
    },
    {
        "question": "How much more does a jersey signed by a famous basketball player cost than a photograph signed by a famous race car driver?",
        "answer": 3151.0,
        "generated": [
            "jersey_cost = 6047\nphotograph_cost = 2896\nans = jersey_cost - photograph_cost"
        ],
        "results": [
            3151.0
        ],
        "result_counter": {
            "3151.0": 1
        },
        "prediction": 3151.0
    },
    {
        "question": "Sixth graders at Belleville Middle School are taught in classes of various sizes. How many more girls are in Miss West's class than Ms. North's class?",
        "answer": 8.0,
        "generated": [
            "girls_miss_west = 16\ngirls_ms_north = 8\nans = girls_miss_west - girls_ms_north"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Eli went on a camping trip and logged the number of miles he hiked each day. What is the mean of the numbers?",
        "answer": 9.0,
        "generated": [
            "miles_hiked = [10, 9, 6, 10, 10]\nans = sum(miles_hiked) / len(miles_hiked)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Each bush has 2 flowers. How many flowers are on 4 bushes?",
        "answer": 8.0,
        "generated": [
            "flowers_per_bush = 2\nnumber_of_bushes = 4\nans = flowers_per_bush * number_of_bushes"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "The owner of an orchard kept records about how many apples were picked in the past 6 days. What is the mean of the numbers?",
        "answer": 44.0,
        "generated": [
            "number_of_apples = [50, 44, 41, 45, 44, 40]\nans = sum(number_of_apples) / len(number_of_apples)"
        ],
        "results": [
            44.0
        ],
        "result_counter": {
            "44.0": 1
        },
        "prediction": 44.0
    },
    {
        "question": "A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. What is the largest number of lemon-flavored candies?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nlemon_candies_number_list = [2, 5, 13, 15, 25, 33, 47, 67, 74, 76, 84, 85, 90]\nans = max(lemon_candies_number_list)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "How much more does an orchestra ticket cost than a basketball ticket?",
        "answer": 11.17,
        "generated": [
            "orchestra_ticket = 58.16\nbasketball_ticket = 46.99\nans = orchestra_ticket - basketball_ticket"
        ],
        "results": [
            11.169999999999995
        ],
        "result_counter": {
            "11.169999999999995": 1
        },
        "prediction": 11.169999999999995
    },
    {
        "question": "The local high school found out how many members each club had. Which club has the fewest members?",
        "answer": "Spanish club",
        "generated": [
            "club_members = {'French club': 186, 'math club': 181, 'Japanese club': 168, 'Spanish club': 116}\nmin_value = min(club_members.values())\nfor key, value in club_members.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Spanish club"
        ],
        "result_counter": {
            "Spanish club": 1
        },
        "prediction": "Spanish club"
    },
    {
        "question": "Some friends played a trivia game and recorded their scores. Who had the highest score?",
        "answer": "Luna",
        "generated": [
            "scores_dict = {'Tamir': 81, 'Dillon': 82, 'Luna': 87, 'Wayne': 86}\nmax_value = max(scores_dict.values())\nfor key, value in scores_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Luna"
        ],
        "result_counter": {
            "Luna": 1
        },
        "prediction": "Luna"
    },
    {
        "question": "Some students compared how many pets they have. What is the mean of the numbers?",
        "answer": 5.0,
        "generated": [
            "number_of_pets = [1, 7, 4, 4, 9]\nans = sum(number_of_pets) / len(number_of_pets)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "A farm equipment company kept a record of the number of tractors made each month. In which month did the company make the most tractors?",
        "answer": "March",
        "generated": [
            "tractors_dict = {'December': 885, 'January': 859, 'February': 895, 'March': 898}\nmax_value = max(tractors_dict.values())\nfor key, value in tractors_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "March"
        ],
        "result_counter": {
            "March": 1
        },
        "prediction": "March"
    },
    {
        "question": "Dominic has $72.00. Does he have enough to buy a play ticket and a soccer ticket?",
        "answer": "no",
        "generated": [
            "play_ticket_price = 24.00\nsoccer_ticket_price = 50.00\ntotal_money = 72.00\nif total_money > play_ticket_price + soccer_ticket_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "How much money does Jamal need to buy 6 blue sweaters?",
        "answer": 32.28,
        "generated": [
            "blue_sweater_price = 5.38\nnumber_of_sweaters = 6\nans = blue_sweater_price * number_of_sweaters"
        ],
        "results": [
            32.28
        ],
        "result_counter": {
            "32.28": 1
        },
        "prediction": 32.28
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [12, 13, 14]\ny_values = [3, 5, 15]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "The staff of a newspaper examined the number of copies sold over the past 4 days. On which day were the fewest copies sold?",
        "answer": "Tuesday",
        "generated": [
            "newspapers_sold = {'Tuesday': 337, 'Wednesday': 375, 'Thursday': 357, 'Friday': 353}\nmin_value = min(newspapers_sold.values())\nfor key, value in newspapers_sold.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Tuesday"
        ],
        "result_counter": {
            "Tuesday": 1
        },
        "prediction": "Tuesday"
    },
    {
        "question": "Some students compared how many blocks they live from school. What is the mean of the numbers?",
        "answer": 7.0,
        "generated": [
            "number_of_blocks = [10, 5, 10, 7, 7, 6, 8, 3]\nans = sum(number_of_blocks) / len(number_of_blocks)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "How many more boys than girls are in Mr. Orange's class?",
        "answer": 2.0,
        "generated": [
            "boys_in_orange_class = 6\ngirls_in_orange_class = 4\nans = boys_in_orange_class - girls_in_orange_class"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "Lucia's Candies has been studying how much chocolate people have been eating in different countries. Which country consumed the least chocolate per capita in 2002?",
        "answer": "Australia",
        "generated": [
            "chocolate_consumption_2002 = {'Belgium': 8, 'Switzerland': 11, 'Australia': 4, 'Germany': 10, 'Austria': 8}\nmin_value = min(chocolate_consumption_2002.values())\nfor key, value in chocolate_consumption_2002.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Australia"
        ],
        "result_counter": {
            "Australia": 1
        },
        "prediction": "Australia"
    },
    {
        "question": "Michelle, who rents properties for a living, measures all the offices in a building she is renting. How many offices are exactly 38 square meters?",
        "answer": 2.0,
        "generated": [
            "gumdrops_number_list = [31, 31, 33, 37, 38, 38, 48, 53, 54, 69, 72, 73, 80, 89, 90]\nans = gumdrops_number_list.count(38)"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $625, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_625 = 14500\nquantity_supplied_price_625 = 7500\nif quantity_demanded_price_625 > quantity_supplied_price_625:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "Rosa jotted down how many minutes she spent practicing volleyball in the past 4 days. On which day did Rosa practice the most?",
        "answer": "Wednesday",
        "generated": [
            "practice_minutes = {'Monday': 118, 'Tuesday': 142, 'Wednesday': 169, 'Thursday': 146}\nmax_minutes = max(practice_minutes.values())\nfor day, minutes in practice_minutes.items():\n    if minutes == max_minutes:\n        ans = day"
        ],
        "results": [
            "Wednesday"
        ],
        "result_counter": {
            "Wednesday": 1
        },
        "prediction": "Wednesday"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $1,010, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_1010 = 16700\nquantity_supplied_price_1010 = 6800\nif quantity_demanded_price_1010 > quantity_supplied_price_1010:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "Carson looked at his calendar to figure out how much time he spent babysitting each month. What is the range of the numbers?",
        "answer": 32.0,
        "generated": [
            "hours_list = [50, 57, 36, 68, 61, 45, 55, 54]\nans = max(hours_list) - min(hours_list)"
        ],
        "results": [
            32.0
        ],
        "result_counter": {
            "32.0": 1
        },
        "prediction": 32.0
    },
    {
        "question": "A stock broker followed the stock prices of a certain set of companies. On Tuesday, how much more did Jonas Incorporated's stock cost than Houston Sporting Goods's stock?",
        "answer": 4.0,
        "generated": [
            "jonas_tuesday = 9\nhouston_tuesday = 5\nans = jonas_tuesday - houston_tuesday"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A food critic counted the number of menu items at each restaurant in town. How many restaurants have fewer than 90 menu items?",
        "answer": 20.0,
        "generated": [
            "menu_items_list = [12, 18, 21, 29, 30, 50, 53, 54, 55, 55, 58, 59, 63, 67, 69, 71, 79, 79, 80, 89]\nrestaurants_with_fewer_than_90_items = [item for item in menu_items_list if item < 90]\nans = len(restaurants_with_fewer_than_90_items)"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "The financial aid office at McKinney University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2010 and 2011?",
        "answer": -1.0,
        "generated": [
            "students_2010 = 17\nstudents_2011 = 16\nans = students_2011 - students_2010"
        ],
        "results": [
            -1.0
        ],
        "result_counter": {
            "-1.0": 1
        },
        "prediction": -1.0
    },
    {
        "question": "Some students compared how many clubs they belong to. What is the mode of the numbers?",
        "answer": 5.0,
        "generated": [
            "number_of_clubs = [1, 1, 4, 5, 3, 3, 5, 5]\nclub_count = {}\nfor club in number_of_clubs:\n    if club in club_count:\n        club_count[club] += 1\n    else:\n        club_count[club] = 1\nmax_count = max(club_count.values())\nans = [key for key, value in club_count.items() if value == max_count]"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "Some students compared how many clubs they belong to. What is the mode of the numbers?",
        "answer": 3.0,
        "generated": [
            "from collections import Counter\n\nnumber_of_clubs = [3, 1, 7, 3, 3, 3, 7, 7]\nclub_count = Counter(number_of_clubs)\nmode = club_count.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "A vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Wednesday and Thursday?",
        "answer": 23.0,
        "generated": [
            "leftover_loaves_wednesday = 15\nleftover_loaves_thursday = 38\nans = leftover_loaves_thursday - leftover_loaves_wednesday"
        ],
        "results": [
            23.0
        ],
        "result_counter": {
            "23.0": 1
        },
        "prediction": 23.0
    },
    {
        "question": "Mrs. Newman told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2010 and 2011?",
        "answer": 2.0,
        "generated": [
            "rounds_2010 = 13\nrounds_2011 = 15\nans = rounds_2011 - rounds_2010"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "The county released data about how many schools there are in each town. What is the range of the numbers?",
        "answer": 4.0,
        "generated": [
            "number_of_schools = [7, 5, 7, 9, 5, 8, 8, 5]\nans = max(number_of_schools) - min(number_of_schools)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "Camille wants to buy 1 pound of sesame seeds and 1 pound of pumpkin seeds. How much will she spend?",
        "answer": 7.0,
        "generated": [
            "sesame_seeds_price = 5\npumpkin_seeds_price = 2\ntotal_cost = sesame_seeds_price + pumpkin_seeds_price\nans = total_cost"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "The teachers at a middle school counted how many computers they had in their classrooms. What is the mode of the numbers?",
        "answer": 18.0,
        "generated": [
            "from collections import Counter\n\ncomputers = [18, 18, 11, 6, 6, 18]\ncounter = Counter(computers)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            18.0
        ],
        "result_counter": {
            "18.0": 1
        },
        "prediction": 18.0
    },
    {
        "question": "A stock broker followed the stock prices of a certain set of companies. How much did White and Company's stock cost on Thursday?",
        "answer": 1.0,
        "generated": [
            "white_and_company_thursday_price = 1\nans = white_and_company_thursday_price"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "Cindy has $1.50. Does she have enough to buy a bottle of ketchup and a bottle of vinegar?",
        "answer": "no",
        "generated": [
            "ketchup_price = 0.98\nvinegar_price = 0.57\ntotal_money = 1.5\nif total_money > ketchup_price + vinegar_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [12, 13, 14]\ny_values = [8, 15, 16]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "A high school basketball coach counted the number of points her team scored each game. What is the smallest number of points?",
        "answer": 9.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\npoints_number_list = [9, 13, 14, 26, 38, 50, 64]\nans = min(points_number_list)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "How much money does Trudy need to buy 7 pieces of bubble wrap?",
        "answer": 4.9,
        "generated": [
            "bubble_wrap_price = 0.70\nquantity = 7\nans = bubble_wrap_price * quantity"
        ],
        "results": [
            4.8999999999999995
        ],
        "result_counter": {
            "4.8999999999999995": 1
        },
        "prediction": 4.8999999999999995
    },
    {
        "question": "Gordon and his brother are at a store shopping for a beanbag chair for their school's library. The store sells beanbag chairs with different fabrics and types of filling. What is the probability that a randomly selected beanbag chair is filled with foam and is made from velvet? Simplify any fractions.",
        "answer": "3/10",
        "generated": [
            "total_beanbags = 3 + 4 + 1 + 2\nfoam_and_velvet = 3\nans = foam_and_velvet / total_beanbags"
        ],
        "results": [
            0.3
        ],
        "result_counter": {
            "0.3": 1
        },
        "prediction": 0.3
    },
    {
        "question": "Look at the following schedule. When does Math class begin?",
        "answer": "2:35 P.M.",
        "generated": [
            "class_schedule = {\n    'History': ('8:30 A.M.', '9:35 A.M.'),\n    'English': ('9:45 A.M.', '10:30 A.M.'),\n    'Music': ('10:35 A.M.', '11:55 A.M.'),\n    'Art': ('12:05 P.M.', '1:00 P.M.'),\n    'Chemistry': ('1:05 P.M.', '2:25 P.M.'),\n    'Math': ('2:35 P.M.', '3:50 P.M.'),\n    'Gym': ('4:00 P.M.', '4:40 P.M.')\n}\n\nans = class_schedule['Math'][0]"
        ],
        "results": [
            "2:35 P.M."
        ],
        "result_counter": {
            "2:35 P.M.": 1
        },
        "prediction": "2:35 P.M."
    },
    {
        "question": "Dr. Mueller, a pediatrician, weighed all the children who recently visited her office. What is the weight of the lightest child?",
        "answer": 27.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nweights_list = [27, 29, 37, 37, 44, 50, 57, 64, 65, 65, 66, 67, 67, 68]\nans = min(weights_list)"
        ],
        "results": [
            27.0
        ],
        "result_counter": {
            "27.0": 1
        },
        "prediction": 27.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [15, 16, 17]\ny_values = [18, 9, 0]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "The bird-watching club recorded how many birds its members saw each month. How many more birds did the club see in April than in May?",
        "answer": 107.0,
        "generated": [
            "birds_in_april = 488\nbirds_in_may = 381\nans = birds_in_april - birds_in_may"
        ],
        "results": [
            107.0
        ],
        "result_counter": {
            "107.0": 1
        },
        "prediction": 107.0
    },
    {
        "question": "How much more does an airplane calendar cost than a map of Africa?",
        "answer": 3.13,
        "generated": [
            "airplane_calendar_cost = 13.23\nmap_of_africa_cost = 10.10\nans = airplane_calendar_cost - map_of_africa_cost"
        ],
        "results": [
            3.130000000000001
        ],
        "result_counter": {
            "3.130000000000001": 1
        },
        "prediction": 3.130000000000001
    },
    {
        "question": "A toy store employee counted the number of toys in each bin in the sale section. How many bins had fewer than 54 toys?",
        "answer": 6.0,
        "generated": [
            "bins_with_toys = [14, 17, 20, 28, 39, 46, 56, 58, 60, 60, 66, 70, 71, 72, 74, 82, 83]\nbins_with_fewer_than_54 = [bin for bin in bins_with_toys if bin < 54]\nans = len(bins_with_fewer_than_54)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "As part of a stuffed animal drive for the local children's hospital, the students at Walter Elementary School record how many stuffed animals they have collected. How many students have at least 4 stuffed animals?",
        "answer": 34.0,
        "generated": [
            "students_with_4_or_more = 4 + 20 + 10\nans = students_with_4_or_more"
        ],
        "results": [
            34.0
        ],
        "result_counter": {
            "34.0": 1
        },
        "prediction": 34.0
    },
    {
        "question": "Alexandra's classmates recorded how many books they read last year. What is the mode of the numbers?",
        "answer": 76.0,
        "generated": [
            "from collections import Counter\n\nbooks_read = [76, 76, 72, 72, 76]\ncounter = Counter(books_read)\nmode = counter.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            76.0
        ],
        "result_counter": {
            "76.0": 1
        },
        "prediction": 76.0
    },
    {
        "question": "Kurt's class recorded how many states each student has visited. What is the median of the numbers?",
        "answer": 6.0,
        "generated": [
            "states_visited = [6, 10, 9, 6, 6]\nstates_visited = sorted(states_visited)\nmiddle1 = (len(states_visited) - 1) // 2\nmiddle2 = len(states_visited) // 2\nans = (states_visited[middle1] + states_visited[middle2]) / 2"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "The owner of a plant nursery wrote down the number of roses on each bush. What is the largest number of roses?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nroses_number_list = [21, 36, 47, 57, 64, 65, 74, 82, 84, 90]\nans = max(roses_number_list)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "Look at the following schedule. Ruth just missed the 11.00 A.M. bus at the mall. How long does she have to wait until the next bus?",
        "answer": "1 hour",
        "generated": [
            "missed_bus_time = 11 * 60  # 11:00 A.M. in minutes\nnext_bus_time = 12 * 60  # 12:00 P.M. in minutes\nwait_time = next_bus_time - missed_bus_time\n\nif wait_time == 15:\n    ans = '15 minutes'\nelif wait_time == 30:\n    ans = '30 minutes'\nelif wait_time == 45:\n    ans = '45 minutes'\nelse:\n    ans = '1 hour'"
        ],
        "results": [
            "1 hour"
        ],
        "result_counter": {
            "1 hour": 1
        },
        "prediction": "1 hour"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $1,005, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_1005 = 10000\nquantity_supplied_price_1005 = 17000\nif quantity_demanded_price_1005 > quantity_supplied_price_1005:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "In hopes of raising more funds for arts education, some parents in the Riverside School District publicized the current per-student arts education budget. According to the table, what was the rate of change between 2016 and 2017?",
        "answer": 0.0,
        "generated": [
            "budget_2016 = 42\nbudget_2017 = 42\nans = budget_2017 - budget_2016"
        ],
        "results": [
            0.0
        ],
        "result_counter": {
            "0.0": 1
        },
        "prediction": 0.0
    },
    {
        "question": "Colleen bought 3 pounds of mung beans. How much did she spend?",
        "answer": 4.35,
        "generated": [
            "mung_beans_price_per_pound = 1.45\npounds = 3\nans = mung_beans_price_per_pound * pounds"
        ],
        "results": [
            4.35
        ],
        "result_counter": {
            "4.35": 1
        },
        "prediction": 4.35
    },
    {
        "question": "Emmy, a candy store employee, placed peppermint candies into jars of various sizes. What is the largest number of peppermint candies?",
        "answer": 69.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\npeppermint_candies_number_list = [14, 15, 19, 20, 24, 25, 26, 26, 27, 28, 28, 33, 34, 61, 65, 68, 69]\nans = max(peppermint_candies_number_list)"
        ],
        "results": [
            69.0
        ],
        "result_counter": {
            "69.0": 1
        },
        "prediction": 69.0
    },
    {
        "question": "David counted the pages in each book on his English class's required reading list. How many books had at least 60 pages?",
        "answer": 11.0,
        "generated": [
            "pages_per_book_list = [41, 41, 41, 42, 44, 44, 45, 46, 47, 48, 49, 49, 50, 52, 62, 64, 66, 72, 72, 76, 77, 85, 85, 87, 90]\nbooks_with_at_least_60_pages = [book for book in pages_per_book_list if book >= 60]\nans = len(books_with_at_least_60_pages)"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "A business analyst compared purchases of different types of cereal. How many more boxes of Whole Wheat Goodness were purchased than boxes of Fruit-E-Ohs?",
        "answer": 2058.0,
        "generated": [
            "boxes_whole_wheat_goodness = 6145\nboxes_fruit_e_ohs = 4087\nans = boxes_whole_wheat_goodness - boxes_fruit_e_ohs"
        ],
        "results": [
            2058.0
        ],
        "result_counter": {
            "2058.0": 1
        },
        "prediction": 2058.0
    },
    {
        "question": "Some students compared how many clubs they belong to. What is the mean of the numbers?",
        "answer": 4.0,
        "generated": [
            "number_of_clubs = [1, 1, 7, 7, 1, 7, 1, 7]\nans = sum(number_of_clubs) / len(number_of_clubs)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "Each bunch has 5 flowers. How many flowers are in 4 bunches?",
        "answer": 20.0,
        "generated": [
            "flowers_per_bunch = 5\nnumber_of_bunches = 4\nans = flowers_per_bunch * number_of_bunches"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "Jackson has $9,489.00. Does he have enough to buy a European vacation package and a Jamaican vacation package?",
        "answer": "yes",
        "generated": [
            "european_vacation_price = 6510\njamaican_vacation_price = 2625\ntotal_money = 9489\nif total_money > european_vacation_price + jamaican_vacation_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Several people compared how many Web pages they had visited. Who visited the most Web pages?",
        "answer": "Brendan",
        "generated": [
            "web_pages_visited = {'Brendan': 265, 'Shawn': 259, 'Adam': 256, 'Tess': 226}\nmax_value = max(web_pages_visited.values())\nfor key, value in web_pages_visited.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Brendan"
        ],
        "result_counter": {
            "Brendan": 1
        },
        "prediction": "Brendan"
    },
    {
        "question": "The manager of a party supply store researched how many balloons it sold in the past 7 days. What is the range of the numbers?",
        "answer": 29.0,
        "generated": [
            "balloons_sold = [36, 30, 32, 39, 37, 45, 16]\nans = max(balloons_sold) - min(balloons_sold)"
        ],
        "results": [
            29.0
        ],
        "result_counter": {
            "29.0": 1
        },
        "prediction": 29.0
    },
    {
        "question": "How much money does Rhianna need to buy a hedgehog and a finch?",
        "answer": 109.53,
        "generated": [
            "finch_price = 48.44\nhedgehog_price = 61.09\nans = finch_price + hedgehog_price"
        ],
        "results": [
            109.53
        ],
        "result_counter": {
            "109.53": 1
        },
        "prediction": 109.53
    },
    {
        "question": "A pet store owner had his staff count the number of fish in each tank. How many tanks have fewer than 60 fish?",
        "answer": 8.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nfish_per_tank_list = [31, 34, 37, 45, 45, 45, 49, 55, 61]\ntanks_with_fewer_than_60_fish = [fish for fish in fish_per_tank_list if fish < 60]\nans = len(tanks_with_fewer_than_60_fish)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "A tire factory manager monitored the number of tires made each month. How many more tires did the factory make in January than in February?",
        "answer": 7342.0,
        "generated": [
            "tires_january = 8814\ntires_february = 1472\nans = tires_january - tires_february"
        ],
        "results": [
            7342.0
        ],
        "result_counter": {
            "7342.0": 1
        },
        "prediction": 7342.0
    },
    {
        "question": "Seaside Flooring tracked the number of broken tiles in each shipment it received last year. What is the smallest number of broken tiles?",
        "answer": 40.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbroken_tiles_number_list = [40, 43, 45, 48, 51, 56, 57, 58, 59, 63, 66, 66, 68, 69, 69, 71, 74]\nans = min(broken_tiles_number_list)"
        ],
        "results": [
            40.0
        ],
        "result_counter": {
            "40.0": 1
        },
        "prediction": 40.0
    },
    {
        "question": "Look at the following schedule. Malia is at Hillsboro at 2.15 P.M. How soon can she get to Lanberry?",
        "answer": "3:15 P.M.",
        "generated": [
            "hillsboro_departure_times = ['11:45 A.M.', '12:30 P.M.', '1:30 P.M.', '2:30 P.M.']\nlanberry_arrival_times = ['12:30 P.M.', '1:15 P.M.', '2:15 P.M.', '3:15 P.M.']\n\n# Convert the time strings to minutes\ndef time_to_minutes(time_str):\n    hours, minutes = map(int, time_str[:-6].split(':'))\n    if time_str[-2:] == 'P.M.' and hours != 12:\n        hours += 12\n    return hours * 60 + minutes\n\n# Find the earliest departure time from Hillsboro after 2:15 P.M.\ncurrent_time = time_to_minutes('2:15 P.M.')\nearliest_departure = None\nfor time_str in hillsboro_departure_times:\n    time_minutes = time_to_minutes(time_str)\n    if time_minutes > current_time:\n        earliest_departure = time_minutes\n        break\n\n# Find the corresponding arrival time at Lanberry\narrival_index = hillsboro_departure_times.index(minutes_to_time(earliest_departure))\nans = lanberry_arrival_times[arrival_index]"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "Tori, a birdwatcher, counted the number of each species of bird at the local county parks. How many more birds were spotted in Mountain Park than in Skyline Park?",
        "answer": 6.0,
        "generated": [
            "birds_in_mountain_park = 10 + 19\nbirds_in_skyline_park = 6 + 17\nans = birds_in_mountain_park - birds_in_skyline_park"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Dover Flooring tracked the number of broken tiles in each shipment it received last year. What is the largest number of broken tiles?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbroken_tiles_number_list = [23, 34, 58, 79, 83, 85, 90]\nans = max(broken_tiles_number_list)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "The movie critic liked to count the number of actors in each movie she saw. What is the largest number of actors?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nactors_number_list = [12, 13, 15, 17, 18, 21, 22, 28, 32, 36, 47, 50, 67, 73, 84, 84, 87, 88, 90]\nans = max(actors_number_list)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "A county agency recorded the money donated to several charitable causes over time. How much money was raised for parks in April?",
        "answer": 7.0,
        "generated": [
            "parks_donations_april = 7\nans = parks_donations_april"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Mark buys 0.6 pounds of milk chocolate chips. What is the total cost?",
        "answer": 3.6,
        "generated": [
            "milk_chocolate_chips_price_per_lb = 6\nquantity = 0.6\ntotal_cost = milk_chocolate_chips_price_per_lb * quantity\nans = total_cost"
        ],
        "results": [
            3.5999999999999996
        ],
        "result_counter": {
            "3.5999999999999996": 1
        },
        "prediction": 3.5999999999999996
    },
    {
        "question": "How much money does Dave need to buy a shirt signed by a famous soccer player, a photograph signed by a famous movie star, and a jersey signed by a famous hockey player?",
        "answer": 8696.0,
        "generated": [
            "soccer_shirt = 1785.00\nmovie_star_photo = 4463.00\nhockey_jersey = 2448.00\nans = soccer_shirt + movie_star_photo + hockey_jersey"
        ],
        "results": [
            8696.0
        ],
        "result_counter": {
            "8696.0": 1
        },
        "prediction": 8696.0
    },
    {
        "question": "Tucker bought 1 kilogram of coarse gravel and 3 kilograms of white sand. How much did he spend?",
        "answer": 8.04,
        "generated": [
            "coarse_gravel_price = 1.62\nwhite_sand_price = 2.14\ncoarse_gravel_weight = 1\nwhite_sand_weight = 3\ntotal_cost = coarse_gravel_price * coarse_gravel_weight + white_sand_price * white_sand_weight\nans = total_cost"
        ],
        "results": [
            8.04
        ],
        "result_counter": {
            "8.04": 1
        },
        "prediction": 8.04
    },
    {
        "question": "Miss Lawrence ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. How many people did at least 30 sit-ups but fewer than 90 sit-ups?",
        "answer": 22.0,
        "generated": [
            "sit_ups_list = [21, 31, 31, 38, 42, 55, 56, 56, 58, 59, 62, 64, 67, 70, 70, 70, 74, 75, 77, 79, 81, 84, 87]\nans = len([sit_up for sit_up in sit_ups_list if 30 <= sit_up < 90])"
        ],
        "results": [
            22.0
        ],
        "result_counter": {
            "22.0": 1
        },
        "prediction": 22.0
    },
    {
        "question": "At a charity basketball shootout, excited fans counted the baskets and misses made by each of the team mascots. How many more baskets did Annie Armadillo have than Barry Bulldog?",
        "answer": 4.0,
        "generated": [
            "annie_baskets = 5\nbarry_baskets = 1\nans = annie_baskets - barry_baskets"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "An environmental agency examined how many trees were planted by different organizations. Which organization planted the fewest trees?",
        "answer": "Acorns to Oaks",
        "generated": [
            "trees_planted_dict = {'Make it Green': 565, 'Dreaming Green': 552, 'Acorns to Oaks': 526, 'New Planet': 562}\nmin_value = min(trees_planted_dict.values())\nfor key, value in trees_planted_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Acorns to Oaks"
        ],
        "result_counter": {
            "Acorns to Oaks": 1
        },
        "prediction": "Acorns to Oaks"
    },
    {
        "question": "The train conductor made sure to count the number of passengers on each train. How many trains had exactly 41 passengers?",
        "answer": 1.0,
        "generated": [
            "number_list = [11, 24, 31, 35, 36, 36, 40, 41, 47, 54, 57, 58, 58, 59]\nans = number_list.count(41)"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "Look at the following schedule. When does the bobsled event end?",
        "answer": "1:10 P.M.",
        "generated": [
            "event_end_times = {'cross-country skiing': '12:10 P.M.', 'figure skating': '12:35 P.M.', 'bobsled': '1:10 P.M.', 'ice hockey': '3:50 P.M.', 'luge': '7:25 P.M.', 'snowboarding': '9:55 P.M.'}\nans = event_end_times['bobsled']"
        ],
        "results": [
            "1:10 P.M."
        ],
        "result_counter": {
            "1:10 P.M.": 1
        },
        "prediction": "1:10 P.M."
    },
    {
        "question": "The movie critic liked to count the number of actors in each movie she saw. What is the largest number of actors?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nactors_number_list = [35, 35, 41, 44, 50, 59, 61, 77, 84, 90, 90, 90]\nans = max(actors_number_list)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [13, 14, 15]\ny_values = [3, 7, 13]\n\nslope1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "An environmental agency examined how many trees were planted by different organizations. What is the mean of the numbers?",
        "answer": 81.0,
        "generated": [
            "number_of_trees_planted = [69, 94, 74, 83, 82, 70, 84, 92]\nans = sum(number_of_trees_planted) / len(number_of_trees_planted)"
        ],
        "results": [
            81.0
        ],
        "result_counter": {
            "81.0": 1
        },
        "prediction": 81.0
    },
    {
        "question": "An Idaho farmer has been monitoring crop prices over time. Per cwt, how much did peas cost in 2004?",
        "answer": 7.0,
        "generated": [
            "crop_prices = {'Lentils': {'2004': 14, '2005': 12},\n               'Timothy seed': {'2004': 7, '2005': 7},\n               'Apples': {'2004': 12, '2005': 18},\n               'Canola': {'2004': 11, '2005': 10},\n               'Peas': {'2004': 7, '2005': 6}}\n\nans = crop_prices['Peas']['2004']"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "The receptionist at a doctor's office kept track of each patient's wait time. What is the shortest wait time?",
        "answer": 33.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nwait_times = [33, 41, 44, 56, 57, 66, 72]\nans = min(wait_times)"
        ],
        "results": [
            33.0
        ],
        "result_counter": {
            "33.0": 1
        },
        "prediction": 33.0
    },
    {
        "question": "Irma found a list of the number of roller coasters at each amusement park in the state. How many amusement parks have fewer than 50 roller coasters?",
        "answer": 19.0,
        "generated": [
            "roller_coasters_list = [13, 19, 20, 20, 20, 21, 27, 27, 28, 29, 32, 33, 36, 38, 42, 42, 44, 45, 47]\nans = len([x for x in roller_coasters_list if x < 50])"
        ],
        "results": [
            19.0
        ],
        "result_counter": {
            "19.0": 1
        },
        "prediction": 19.0
    },
    {
        "question": "In science class, Brooke is measuring the temperature of different chemical mixtures. The temperatures of two mixtures are shown in the table. Which mixture's temperature is closest to zero?",
        "answer": "bromine mixture",
        "generated": [
            "bromine_temperature = -4\nacetone_temperature = 5\nif abs(bromine_temperature) < abs(acetone_temperature):\n    ans = 'bromine mixture'\nelse:\n    ans = 'acetone mixture'"
        ],
        "results": [
            "bromine mixture"
        ],
        "result_counter": {
            "bromine mixture": 1
        },
        "prediction": "bromine mixture"
    },
    {
        "question": "The players on a quiz show received the following scores. What is the median of the numbers?",
        "answer": 3.0,
        "generated": [
            "scores = [2, 4, 2, 2, 6, 5, 3]\nscores = sorted(scores)\nmiddle1 = (len(scores) - 1) // 2\nmiddle2 = len(scores) // 2\nans = (scores[middle1] + scores[middle2]) / 2"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "A county agency recorded the money donated to several charitable causes over time. Which cause raised less money in April, hunger or medical research?",
        "answer": "medical research",
        "generated": [
            "donations_april = {'Medical research': 4, 'Parks': 13, 'Hunger': 7}\nmin_value_april = min(donations_april.values())\nfor key, value in donations_april.items():\n    if value == min_value_april:\n        ans = key.lower()"
        ],
        "results": [
            "medical research"
        ],
        "result_counter": {
            "medical research": 1
        },
        "prediction": "medical research"
    },
    {
        "question": "The transportation company tracked the number of train tickets sold in the past 5 days. What is the median of the numbers?",
        "answer": 24.0,
        "generated": [
            "tickets_sold = [24, 28, 26, 24, 20]\ntickets_sold = sorted(tickets_sold)\nmiddle1 = (len(tickets_sold) - 1) // 2\nmiddle2 = len(tickets_sold) // 2\nans = (tickets_sold[middle1] + tickets_sold[middle2]) / 2"
        ],
        "results": [
            24.0
        ],
        "result_counter": {
            "24.0": 1
        },
        "prediction": 24.0
    },
    {
        "question": "Billy is shopping for a new bicycle. He is most interested in color and type of tires. What is the probability that a randomly selected bike is green and has road bike tires? Simplify any fractions.",
        "answer": "2/11",
        "generated": [
            "total_bikes = 5 + 2 + 2 + 2\ngreen_road_bike_tires = 2\nans = green_road_bike_tires / total_bikes"
        ],
        "results": [
            0.18181818181818182
        ],
        "result_counter": {
            "0.18181818181818182": 1
        },
        "prediction": 0.18181818181818182
    },
    {
        "question": "Kenneth has $1,614.00. Does he have enough to buy a surfing adventure package and a camping adventure package?",
        "answer": "yes",
        "generated": [
            "surfing_adventure_price = 904.00\ncamping_adventure_price = 641.00\ntotal_money = 1614.00\nif total_money > surfing_adventure_price + camping_adventure_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "A dentist was making note of his upcoming appointments with different aged patients and the reasons for their visits. What is the probability that a randomly selected appointment is with patients 19-60 years old and is for a broken tooth? Simplify any fractions.",
        "answer": "5/13",
        "generated": [
            "total_appointments = (3 + 2) + (3 + 5)\nappointments_19_to_60_broken_tooth = 5\nans = appointments_19_to_60_broken_tooth / total_appointments"
        ],
        "results": [
            0.38461538461538464
        ],
        "result_counter": {
            "0.38461538461538464": 1
        },
        "prediction": 0.38461538461538464
    },
    {
        "question": "How much money does Sasha need to buy a gold tack and an elastic band?",
        "answer": 0.08,
        "generated": [
            "gold_tack_price = 0.05\nelastic_band_price = 0.03\nans = gold_tack_price + elastic_band_price"
        ],
        "results": [
            0.08
        ],
        "result_counter": {
            "0.08": 1
        },
        "prediction": 0.08
    },
    {
        "question": "Carly went to the store and bought 1+1/10 pounds of coffee ice cream. How much did she spend?",
        "answer": 6.6,
        "generated": [
            "coffee_ice_cream_price = 6\npounds_of_coffee_ice_cream = 1 + 1/10\nans = coffee_ice_cream_price * pounds_of_coffee_ice_cream"
        ],
        "results": [
            6.6000000000000005
        ],
        "result_counter": {
            "6.6000000000000005": 1
        },
        "prediction": 6.6000000000000005
    },
    {
        "question": "How much money does Kimberly need to buy a football ticket, a soccer ticket, and a hockey ticket?",
        "answer": 169.0,
        "generated": [
            "football_ticket = 81\nsoccer_ticket = 52\nhockey_ticket = 36\nans = football_ticket + soccer_ticket + hockey_ticket"
        ],
        "results": [
            169.0
        ],
        "result_counter": {
            "169.0": 1
        },
        "prediction": 169.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "xy_values = [(4, 8), (5, 10), (6, 18)]\ndifferences = []\n\nfor i in range(len(xy_values) - 1):\n    x_diff = xy_values[i + 1][0] - xy_values[i][0]\n    y_diff = xy_values[i + 1][1] - xy_values[i][1]\n    differences.append(y_diff / x_diff)\n\nif len(set(differences)) == 1:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "Tara has $110. Does she have enough to buy a cockatoo and a pot-bellied pig?",
        "answer": "no",
        "generated": [
            "cockatoo_price = 89\npot_bellied_pig_price = 25\ntotal_money = 110\nif total_money > cockatoo_price + pot_bellied_pig_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "How much money does Lena need to buy a bulldozer, a dump truck, and a hydrofoil?",
        "answer": 22858.0,
        "generated": [
            "hydrofoil_price = 8453\nbulldozer_price = 7768\ndump_truck_price = 6637\nans = hydrofoil_price + bulldozer_price + dump_truck_price"
        ],
        "results": [
            22858.0
        ],
        "result_counter": {
            "22858.0": 1
        },
        "prediction": 22858.0
    },
    {
        "question": "Each apartment has 10 light switches. How many light switches are in 5 apartments?",
        "answer": 50.0,
        "generated": [
            "number_of_light_switches_per_apartment = 10\nnumber_of_apartments = 5\nans = number_of_light_switches_per_apartment * number_of_apartments"
        ],
        "results": [
            50.0
        ],
        "result_counter": {
            "50.0": 1
        },
        "prediction": 50.0
    },
    {
        "question": "Look at the following schedule. At which stop does the ferry arrive at 6.10 P.M.?",
        "answer": "Pebble Town",
        "generated": [
            "ferry_schedule = {\n    'Sandy Shores': '8:00 A.M.',\n    'Starfish City': '8:30 A.M.',\n    'Cliff View': '9:50 A.M.',\n    'Beach Town': '10:55 A.M.',\n    'Bay Harbor': '12:20 P.M.',\n    'Windy Sands': '1:50 P.M.',\n    'Foggy Port': '3:35 P.M.',\n    'Grassy Beach': '4:15 P.M.',\n    'Green Harbor': '5:35 P.M.',\n    'Pebble Town': '6:10 P.M.'\n}\n\narrival_time = '6:10 P.M.'\nfor location, time in ferry_schedule.items():\n    if time == arrival_time:\n        ans = location"
        ],
        "results": [
            "Pebble Town"
        ],
        "result_counter": {
            "Pebble Town": 1
        },
        "prediction": "Pebble Town"
    },
    {
        "question": "Carrie looked at the dates of the digital photos on her computer to find out how many she had taken in the past 7 days. What is the mode of the numbers?",
        "answer": 6.0,
        "generated": [
            "from collections import Counter\n\nphotos_taken = [10, 10, 6, 4, 4, 6, 6]\ncounter = Counter(photos_taken)\nmode = counter.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Gabe went to the store. He bought 1 kilogram of raisins. How much did he spend?",
        "answer": 2.91,
        "generated": [
            "raisins_price_per_kilogram = 2.91\nquantity = 1\nans = raisins_price_per_kilogram * quantity"
        ],
        "results": [
            2.91
        ],
        "result_counter": {
            "2.91": 1
        },
        "prediction": 2.91
    },
    {
        "question": "The houses in Tanvi's town get their water from a local reservoir. Tanvi and a group of engineers monitor the water level for safety and health reasons. The change in water level over two months is shown in the table. During which month did the water level change more?",
        "answer": "April",
        "generated": [
            "change_in_water_level = {'April': -6, 'May': 4}\nmax_change = max(abs(value) for value in change_in_water_level.values())\nfor month, change in change_in_water_level.items():\n    if abs(change) == max_change:\n        ans = month"
        ],
        "results": [
            "April"
        ],
        "result_counter": {
            "April": 1
        },
        "prediction": "April"
    },
    {
        "question": "The movie critic liked to count the number of actors in each movie he saw. What is the smallest number of actors?",
        "answer": 22.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nactors_number_list = [22, 23, 24, 26, 27, 29, 30, 32, 34, 34, 36, 36, 36, 37, 42, 43, 45, 65, 66, 66, 70, 74, 74, 79]\nans = min(actors_number_list)"
        ],
        "results": [
            22.0
        ],
        "result_counter": {
            "22.0": 1
        },
        "prediction": 22.0
    },
    {
        "question": "A real estate agent evaluated the number of houses sold this year in each town in Taylor County. What fraction of houses sold in Taylor County were in Stamford? Simplify your answer.",
        "answer": "48/103",
        "generated": [
            "total_houses_sold = 270 + 480 + 280\nstamford_houses_sold = 480\nans = stamford_houses_sold / total_houses_sold"
        ],
        "results": [
            0.46601941747572817
        ],
        "result_counter": {
            "0.46601941747572817": 1
        },
        "prediction": 0.46601941747572817
    },
    {
        "question": "The Hillsboro Tourism Office researched how often people played miniature golf last summer. How many people are there in all?",
        "answer": 46.0,
        "generated": [
            "frequency_list = [15, 4, 8, 10, 9]\nans = sum(frequency_list)"
        ],
        "results": [
            46.0
        ],
        "result_counter": {
            "46.0": 1
        },
        "prediction": 46.0
    },
    {
        "question": "Some friends played a trivia game and recorded their scores. Who had the lowest score?",
        "answer": "Edward",
        "generated": [
            "scores_dict = {'Roger': 28, 'Brennan': 29, 'Manny': 27, 'Edward': 25}\nmin_score = min(scores_dict.values())\nfor key, value in scores_dict.items():\n    if value == min_score:\n        ans = key"
        ],
        "results": [
            "Edward"
        ],
        "result_counter": {
            "Edward": 1
        },
        "prediction": "Edward"
    },
    {
        "question": "Each fish bowl has 10 fish. How many fish are in 5 fish bowls?",
        "answer": 50.0,
        "generated": [
            "number_of_fish_per_bowl = 10\nnumber_of_bowls = 5\nans = number_of_fish_per_bowl * number_of_bowls"
        ],
        "results": [
            50.0
        ],
        "result_counter": {
            "50.0": 1
        },
        "prediction": 50.0
    },
    {
        "question": "Erin has $39.00. Does she have enough to buy a book about sharks and a book about basketball?",
        "answer": "yes",
        "generated": [
            "sharks_book_price = 19.00\nbasketball_book_price = 18.00\ntotal_money = 39.00\nif total_money >= sharks_book_price + basketball_book_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "How much money does Edward need to buy 2 navy blue bath mats?",
        "answer": 30.0,
        "generated": [
            "navy_blue_bath_mat_price = 15.00\nquantity = 2\nans = navy_blue_bath_mat_price * quantity"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "Lillian looked at her calendar to figure out how much time she spent babysitting each month. What is the mode of the numbers?",
        "answer": 6.0,
        "generated": [
            "from collections import Counter\n\nhours = [8, 6, 8, 6, 6, 9, 9]\ncounter = Counter(hours)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $690, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_690 = 13500\nquantity_supplied_price_690 = 15600\nif quantity_demanded_price_690 > quantity_supplied_price_690:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "A county agency recorded the money donated to several charitable causes over time. How much money was raised for animals in March?",
        "answer": 10.0,
        "generated": [
            "animals_donation_march = 10\nans = animals_donation_march"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "This is Duncan's complete financial record for July. On July 5, how much money did Duncan make?",
        "answer": 15.0,
        "generated": [
            "received_on_july_5 = 15.00\nans = received_on_july_5"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "Grace's school reported how many members each sports team had. Which team has the most members?",
        "answer": "baseball team",
        "generated": [
            "team_members = {'baseball team': 38, 'football team': 37, 'water polo team': 34, 'volleyball team': 35}\nmax_value = max(team_members.values())\nfor key, value in team_members.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "baseball team"
        ],
        "result_counter": {
            "baseball team": 1
        },
        "prediction": "baseball team"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $580, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_580 = 7000\nquantity_supplied_price_580 = 16100\nif quantity_demanded_price_580 > quantity_supplied_price_580:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "Mrs. Roy, the biology teacher, asked her students how many times they went to the science museum last year. How many students went to the science museum more than 1 time?",
        "answer": 33.0,
        "generated": [
            "frequency_more_than_1_trip = [2, 5, 12, 1, 13]\nans = sum(frequency_more_than_1_trip)"
        ],
        "results": [
            33.0
        ],
        "result_counter": {
            "33.0": 1
        },
        "prediction": 33.0
    },
    {
        "question": "This morning, Mr. Molina released the scores from last week's spelling test. How many students scored at least 58 points?",
        "answer": 14.0,
        "generated": [
            "scores_list = [17, 22, 28, 30, 35, 35, 38, 39, 45, 47, 48, 58, 59, 62, 66, 67, 71, 72, 75, 77, 78, 78, 79, 81, 90]\nstudents_with_58_or_more = [score for score in scores_list if score >= 58]\nans = len(students_with_58_or_more)"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "The town council reported on how many stop signs there are on each street. What is the mean of the numbers?",
        "answer": 6.0,
        "generated": [
            "number_of_stop_signs = [3, 10, 6, 5, 5, 7]\nans = sum(number_of_stop_signs) / len(number_of_stop_signs)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "no",
        "generated": [
            "x_values = [3, 19, 19, 13]\ny_values = [16, 2, 4, 18]\n\nxy_pairs = list(zip(x_values, y_values))\nunique_x_values = set(x_values)\n\nis_function = True\nfor x in unique_x_values:\n    y_values_for_x = [y for x_pair, y in xy_pairs if x_pair == x]\n    if len(y_values_for_x) > 1:\n        is_function = False\n        break\n\nif is_function:\n    ans = 'yes'\nelse:\n    ans = 'no'"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "Each desk has 5 yellow notepads. How many yellow notepads are on 5 desks?",
        "answer": 25.0,
        "generated": [
            "notepads_per_desk = 5\nnumber_of_desks = 5\nans = notepads_per_desk * number_of_desks"
        ],
        "results": [
            25.0
        ],
        "result_counter": {
            "25.0": 1
        },
        "prediction": 25.0
    },
    {
        "question": "Each bag has 10 yellow buttons. How many yellow buttons are in 3 bags?",
        "answer": 30.0,
        "generated": [
            "number_of_yellow_buttons_per_bag = 10\nnumber_of_bags = 3\nans = number_of_yellow_buttons_per_bag * number_of_bags"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "Each bag has 5 yellow buttons. How many yellow buttons are in 3 bags?",
        "answer": 15.0,
        "generated": [
            "yellow_buttons_per_bag = 5\nnumber_of_bags = 3\nans = yellow_buttons_per_bag * number_of_bags"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "Henry went to the store and bought 3.7 pounds of salmon. How much did he spend?",
        "answer": 14.8,
        "generated": [
            "salmon_price_per_lb = 4\nsalmon_weight = 3.7\nans = salmon_price_per_lb * salmon_weight"
        ],
        "results": [
            14.8
        ],
        "result_counter": {
            "14.8": 1
        },
        "prediction": 14.8
    },
    {
        "question": "In the first episode of a reality show, contestants had to spin two wheels of fate. Spinning the first wheel determined the remote location where contestants would reside for the duration of the season. Spinning the second wheel determined which \"bonus survival tool\" they would be allowed to bring, along with a few other necessary items. What is the probability that a randomly selected participant spun the first wheel and landed on desert and spun the second wheel and landed on a tent? Simplify any fractions.",
        "answer": "3/10",
        "generated": [
            "total_outcomes = 4  # There are 4 possible outcomes: (Desert, Tent), (Desert, Matches), (Rainforest, Tent), (Rainforest, Matches)\ndesired_outcome = 1  # We want the outcome (Desert, Tent)\nans = desired_outcome / total_outcomes"
        ],
        "results": [
            0.25
        ],
        "result_counter": {
            "0.25": 1
        },
        "prediction": 0.25
    },
    {
        "question": "The houses in Krysta's town get their water from a local reservoir. Krysta and a group of engineers monitor the water level for safety and health reasons. The change in water level over two months is shown in the table. During which month did the water level change more?",
        "answer": "April",
        "generated": [
            "change_in_water_level = {'April': -6, 'May': 4}\nmax_change = max(abs(value) for value in change_in_water_level.values())\nfor month, change in change_in_water_level.items():\n    if abs(change) == max_change:\n        ans = month"
        ],
        "results": [
            "April"
        ],
        "result_counter": {
            "April": 1
        },
        "prediction": "April"
    },
    {
        "question": "How much money does Percy need to buy a book about hiking and a book about Australia?",
        "answer": 12.0,
        "generated": [
            "hiking_book_price = 5\naustralia_book_price = 7\nans = hiking_book_price + australia_book_price"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "Danielle just returned from a spring break volunteer trip. She is shopping for a photo album that will showcase her photos from the trip. The albums range in photo capacity and orientation. What is the probability that a randomly selected photo album holds exactly 100 photos and is oriented vertically? Simplify any fractions.",
        "answer": "5/17",
        "generated": [
            "total_albums = 4\nalbums_100_photos_vertically = 1\nans = albums_100_photos_vertically / total_albums"
        ],
        "results": [
            0.25
        ],
        "result_counter": {
            "0.25": 1
        },
        "prediction": 0.25
    },
    {
        "question": "How much more does a fleece blanket cost than a beach blanket?",
        "answer": 0.56,
        "generated": [
            "fleece_blanket_cost = 14.08\nbeach_blanket_cost = 13.52\nans = fleece_blanket_cost - beach_blanket_cost"
        ],
        "results": [
            0.5600000000000005
        ],
        "result_counter": {
            "0.5600000000000005": 1
        },
        "prediction": 0.5600000000000005
    },
    {
        "question": "Madelyn graphed the temperature at noon for 5 days. What is the median of the numbers?",
        "answer": 7.0,
        "generated": [
            "temperatures = [7, 10, 5, 7, 7]\ntemperatures = sorted(temperatures)\nmiddle1 = (len(temperatures) - 1) // 2\nmiddle2 = len(temperatures) // 2\nans = (temperatures[middle1] + temperatures[middle2]) / 2"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $380, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_380 = 5800\nquantity_supplied_price_380 = 21000\nif quantity_demanded_price_380 > quantity_supplied_price_380:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "A food manufacturer surveyed consumers about their macaroni and cheese consumption. How many people ate macaroni and cheese more than 1 time?",
        "answer": 44.0,
        "generated": [
            "times_eaten_more_than_1 = [5, 2, 3, 15, 19]\nans = sum(times_eaten_more_than_1)"
        ],
        "results": [
            44.0
        ],
        "result_counter": {
            "44.0": 1
        },
        "prediction": 44.0
    },
    {
        "question": "For a science fair project, Mackenzie tracked the temperature each day. How many temperature readings were at least 10\u00b0C but less than 18\u00b0C?",
        "answer": 4.0,
        "generated": [
            "temperature_list = [11, 11, 12, 12, 23, 26, 26, 27, 28, 30, 32, 32, 33, 35, 35, 41, 43]\ncount = 0\nfor temp in temperature_list:\n    if 10 <= temp < 18:\n        count += 1\nans = count"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A museum curator counted the number of paintings in each exhibit at the art museum. How many exhibits have at least 20 paintings but fewer than 50 paintings?",
        "answer": 3.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nexhibit_list = [15, 25, 29, 30, 63, 66]\nans = sum(20 <= exhibit < 50 for exhibit in exhibit_list)"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "An agricultural agency is researching how much cheese people have been eating in different parts of the world. Which country consumed the most cheese per capita in 2006?",
        "answer": "Germany",
        "generated": [
            "cheese_consumption_2006 = {'Germany': 20, 'Great Britain': 10, 'Canada': 11, 'Australia': 10, 'Argentina': 11}\nmax_value = max(cheese_consumption_2006.values())\nfor key, value in cheese_consumption_2006.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Germany"
        ],
        "result_counter": {
            "Germany": 1
        },
        "prediction": "Germany"
    },
    {
        "question": "The school district compared how many math teachers each high school has. What is the range of the numbers?",
        "answer": 6.0,
        "generated": [
            "number_of_teachers = [4, 9, 8, 6, 10, 8, 8, 9]\nans = max(number_of_teachers) - min(number_of_teachers)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "The Springtown Chamber of Commerce researched the number of employees working at local companies. How many companies have less than 89 employees?",
        "answer": 19.0,
        "generated": [
            "company_sizes = [28, 33, 33, 34, 40, 46, 46, 47, 49, 51, 52, 58, 61, 68, 72, 72, 78, 78, 82, 89, 90]\ncompanies_less_than_89 = [size for size in company_sizes if size < 89]\nans = len(companies_less_than_89)"
        ],
        "results": [
            19.0
        ],
        "result_counter": {
            "19.0": 1
        },
        "prediction": 19.0
    },
    {
        "question": "A food critic counted the number of menu items at each restaurant in town. What is the largest number of menu items?",
        "answer": 74.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nmenu_items_number_list = [16, 19, 50, 55, 62, 74]\nans = max(menu_items_number_list)"
        ],
        "results": [
            74.0
        ],
        "result_counter": {
            "74.0": 1
        },
        "prediction": 74.0
    },
    {
        "question": "A theme park developer recorded the number of people who visited the local water park last summer. How many people went to the water park at least 3 times?",
        "answer": 12.0,
        "generated": [
            "number_of_trips_frequency = {1: 12, 2: 16, 3: 0, 4: 5, 5: 7}\nans = sum([frequency for trips, frequency in number_of_trips_frequency.items() if trips >= 3])"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "How much more does a navy blue bath mat cost than a green kitchen towel?",
        "answer": 4.58,
        "generated": [
            "bath_mat_cost = 7.57\nkitchen_towel_cost = 2.99\nans = bath_mat_cost - kitchen_towel_cost"
        ],
        "results": [
            4.58
        ],
        "result_counter": {
            "4.58": 1
        },
        "prediction": 4.58
    },
    {
        "question": "For an assignment, Stefan looked at which countries got the most Nobel Prizes in various decades. Which country had more Nobel Prize winners in the 1970s, Russia or Germany?",
        "answer": "Germany",
        "generated": [
            "nobel_prize_winners = {'Germany': {'1970s': 9, '1980s': 11},\n                       'Canada': {'1970s': 2, '1980s': 3},\n                       'Russia': {'1970s': 5, '1980s': 1},\n                       'France': {'1970s': 3, '1980s': 5}}\n\nif nobel_prize_winners['Russia']['1970s'] > nobel_prize_winners['Germany']['1970s']:\n    ans = 'Russia'\nelse:\n    ans = 'Germany'"
        ],
        "results": [
            "Germany"
        ],
        "result_counter": {
            "Germany": 1
        },
        "prediction": "Germany"
    },
    {
        "question": "Some students compared how many clubs they belong to. What is the range of the numbers?",
        "answer": 6.0,
        "generated": [
            "number_of_clubs = [8, 7, 2, 6, 2, 7, 4]\nans = max(number_of_clubs) - min(number_of_clubs)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "How much money does Emmet need to buy 8 European vacation packages and 7 Caribbean vacation packages?",
        "answer": 8899.0,
        "generated": [
            "european_vacation_package = 576\ncaribbean_vacation_package = 613\ntotal_cost = (8 * european_vacation_package) + (7 * caribbean_vacation_package)\nans = total_cost"
        ],
        "results": [
            8899.0
        ],
        "result_counter": {
            "8899.0": 1
        },
        "prediction": 8899.0
    },
    {
        "question": "How much money does Jason need to buy a set of forks and a baking dish?",
        "answer": 26.88,
        "generated": [
            "forks_price = 11.35\nbaking_dish_price = 15.53\nans = forks_price + baking_dish_price"
        ],
        "results": [
            26.88
        ],
        "result_counter": {
            "26.88": 1
        },
        "prediction": 26.88
    },
    {
        "question": "A waitress kept track of how many hours she worked each day. What is the median of the numbers?",
        "answer": 8.0,
        "generated": [
            "hours_worked = [6, 8, 8, 8, 2, 10, 6]\nhours_worked = sorted(hours_worked)\nmiddle1 = (len(hours_worked) - 1) // 2\nmiddle2 = len(hours_worked) // 2\nans = (hours_worked[middle1] + hours_worked[middle2]) / 2"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "An adventure tour company found out how many whales people saw on its most popular whale tour. How many people saw fewer than 3 whales?",
        "answer": 38.0,
        "generated": [
            "number_of_people_who_saw_0_whales = 16\nnumber_of_people_who_saw_1_whale = 17\nnumber_of_people_who_saw_2_whales = 5\nans = number_of_people_who_saw_0_whales + number_of_people_who_saw_1_whale + number_of_people_who_saw_2_whales"
        ],
        "results": [
            38.0
        ],
        "result_counter": {
            "38.0": 1
        },
        "prediction": 38.0
    },
    {
        "question": "The school cafeteria asked students about their favorite sandwiches before updating the lunch menu. How many students voted for cheese sandwiches?",
        "answer": 22.0,
        "generated": [
            "lower_elementary_cheese = 6\nupper_elementary_cheese = 16\nans = lower_elementary_cheese + upper_elementary_cheese"
        ],
        "results": [
            22.0
        ],
        "result_counter": {
            "22.0": 1
        },
        "prediction": 22.0
    },
    {
        "question": "A real estate agent looked into how many houses were sold in different cities. What is the range of the numbers?",
        "answer": 11.0,
        "generated": [
            "number_of_houses_sold = [83, 86, 94, 92, 94, 89, 89, 87]\nans = max(number_of_houses_sold) - min(number_of_houses_sold)"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "Look at the following schedule. When does the koala feeding begin?",
        "answer": "2:10 P.M.",
        "generated": [
            "event_schedule = {\n    'giraffe feeding': ('10:00 A.M.', '11:05 A.M.'),\n    'bear lecture': ('11:40 A.M.', '12:30 P.M.'),\n    'insect show': ('1:10 P.M.', '1:40 P.M.'),\n    'koala feeding': ('2:10 P.M.', '2:40 P.M.'),\n    'reptile show': ('3:10 P.M.', '4:00 P.M.'),\n    'tiger lecture': ('3:30 P.M.', '4:50 P.M.'),\n    'bird show': ('5:40 P.M.', '6:25 P.M.')\n}\n\nans = event_schedule['koala feeding'][0]"
        ],
        "results": [
            "2:10 P.M."
        ],
        "result_counter": {
            "2:10 P.M.": 1
        },
        "prediction": "2:10 P.M."
    },
    {
        "question": "In science class, Alana is measuring the temperature of different chemical mixtures. The temperatures of two mixtures are shown in the table. Which mixture's temperature is closest to zero?",
        "answer": "bromine mixture",
        "generated": [
            "bromine_temperature = -4\nacetone_temperature = 5\nif abs(bromine_temperature) < abs(acetone_temperature):\n    ans = 'bromine mixture'\nelse:\n    ans = 'acetone mixture'"
        ],
        "results": [
            "bromine mixture"
        ],
        "result_counter": {
            "bromine mixture": 1
        },
        "prediction": "bromine mixture"
    },
    {
        "question": "A county agency recorded the money donated to several charitable causes over time. How much money was raised for animals in May?",
        "answer": 13.0,
        "generated": [
            "ans = 13"
        ],
        "results": [
            13.0
        ],
        "result_counter": {
            "13.0": 1
        },
        "prediction": 13.0
    },
    {
        "question": "A philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Anne donate to clean water than Bridget?",
        "answer": 3.0,
        "generated": [
            "anne_donation_clean_water = 19\nbridget_donation_clean_water = 16\nans = anne_donation_clean_water - bridget_donation_clean_water"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "How much money does Vijay need to buy a piano key chain and a pumpkin key chain?",
        "answer": 1.82,
        "generated": [
            "piano_key_chain_price = 0.84\npumpkin_key_chain_price = 0.98\nans = piano_key_chain_price + pumpkin_key_chain_price"
        ],
        "results": [
            1.8199999999999998
        ],
        "result_counter": {
            "1.8199999999999998": 1
        },
        "prediction": 1.8199999999999998
    },
    {
        "question": "Look at the following schedule. Jayla got on the bus at the mall at 10.30 A.M. What time will she get to the playground?",
        "answer": "1:15 P.M.",
        "generated": [
            "mall_to_playground = {'9:45 A.M.': '12:30 P.M.', '10:00 A.M.': '12:45 P.M.', '10:30 A.M.': '1:15 P.M.', '11:00 A.M.': '1:45 P.M.'}\njayla_mall_time = '10:30 A.M.'\nans = mall_to_playground[jayla_mall_time]"
        ],
        "results": [
            "1:15 P.M."
        ],
        "result_counter": {
            "1:15 P.M.": 1
        },
        "prediction": "1:15 P.M."
    },
    {
        "question": "Emmett went to the store and bought 1.4 kilograms of marmalade. How much did he spend?",
        "answer": 2.8,
        "generated": [
            "marmalade_price_per_kg = 2\nmarmalade_weight = 1.4\nans = marmalade_price_per_kg * marmalade_weight"
        ],
        "results": [
            2.8
        ],
        "result_counter": {
            "2.8": 1
        },
        "prediction": 2.8
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [7, 8, 9]\ny_values = [17, 10, 5]\n\nslope1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "Look at the following schedule. Rick just missed the 10.00 A.M. bus at the amusement park. How long does he have to wait until the next bus?",
        "answer": "15 minutes",
        "generated": [
            "missed_bus_time = 10 * 60  # 10:00 A.M. in minutes\nnext_bus_time = 10 * 60 + 15  # 10:15 A.M. in minutes\nwait_time = next_bus_time - missed_bus_time\n\nif wait_time == 45:\n    ans = '45 minutes'\nelif wait_time == 15:\n    ans = '15 minutes'\nelif wait_time == 60:\n    ans = '1 hour'\nelse:\n    ans = '30 minutes'"
        ],
        "results": [
            "15 minutes"
        ],
        "result_counter": {
            "15 minutes": 1
        },
        "prediction": "15 minutes"
    },
    {
        "question": "Some students in a biology class compared how many times they went to the park last week to work on their plant research projects. How many students went to the park fewer than 2 times?",
        "answer": 22.0,
        "generated": [
            "number_of_trips_frequency = {0: 17, 1: 5, 2: 16, 3: 4}\nans = number_of_trips_frequency[0] + number_of_trips_frequency[1]"
        ],
        "results": [
            22.0
        ],
        "result_counter": {
            "22.0": 1
        },
        "prediction": 22.0
    },
    {
        "question": "Some teachers compared how many years they have been teaching. What is the mean of the numbers?",
        "answer": 9.0,
        "generated": [
            "years_of_teaching = [9, 11, 11, 10, 9, 9, 2, 11]\nans = sum(years_of_teaching) / len(years_of_teaching)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "A juice shop tracked how many smoothies it sold in the past 4 days. On which day did the shop sell the most smoothies?",
        "answer": "Sunday",
        "generated": [
            "smoothies_sold = {'Sunday': 69, 'Monday': 64, 'Tuesday': 61, 'Wednesday': 65}\nmax_value = max(smoothies_sold.values())\nfor key, value in smoothies_sold.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Sunday"
        ],
        "result_counter": {
            "Sunday": 1
        },
        "prediction": "Sunday"
    },
    {
        "question": "Principal Crawford reported the state test scores from some students at her school. How many students scored exactly 48 points?",
        "answer": 0.0,
        "generated": [
            "stem_leaf = {\n    2: [4, 8],\n    3: [],\n    4: [3],\n    5: [1, 2],\n    6: [],\n    7: [0],\n    8: [4, 8, 8],\n    9: [0]\n}\n\nans = stem_leaf[4].count(8)"
        ],
        "results": [
            0.0
        ],
        "result_counter": {
            "0.0": 1
        },
        "prediction": 0.0
    },
    {
        "question": "A school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2019 and 2020?",
        "answer": -2.0,
        "generated": [
            "students_2019 = 25\nstudents_2020 = 23\nans = students_2020 - students_2019"
        ],
        "results": [
            -2.0
        ],
        "result_counter": {
            "-2.0": 1
        },
        "prediction": -2.0
    },
    {
        "question": "Look at Isabel's pay stub. Isabel lives in a state that has state income tax. How much did Isabel make after taxes?",
        "answer": 1522.81,
        "generated": [
            "total_earnings = 2100\nfederal_income_tax = 295\nstate_income_tax = 121.59\nother_taxes = 160.60\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\nans = total_earnings - total_taxes"
        ],
        "results": [
            1522.81
        ],
        "result_counter": {
            "1522.81": 1
        },
        "prediction": 1522.81
    },
    {
        "question": "Look at the following schedule. Which event ends at 1.35 P.M.?",
        "answer": "dance competition",
        "generated": [
            "event_end_times = {'softball game': '11:00 A.M.', 'pie-eating contest': '12:10 P.M.', 'soccer game': '12:55 P.M.', 'dance competition': '1:35 P.M.', 'swimming competition': '2:05 P.M.', 'obstacle course': '2:45 P.M.', 'lunch': '3:15 P.M.'}\nfor event, end_time in event_end_times.items():\n    if end_time == '1:35 P.M.':\n        ans = event"
        ],
        "results": [
            "dance competition"
        ],
        "result_counter": {
            "dance competition": 1
        },
        "prediction": "dance competition"
    },
    {
        "question": "Pedro has $1.00. Does he have enough to buy a tiny gold bead and a brown cat's eye bead?",
        "answer": "no",
        "generated": [
            "gold_bead_price = 0.15\nbrown_cats_eye_bead_price = 0.95\ntotal_money = 1.00\nif total_money >= gold_bead_price + brown_cats_eye_bead_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Look at the following schedule. Sharon got on the bus at downtown at 11.45 A.M. What time will she get to the art museum?",
        "answer": "1:30 P.M.",
        "generated": [
            "schedule = {\n    'skyscraper': ['9:30 A.M.', '10:15 A.M.', '10:45 A.M.'],\n    'downtown': ['10:30 A.M.', '11:15 A.M.', '11:45 A.M.'],\n    'city_hall': ['11:15 A.M.', '12:00 P.M.', '12:30 P.M.'],\n    'art_museum': ['12:15 P.M.', '1:00 P.M.', '1:30 P.M.'],\n    'the_zoo': ['1:15 P.M.', '2:00 P.M.', '2:30 P.M.']\n}\n\nsharon_start_location = 'downtown'\nsharon_start_time = '11:45 A.M.'\ndestination = 'art_museum'\n\n# Find the index of the start time in the start location's schedule\nstart_time_index = schedule[sharon_start_location].index(sharon_start_time)\n\n# Use the same index to find the arrival time at the destination\nans = schedule[destination][start_time_index]"
        ],
        "results": [
            "1:30 P.M."
        ],
        "result_counter": {
            "1:30 P.M.": 1
        },
        "prediction": "1:30 P.M."
    },
    {
        "question": "Ronald kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Friday and Saturday?",
        "answer": 1.0,
        "generated": [
            "friday_minutes = 40\nsaturday_minutes = 41\nans = saturday_minutes - friday_minutes"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "Each pond has 5 frogs. How many frogs are in 4 ponds?",
        "answer": 20.0,
        "generated": [
            "frogs_per_pond = 5\nponds = 4\nans = frogs_per_pond * ponds"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "Maya went to the store. She bought 2 pounds of oyster mushrooms and 3 pounds of chanterelle mushrooms. How much did she spend?",
        "answer": 84.0,
        "generated": [
            "oyster_mushroom_price = 18\nchanterelle_mushroom_price = 16\noyster_mushroom_quantity = 2\nchanterelle_mushroom_quantity = 3\ntotal_cost = (oyster_mushroom_price * oyster_mushroom_quantity) + (chanterelle_mushroom_price * chanterelle_mushroom_quantity)\nans = total_cost"
        ],
        "results": [
            84.0
        ],
        "result_counter": {
            "84.0": 1
        },
        "prediction": 84.0
    },
    {
        "question": "Fans of the Weston baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2013 and 2014?",
        "answer": 2.0,
        "generated": [
            "games_won_2013 = 38\ngames_won_2014 = 40\nans = games_won_2014 - games_won_2013"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "What is the total cost for 3 kilograms of cheddar popcorn?",
        "answer": 4.89,
        "generated": [
            "cheddar_popcorn_price_per_kg = 1.63\ntotal_cost = cheddar_popcorn_price_per_kg * 3\nans = total_cost"
        ],
        "results": [
            4.89
        ],
        "result_counter": {
            "4.89": 1
        },
        "prediction": 4.89
    },
    {
        "question": "The librarian at the public library counted the number of books on each shelf. What is the largest number of books?",
        "answer": 76.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbooks_number_list = [22, 30, 31, 33, 33, 35, 36, 38, 38, 44, 54, 57, 57, 66, 76, 76]\nans = max(books_number_list)"
        ],
        "results": [
            76.0
        ],
        "result_counter": {
            "76.0": 1
        },
        "prediction": 76.0
    },
    {
        "question": "Every year Greenwood has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2017 and 2018?",
        "answer": 3.0,
        "generated": [
            "winning_time_2017 = 23\nwinning_time_2018 = 26\nans = winning_time_2018 - winning_time_2017"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Kendra kept track of the number of games her soccer team won each year. According to the table, what was the rate of change between 2010 and 2011?",
        "answer": -7.0,
        "generated": [
            "games_won_2010 = 18\ngames_won_2011 = 11\nans = games_won_2011 - games_won_2010"
        ],
        "results": [
            -7.0
        ],
        "result_counter": {
            "-7.0": 1
        },
        "prediction": -7.0
    },
    {
        "question": "Each vase has 5 poppies. How many poppies are in 3 vases?",
        "answer": 15.0,
        "generated": [
            "poppies_per_vase = 5\nnumber_of_vases = 3\nans = poppies_per_vase * number_of_vases"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "Carla looked at the dates of the digital photos on her computer to find out how many she had taken in the past 5 days. What is the range of the numbers?",
        "answer": 9.0,
        "generated": [
            "number_of_photos = [1, 10, 10, 8, 7]\nans = max(number_of_photos) - min(number_of_photos)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "A wilderness retail store asked a consulting company to do an analysis of their hiking shoe customers. The consulting company gathered data from each customer that purchased hiking shoes, and recorded the shoe brand and the customer's level of happiness. What is the probability that a randomly selected customer purchased a Footlong shoe and is pleased? Simplify any fractions.",
        "answer": "7/18",
        "generated": [
            "total_customers = (3 + 7) + (2 + 6)\nfootlong_pleased = 7\nans = footlong_pleased / total_customers"
        ],
        "results": [
            0.3888888888888889
        ],
        "result_counter": {
            "0.3888888888888889": 1
        },
        "prediction": 0.3888888888888889
    },
    {
        "question": "Some dealerships compared their vehicle sales. In all, how many vehicles did Ben's Used Cars and Affordable Cars sell?",
        "answer": 1471.0,
        "generated": [
            "bens_used_cars = 856\naffordable_cars = 615\nans = bens_used_cars + affordable_cars"
        ],
        "results": [
            1471.0
        ],
        "result_counter": {
            "1471.0": 1
        },
        "prediction": 1471.0
    },
    {
        "question": "Some truck drivers wrote down how far they each drove in the past month. How many more miles did Evelyn drive than Zoe?",
        "answer": 1539.0,
        "generated": [
            "evelyn_miles = 6746\nzoe_miles = 5207\nans = evelyn_miles - zoe_miles"
        ],
        "results": [
            1539.0
        ],
        "result_counter": {
            "1539.0": 1
        },
        "prediction": 1539.0
    },
    {
        "question": "A Technical Assistance Manager monitored his customers' wait times. How many people waited for less than 60 minutes?",
        "answer": 7.0,
        "generated": [
            "wait_times = [3, 5, 19, 24, 26, 49, 56, 61, 65, 65, 68, 72, 75, 75, 75, 77, 86]\nans = sum(1 for time in wait_times if time < 60)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "A newspaper researched how many grocery stores there are in each town. What is the mean of the numbers?",
        "answer": 5.0,
        "generated": [
            "number_of_stores = [4, 4, 3, 6, 6, 6, 2, 9]\nans = sum(number_of_stores) / len(number_of_stores)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "no",
        "generated": [
            "x_values = [18, 7, 7, 7]\ny_values = [2, 15, 16, 19]\n\nx_y_pairs = list(zip(x_values, y_values))\nunique_x_values = set(x_values)\n\nis_function = True\nfor x in unique_x_values:\n    y_values_for_x = [y for x_pair, y in x_y_pairs if x_pair == x]\n    if len(set(y_values_for_x)) > 1:\n        is_function = False\n        break\n\nif is_function:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "Look at the following schedule. Tyrone just missed the 3.45 A.M. train at Skyscraper City. What time is the next train?",
        "answer": "11:30 A.M.",
        "generated": [
            "train_times_skyscraper_city = ['3:45 A.M.', '11:30 A.M.', '1:15 A.M.']\nmissed_train_time = '3:45 A.M.'\ntrain_times_skyscraper_city_sorted = sorted(train_times_skyscraper_city, key=lambda x: (int(x.split()[0]), x.split()[1]))\n\nnext_train_index = train_times_skyscraper_city_sorted.index(missed_train_time) + 1\nif next_train_index == len(train_times_skyscraper_city_sorted):\n    next_train_index = 0\n\nans = train_times_skyscraper_city_sorted[next_train_index]"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "Professor Wiley informed his students of their scores on the midterm exam. How many students scored at least 20 points but fewer than 90 points?",
        "answer": 18.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nmidterm_scores = [22, 24, 32, 39, 41, 47, 53, 54, 56, 57, 60, 61, 62, 67, 70, 81, 84, 89]\nans = len(midterm_scores)"
        ],
        "results": [
            18.0
        ],
        "result_counter": {
            "18.0": 1
        },
        "prediction": 18.0
    },
    {
        "question": "A pair of Union High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2009 and 2010?",
        "answer": 0.0,
        "generated": [
            "games_won_2009 = 20\ngames_won_2010 = 20\nans = games_won_2010 - games_won_2009"
        ],
        "results": [
            0.0
        ],
        "result_counter": {
            "0.0": 1
        },
        "prediction": 0.0
    },
    {
        "question": "Emmett has $172.00. Does he have enough to buy a silver coat rack and a crystal sculpture?",
        "answer": "no",
        "generated": [
            "coat_rack_price = 88.00\ncrystal_sculpture_price = 85.00\ntotal_money = 172.00\nif total_money >= coat_rack_price + crystal_sculpture_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "The city recorded how many fire hydrants there are on each street. What is the median of the numbers?",
        "answer": 5.0,
        "generated": [
            "hydrants = [6, 5, 4, 4, 6, 5, 7]\nhydrants = sorted(hydrants)\nmiddle1 = (len(hydrants) - 1) // 2\nmiddle2 = len(hydrants) // 2\nans = (hydrants[middle1] + hydrants[middle2]) / 2"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "If Joel buys 5 pounds of large binder clips and 2 pounds of standard paper clips, how much will he spend?",
        "answer": 35.33,
        "generated": [
            "large_binder_clips_price = 5.31\nstandard_paper_clips_price = 4.39\nlarge_binder_clips_weight = 5\nstandard_paper_clips_weight = 2\ntotal_cost = (large_binder_clips_price * large_binder_clips_weight) + (standard_paper_clips_price * standard_paper_clips_weight)\nans = total_cost"
        ],
        "results": [
            35.33
        ],
        "result_counter": {
            "35.33": 1
        },
        "prediction": 35.33
    },
    {
        "question": "Lena is looking at the price of new cell phones online. Her favorite company, OrangeTech, has a special this weekend. Lena can add an upgrade to a phone for an additional cost, or she can buy a used phone to get a discount. The change in price for each option is shown in the table. Which option results in a greater change in price?",
        "answer": "buying a used phone",
        "generated": [
            "upgrade_price = 60\nused_phone_discount = -75\nif abs(upgrade_price) > abs(used_phone_discount):\n    ans = \"adding an upgrade\"\nelse:\n    ans = \"buying a used phone\""
        ],
        "results": [
            "buying a used phone"
        ],
        "result_counter": {
            "buying a used phone": 1
        },
        "prediction": "buying a used phone"
    },
    {
        "question": "Dr. Brennan, a zoo director, researched ticket prices at other zoos around the country. How much does a child ticket to the Southern Nevada Zoo cost?",
        "answer": 6.0,
        "generated": [
            "child_ticket_cost_southern_nevada = 6\nans = child_ticket_cost_southern_nevada"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Gwen bought 4 pounds of sawdust and 2 pounds of bark. How much did she spend?",
        "answer": 26.0,
        "generated": [
            "sawdust_price = 4\nbark_price = 5\nsawdust_weight = 4\nbark_weight = 2\ntotal_cost = (sawdust_price * sawdust_weight) + (bark_price * bark_weight)\nans = total_cost"
        ],
        "results": [
            26.0
        ],
        "result_counter": {
            "26.0": 1
        },
        "prediction": 26.0
    },
    {
        "question": "How much money does Evelyn need to buy a piece of rose quartz and a piece of copper?",
        "answer": 0.15,
        "generated": [
            "rose_quartz_price = 0.06\ncopper_price = 0.09\nans = rose_quartz_price + copper_price"
        ],
        "results": [
            0.15
        ],
        "result_counter": {
            "0.15": 1
        },
        "prediction": 0.15
    },
    {
        "question": "Look at the following schedule. Which event ends at 2.45 P.M.?",
        "answer": "men's pommel horse event",
        "generated": [
            "event_end_times = {\n    \"men's vault event\": \"11:20 A.M.\",\n    \"men's parallel bars event\": \"12:55 P.M.\",\n    \"men's pommel horse event\": \"2:45 P.M.\",\n    \"women's vault event\": \"2:10 P.M.\"\n}\n\nfor event, end_time in event_end_times.items():\n    if end_time == \"2:45 P.M.\":\n        ans = event"
        ],
        "results": [
            "men's pommel horse event"
        ],
        "result_counter": {
            "men's pommel horse event": 1
        },
        "prediction": "men's pommel horse event"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $530, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_530 = 8700\nquantity_supplied_price_530 = 10600\nif quantity_demanded_price_530 > quantity_supplied_price_530:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "How much money does Jessica need to buy a purple T-shirt and an orange T-shirt?",
        "answer": 10.0,
        "generated": [
            "purple_tshirt_price = 8\norange_tshirt_price = 2\nans = purple_tshirt_price + orange_tshirt_price"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "Franco recalled how many minutes he had spent at theater rehearsal in the past 5 days. What is the mean of the numbers?",
        "answer": 69.0,
        "generated": [
            "minutes_spent_rehearsing = [68, 66, 67, 67, 77]\nans = sum(minutes_spent_rehearsing) / len(minutes_spent_rehearsing)"
        ],
        "results": [
            69.0
        ],
        "result_counter": {
            "69.0": 1
        },
        "prediction": 69.0
    },
    {
        "question": "A radio station paid attention to how many listeners it had each month. How many more listeners did the radio station have in July than in June?",
        "answer": 4727.0,
        "generated": [
            "listeners_july = 7560\nlisteners_june = 2833\nans = listeners_july - listeners_june"
        ],
        "results": [
            4727.0
        ],
        "result_counter": {
            "4727.0": 1
        },
        "prediction": 4727.0
    },
    {
        "question": "How much money does Owen need to buy a jersey signed by a famous hockey player and a photograph signed by a famous movie star?",
        "answer": 89.0,
        "generated": [
            "jersey_price = 65\nphoto_price = 24\nans = jersey_price + photo_price"
        ],
        "results": [
            89.0
        ],
        "result_counter": {
            "89.0": 1
        },
        "prediction": 89.0
    },
    {
        "question": "Each sheet has 2 stamps. How many stamps are on 5 sheets?",
        "answer": 10.0,
        "generated": [
            "stamps_per_sheet = 2\nsheets = 5\nans = stamps_per_sheet * sheets"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "A hardware store monitored how many hammers it sold in the past 6 days. What is the mean of the numbers?",
        "answer": 5.0,
        "generated": [
            "hammers_sold = [6, 2, 10, 2, 7, 3]\nans = sum(hammers_sold) / len(hammers_sold)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "Michael buys 1.2 pounds of navel oranges. What is the total cost?",
        "answer": 6.0,
        "generated": [
            "navel_oranges_price_per_pound = 5\nnavel_oranges_weight = 1.2\ntotal_cost = navel_oranges_price_per_pound * navel_oranges_weight\nans = total_cost"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "A beauty salon in Oxford has four beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Mackenzie? Simplify your answer.",
        "answer": "41/240",
        "generated": [
            "beautician_requests = {'Tara': 130, 'Cody': 980, 'Mackenzie': 410, 'Layla': 880}\ntotal_requests = sum(beautician_requests.values())\nmackenzie_requests = beautician_requests['Mackenzie']\nans = mackenzie_requests / total_requests"
        ],
        "results": [
            0.17083333333333334
        ],
        "result_counter": {
            "0.17083333333333334": 1
        },
        "prediction": 0.17083333333333334
    },
    {
        "question": "How much money does Chandler need to buy an antique rosewood corner cabinet, an antique elm coffee table, and an antique pine chest of drawers?",
        "answer": 7985.0,
        "generated": [
            "rosewood_corner_cabinet = 4927.00\nelm_coffee_table = 1884.00\npine_chest_of_drawers = 1174.00\ntotal_cost = rosewood_corner_cabinet + elm_coffee_table + pine_chest_of_drawers\nans = total_cost"
        ],
        "results": [
            7985.0
        ],
        "result_counter": {
            "7985.0": 1
        },
        "prediction": 7985.0
    },
    {
        "question": "Bobby has $38.70. How much money will Bobby have left if he buys a cookbook and a history book?",
        "answer": 15.08,
        "generated": [
            "cookbook_price = 10.22\nhistory_book_price = 13.40\ntotal_money = 38.70\nmoney_left = total_money - (cookbook_price + history_book_price)\nans = money_left"
        ],
        "results": [
            15.080000000000002
        ],
        "result_counter": {
            "15.080000000000002": 1
        },
        "prediction": 15.080000000000002
    },
    {
        "question": "Abigail, an employee at Harmon's Convenience Store, looked at the sales of each of its soda products. On Sunday, how much more did the convenience store make from Fizzy Fun sales than from Kickin' Coffee sales?",
        "answer": 6.0,
        "generated": [
            "kickin_coffee_sunday = 3\nfizzy_fun_sunday = 9\nans = fizzy_fun_sunday - kickin_coffee_sunday"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Some friends compared the sizes of their sticker collections. Who has the fewest stickers?",
        "answer": "Robert",
        "generated": [
            "sticker_dict = {'Tina': 778, 'Emma': 796, 'Robert': 767, 'Jamie': 769}\nmin_value = min(sticker_dict.values())\nfor key, value in sticker_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Robert"
        ],
        "result_counter": {
            "Robert": 1
        },
        "prediction": "Robert"
    },
    {
        "question": "Look at the following schedule. When does the dance performance begin?",
        "answer": "10:15 A.M.",
        "generated": [
            "event_schedule = {\n    'dance performance': ('10:15 A.M.', '12:45 P.M.'),\n    'choir concert': ('12:55 P.M.', '2:40 P.M.'),\n    'drumming performance': ('2:50 P.M.', '3:50 P.M.'),\n    'award ceremony': ('3:10 P.M.', '4:30 P.M.'),\n    'keynote speech': ('4:20 P.M.', '6:00 P.M.')\n}\n\nans = event_schedule['dance performance'][0]"
        ],
        "results": [
            "10:15 A.M."
        ],
        "result_counter": {
            "10:15 A.M.": 1
        },
        "prediction": "10:15 A.M."
    },
    {
        "question": "Florence has $12,625. How much money will Florence have left if she buys an Andalusian horse and an Appaloosa horse?",
        "answer": 2543.0,
        "generated": [
            "andalusian_horse_price = 7880\nappaloosa_horse_price = 2202\ntotal_money = 12625\nmoney_left = total_money - (andalusian_horse_price + appaloosa_horse_price)\nans = money_left"
        ],
        "results": [
            2543.0
        ],
        "result_counter": {
            "2543.0": 1
        },
        "prediction": 2543.0
    },
    {
        "question": "Some friends played miniature golf and wrote down their scores. What is the median of the numbers?",
        "answer": 32.0,
        "generated": [
            "scores = [29, 30, 26, 32, 34, 33, 35]\nscores = sorted(scores)\nmiddle1 = (len(scores) - 1) // 2\nmiddle2 = len(scores) // 2\nans = (scores[middle1] + scores[middle2]) / 2"
        ],
        "results": [
            32.0
        ],
        "result_counter": {
            "32.0": 1
        },
        "prediction": 32.0
    },
    {
        "question": "Annie figured out the scores at the end of a card game. How many people scored more than 5?",
        "answer": 27.0,
        "generated": [
            "scores_frequency = {4: 3, 5: 1, 6: 10, 7: 0, 8: 8, 9: 2, 10: 7}\nans = sum([frequency for score, frequency in scores_frequency.items() if score > 5])"
        ],
        "results": [
            27.0
        ],
        "result_counter": {
            "27.0": 1
        },
        "prediction": 27.0
    },
    {
        "question": "A customer at a sushi restaurant was examining the types of sushi rolls offered on the menu. Rolls vary by type of fish and level of spiciness. Rolls only contain one type of fish. What is the probability that a randomly selected sushi roll is labeled a little spicy and contains salmon? Simplify any fractions.",
        "answer": "5/19",
        "generated": [
            "total_rolls = 5 + 3 + 6 + 5\nsalmon_little_spicy = 5\nans = salmon_little_spicy / total_rolls"
        ],
        "results": [
            0.2631578947368421
        ],
        "result_counter": {
            "0.2631578947368421": 1
        },
        "prediction": 0.2631578947368421
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [11, 12, 13]\ny_values = [16, 9, 1]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "Emilia has $40.50. Does she have enough to buy a pair of brown pants and a red sweater?",
        "answer": "yes",
        "generated": [
            "brown_pants_price = 13.56\nred_sweater_price = 26.64\ntotal_money = 40.5\nif total_money > brown_pants_price + red_sweater_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "How much more does an emerald pendant cost than a ruby bracelet?",
        "answer": 1680.0,
        "generated": [
            "emerald_pendant_cost = 2858\nruby_bracelet_cost = 1178\nans = emerald_pendant_cost - ruby_bracelet_cost"
        ],
        "results": [
            1680.0
        ],
        "result_counter": {
            "1680.0": 1
        },
        "prediction": 1680.0
    },
    {
        "question": "Valeria has $52.00. Does she have enough to buy a teapot and a cookbook?",
        "answer": "yes",
        "generated": [
            "teapot_price = 38.09\ncookbook_price = 13.24\ntotal_money = 52.00\nif total_money > teapot_price + cookbook_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $1,280, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_1280 = 7600\nquantity_supplied_price_1280 = 10100\nif quantity_demanded_price_1280 > quantity_supplied_price_1280:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "A vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Thursday and Friday?",
        "answer": -32.0,
        "generated": [
            "loaves_thursday = 38\nloaves_friday = 6\nans = loaves_friday - loaves_thursday"
        ],
        "results": [
            -32.0
        ],
        "result_counter": {
            "-32.0": 1
        },
        "prediction": -32.0
    },
    {
        "question": "To get credit for meeting his school's community service requirement, Kendrick kept a volunteering log. What is the mean of the numbers?",
        "answer": 6.0,
        "generated": [
            "hours_volunteered = [10, 3, 5, 4, 10, 5, 5]\nans = sum(hours_volunteered) / len(hours_volunteered)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Johnny, a park ranger, recorded the number of each type of tree in the Boone County Park District. How many more trees are there in Walt Park than Glen Park?",
        "answer": 11.0,
        "generated": [
            "trees_in_walt_park = 20 + 7\ntrees_in_glen_park = 14 + 2\nans = trees_in_walt_park - trees_in_glen_park"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "How much money does Jacob need to buy a gold tack and a red thumbtack?",
        "answer": 0.1,
        "generated": [
            "gold_tack_price = 0.01\nred_thumbtack_price = 0.09\nans = gold_tack_price + red_thumbtack_price"
        ],
        "results": [
            0.09999999999999999
        ],
        "result_counter": {
            "0.09999999999999999": 1
        },
        "prediction": 0.09999999999999999
    },
    {
        "question": "How much money does Maggie need to buy 9 red thumbtacks?",
        "answer": 1.35,
        "generated": [
            "red_thumbtack_price = 0.15\nquantity = 9\nans = red_thumbtack_price * quantity"
        ],
        "results": [
            1.3499999999999999
        ],
        "result_counter": {
            "1.3499999999999999": 1
        },
        "prediction": 1.3499999999999999
    },
    {
        "question": "Rose has $6. Does she have enough to buy a wrench and a bucket?",
        "answer": "no",
        "generated": [
            "wrench_price = 5\nbucket_price = 3\ntotal_money = 6\nif total_money >= wrench_price + bucket_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Jim, a doctor's office receptionist, tracked the average waiting time at the office each month. According to the table, what was the rate of change between June and July?",
        "answer": 8.0,
        "generated": [
            "waiting_time_june = 22\nwaiting_time_july = 30\nans = waiting_time_july - waiting_time_june"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Use the data to answer the question below. Is the following statement about our solar system true or false? Earth is the largest planet that is made mainly of rock.",
        "answer": "true",
        "generated": [
            "planet_volume = {\n    'Mercury': 6.08 * (10 ** 10),\n    'Venus': 9.28 * (10 ** 11),\n    'Earth': 1.08 * (10 ** 12),\n    'Mars': 1.63 * (10 ** 11),\n    'Jupiter': 1.43 * (10 ** 15),\n    'Saturn': 8.27 * (10 ** 14),\n    'Uranus': 6.83 * (10 ** 13),\n    'Neptune': 6.25 * (10 ** 13)\n}\n\nprimary_composition = {\n    'Mercury': 'rock',\n    'Venus': 'rock',\n    'Earth': 'rock',\n    'Mars': 'rock',\n    'Jupiter': 'gas',\n    'Saturn': 'gas',\n    'Uranus': 'ice',\n    'Neptune': 'ice'\n}\n\nrock_planets = {planet: volume for planet, volume in planet_volume.items() if primary_composition[planet] == 'rock'}\nlargest_rock_planet = max(rock_planets, key=rock_planets.get)\n\nif largest_rock_planet == 'Earth':\n    ans = 'true'\nelse:\n    ans = 'false'"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "How much more does a book about South America cost than a book about hiking?",
        "answer": 1.59,
        "generated": [
            "south_america_book = 3.43\nhiking_book = 1.84\nans = south_america_book - hiking_book"
        ],
        "results": [
            1.59
        ],
        "result_counter": {
            "1.59": 1
        },
        "prediction": 1.59
    },
    {
        "question": "A Technical Assistance Manager monitored his customers' wait times. How many people waited for at least 45 minutes but less than 50 minutes?",
        "answer": 3.0,
        "generated": [
            "wait_times = [24, 24, 28, 29, 29, 30, 31, 32, 33, 33, 33, 34, 36, 36, 36, 40, 44, 45, 46, 49, 50, 51, 53, 54, 58]\ncount = 0\nfor time in wait_times:\n    if 45 <= time < 50:\n        count += 1\nans = count"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Martina is shopping for a new bicycle. She is most interested in color and type of tires. What is the probability that a randomly selected bike is red and has mountain bike tires? Simplify any fractions.",
        "answer": "7/19",
        "generated": [
            "total_bikes = 4 + 7 + 5 + 3\nred_mountain_bikes = 7\nans = red_mountain_bikes / total_bikes"
        ],
        "results": [
            0.3684210526315789
        ],
        "result_counter": {
            "0.3684210526315789": 1
        },
        "prediction": 0.3684210526315789
    },
    {
        "question": "How much more does a crossword puzzle book cost than a spelling workbook?",
        "answer": 3.0,
        "generated": [
            "crossword_puzzle_book_cost = 23.00\nspelling_workbook_cost = 20.00\nans = crossword_puzzle_book_cost - spelling_workbook_cost"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "A newspaper researched how many grocery stores there are in each town. What is the median of the numbers?",
        "answer": 4.0,
        "generated": [
            "number_of_stores = [2, 5, 3, 4, 4, 5, 3]\nnumber_of_stores = sorted(number_of_stores)\nmiddle1 = (len(number_of_stores) - 1) // 2\nmiddle2 = len(number_of_stores) // 2\nans = (number_of_stores[middle1] + number_of_stores[middle2]) / 2"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A reporter looked through her notebook to remember how many people she had interviewed in the past 7 days. What is the range of the numbers?",
        "answer": 4.0,
        "generated": [
            "number_of_people_interviewed = [5, 7, 5, 9, 8, 9, 9]\nans = max(number_of_people_interviewed) - min(number_of_people_interviewed)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "Audrey purchased 2 kilograms of garbanzo beans. What was the total cost?",
        "answer": 2.0,
        "generated": [
            "garbanzo_beans_price = 1.00\nquantity = 2\nans = garbanzo_beans_price * quantity"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "Look at the following schedule. Which activity ends at 12.05 P.M.?",
        "answer": "fitness class",
        "generated": [
            "activity_end_times = {'gymnastics': '8:20 A.M.', 'line dancing': '9:30 A.M.', 'yoga': '10:50 A.M.', 'fitness class': '12:05 P.M.', 'floor hockey': '1:10 P.M.', 'badminton': '2:35 P.M.', 'indoor soccer': '4:00 P.M.'}\nfor activity, end_time in activity_end_times.items():\n    if end_time == '12:05 P.M.':\n        ans = activity"
        ],
        "results": [
            "fitness class"
        ],
        "result_counter": {
            "fitness class": 1
        },
        "prediction": "fitness class"
    },
    {
        "question": "Deb has $1.66. Does she have enough to buy a pickle and an ice cream cone?",
        "answer": "yes",
        "generated": [
            "pickle_price = 0.67\nice_cream_cone_price = 0.95\ntotal_money = 1.66\nif total_money > pickle_price + ice_cream_cone_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Each apartment has 10 doors. How many doors are in 3 apartments?",
        "answer": 30.0,
        "generated": [
            "doors_per_apartment = 10\nnumber_of_apartments = 3\nans = doors_per_apartment * number_of_apartments"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "The players on a quiz show received the following scores. Who had the lowest score?",
        "answer": "Colette",
        "generated": [
            "quiz_show_scores = {'Colette': 81, 'Vijay': 89, 'Keenan': 88, 'Stefan': 82}\nmin_score = min(quiz_show_scores.values())\nfor name, score in quiz_show_scores.items():\n    if score == min_score:\n        ans = name"
        ],
        "results": [
            "Colette"
        ],
        "result_counter": {
            "Colette": 1
        },
        "prediction": "Colette"
    },
    {
        "question": "Fans of the Westminster baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2016 and 2017?",
        "answer": 9.0,
        "generated": [
            "games_won_2016 = 33\ngames_won_2017 = 42\nans = games_won_2017 - games_won_2016"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Maddie wrote down how many pages she read over the past 4 days. On which day did Maddie read the fewest pages?",
        "answer": "Friday",
        "generated": [
            "pages_dict = {'Friday': 118, 'Saturday': 138, 'Sunday': 131, 'Monday': 189}\nmin_value = min(pages_dict.values())\nfor key, value in pages_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Friday"
        ],
        "result_counter": {
            "Friday": 1
        },
        "prediction": "Friday"
    },
    {
        "question": "How much money does Nolan need to buy a piece of green slate and a piece of copper?",
        "answer": 0.14,
        "generated": [
            "green_slate_price = 0.09\ncopper_price = 0.05\nans = green_slate_price + copper_price"
        ],
        "results": [
            0.14
        ],
        "result_counter": {
            "0.14": 1
        },
        "prediction": 0.14
    },
    {
        "question": "For an economics project, Kate determined the cost of ferry rides for bicycles and cars. Of the ferries shown, which charges the least for a bicycle?",
        "answer": "Southport-Fort Fisher",
        "generated": [
            "ferry_fares = {'Seattle-Bremerton': 8, 'Southport-Fort Fisher': 2, 'Fauntleroy-Vashon': 5, 'Mukilteo-Clinton': 5, 'Ocracoke': 3}\nmin_fare = min(ferry_fares.values())\nfor ferry, fare in ferry_fares.items():\n    if fare == min_fare:\n        ans = ferry"
        ],
        "results": [
            "Southport-Fort Fisher"
        ],
        "result_counter": {
            "Southport-Fort Fisher": 1
        },
        "prediction": "Southport-Fort Fisher"
    },
    {
        "question": "Gardeners at the Henderson estate counted the number of flowers growing there. How many orange flowers are in the garden?",
        "answer": 6.0,
        "generated": [
            "orange_roses = 3\norange_daisies = 3\nans = orange_roses + orange_daisies"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between June and July?",
        "answer": -7.0,
        "generated": [
            "waiting_time_june = 36\nwaiting_time_july = 29\nans = waiting_time_july - waiting_time_june"
        ],
        "results": [
            -7.0
        ],
        "result_counter": {
            "-7.0": 1
        },
        "prediction": -7.0
    },
    {
        "question": "Each bunch has 5 balloons. How many balloons are in 5 bunches?",
        "answer": 25.0,
        "generated": [
            "number_of_bunches = 5\nballoons_per_bunch = 5\nans = number_of_bunches * balloons_per_bunch"
        ],
        "results": [
            25.0
        ],
        "result_counter": {
            "25.0": 1
        },
        "prediction": 25.0
    },
    {
        "question": "How much money does Jake need to buy eggplant parmesan and a grilled steak?",
        "answer": 32.5,
        "generated": [
            "eggplant_parmesan_price = 16.73\ngrilled_steak_price = 15.77\nans = eggplant_parmesan_price + grilled_steak_price"
        ],
        "results": [
            32.5
        ],
        "result_counter": {
            "32.5": 1
        },
        "prediction": 32.5
    },
    {
        "question": "The train conductor made sure to count the number of passengers on each train. How many trains had at least 50 passengers but fewer than 90 passengers?",
        "answer": 10.0,
        "generated": [
            "number_list = [16, 17, 25, 41, 44, 50, 54, 59, 64, 67, 67, 77, 78, 88, 88]\ntrains_50_to_89 = [num for num in number_list if 50 <= num < 90]\nans = len(trains_50_to_89)"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "The architecture student counted the number of bricks in each building in her neighborhood. How many buildings have at least 13 bricks but fewer than 72 bricks?",
        "answer": 4.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbricks_per_building_list = [10, 18, 45, 61, 66, 87]\nans = sum(13 <= bricks < 72 for bricks in bricks_per_building_list)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "Eve likes watching the show Engineering Marvels. In last night's episode, the engineering team visited a tall skyscraper and a deep mine. A banner at the bottom of the screen showed the elevation of each location the team visited. Which location is closer to sea level?",
        "answer": "bottom of the mine",
        "generated": [
            "elevation_skyscraper = 275\nelevation_mine = -260\nif abs(elevation_skyscraper) < abs(elevation_mine):\n    ans = 'top of the skyscraper'\nelse:\n    ans = 'bottom of the mine'"
        ],
        "results": [
            "bottom of the mine"
        ],
        "result_counter": {
            "bottom of the mine": 1
        },
        "prediction": "bottom of the mine"
    },
    {
        "question": "The Rockport Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding fewer than 2 times?",
        "answer": 18.0,
        "generated": [
            "number_of_times_sledding = [13, 5, 18, 4]\nans = number_of_times_sledding[0] + number_of_times_sledding[1]"
        ],
        "results": [
            18.0
        ],
        "result_counter": {
            "18.0": 1
        },
        "prediction": 18.0
    },
    {
        "question": "A farmer wrote down how many kilograms of cherries were sold in the past 5 days. What is the mode of the numbers?",
        "answer": 8.0,
        "generated": [
            "from collections import Counter\n\ncherries_sold = [8, 10, 8, 10, 8]\ncounter = Counter(cherries_sold)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "How much more does a Caribbean vacation package cost than a Jamaican vacation package?",
        "answer": 2597.0,
        "generated": [
            "caribbean_vacation_cost = 6657\njamaican_vacation_cost = 4060\nans = caribbean_vacation_cost - jamaican_vacation_cost"
        ],
        "results": [
            2597.0
        ],
        "result_counter": {
            "2597.0": 1
        },
        "prediction": 2597.0
    },
    {
        "question": "How much money does Jenna need to buy a lamp and a crystal vase?",
        "answer": 166.14,
        "generated": [
            "lamp_price = 74.21\ncrystal_vase_price = 91.93\nans = lamp_price + crystal_vase_price"
        ],
        "results": [
            166.14
        ],
        "result_counter": {
            "166.14": 1
        },
        "prediction": 166.14
    },
    {
        "question": "Some students compared how many pets they have. What is the mean of the numbers?",
        "answer": 5.0,
        "generated": [
            "number_of_pets = [2, 5, 1, 1, 10, 9, 7]\nans = sum(number_of_pets) / len(number_of_pets)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2013 and 2014?",
        "answer": 6.0,
        "generated": [
            "weight_2013 = 31\nweight_2014 = 37\nrate_of_change = weight_2014 - weight_2013\nans = rate_of_change"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "The school district compared how many math teachers each high school has. What is the mean of the numbers?",
        "answer": 8.0,
        "generated": [
            "number_of_math_teachers = [8, 6, 10, 7, 9, 9, 7]\nans = sum(number_of_math_teachers) / len(number_of_math_teachers)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Quincy's classmates revealed how many science articles they read. What is the mode of the numbers?",
        "answer": 9.0,
        "generated": [
            "from collections import Counter\n\narticles_read = [9, 4, 9, 9, 7, 7, 10, 10]\ncounter = Counter(articles_read)\nmode = counter.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Wendy has $27. Does she have enough to buy a beach blanket and a pillow?",
        "answer": "yes",
        "generated": [
            "beach_blanket_price = 11\npillow_price = 14\ntotal_money = 27\nif total_money >= beach_blanket_price + pillow_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Ruth's Candies has been studying how much chocolate people have been eating in different countries. Which country consumed less chocolate per capita in 2005, Austria or Germany?",
        "answer": "Austria",
        "generated": [
            "chocolate_consumption = {'Norway': {'2002': 8, '2005': 9},\n                         'Denmark': {'2002': 9, '2005': 8},\n                         'Austria': {'2002': 8, '2005': 9},\n                         'Germany': {'2002': 10, '2005': 11}}\n\naustria_2005 = chocolate_consumption['Austria']['2005']\ngermany_2005 = chocolate_consumption['Germany']['2005']\n\nif austria_2005 < germany_2005:\n    ans = 'Austria'\nelse:\n    ans = 'Germany'"
        ],
        "results": [
            "Austria"
        ],
        "result_counter": {
            "Austria": 1
        },
        "prediction": "Austria"
    },
    {
        "question": "Hannah has $179.00. How much money will Hannah have left if she buys a scorpion and a chinchilla?",
        "answer": 55.0,
        "generated": [
            "scorpion_price = 67.00\nchinchilla_price = 57.00\ntotal_money = 179.00\nmoney_left = total_money - (scorpion_price + chinchilla_price)\nans = money_left"
        ],
        "results": [
            55.0
        ],
        "result_counter": {
            "55.0": 1
        },
        "prediction": 55.0
    },
    {
        "question": "A volunteer for the local running club counted the number of participants at each race. How many races had at least 41 participants?",
        "answer": 7.0,
        "generated": [
            "race_participants = [12, 24, 28, 42, 48, 55, 58, 59, 68, 73]\nraces_with_41_or_more = [x for x in race_participants if x >= 41]\nans = len(races_with_41_or_more)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "A volunteer for the local running club counted the number of participants at each race. How many races had at least 50 participants but fewer than 80 participants?",
        "answer": 5.0,
        "generated": [
            "number_list = [11, 12, 24, 31, 35, 37, 48, 54, 57, 58, 63, 76]\ncount = 0\nfor number in number_list:\n    if 50 <= number < 80:\n        count += 1\nans = count"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "A customer at a sushi restaurant was examining the types of sushi rolls offered on the menu. Rolls vary by type of fish and level of spiciness. Rolls only contain one type of fish. What is the probability that a randomly selected sushi roll contains salmon and is labeled not spicy? Simplify any fractions.",
        "answer": "4/11",
        "generated": [
            "total_rolls = 1 + 3 + 4 + 3\nsalmon_not_spicy = 4\nans = salmon_not_spicy / total_rolls"
        ],
        "results": [
            0.36363636363636365
        ],
        "result_counter": {
            "0.36363636363636365": 1
        },
        "prediction": 0.36363636363636365
    },
    {
        "question": "A technical support line tracked how many calls it received each day. How many calls total did the support line receive on Tuesday and Thursday?",
        "answer": 5685.0,
        "generated": [
            "tuesday_calls = 4279\nthursday_calls = 1406\nans = tuesday_calls + thursday_calls"
        ],
        "results": [
            5685.0
        ],
        "result_counter": {
            "5685.0": 1
        },
        "prediction": 5685.0
    },
    {
        "question": "A beauty salon in Richmond has five beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Shelley? Simplify your answer.",
        "answer": "7/41",
        "generated": [
            "beautician_requests = {'Shelley': 560, 'Lexi': 600, 'Elise': 630, 'Kamal': 860, 'Joe': 630}\ntotal_requests = sum(beautician_requests.values())\nshelley_requests = beautician_requests['Shelley']\nans = shelley_requests / total_requests"
        ],
        "results": [
            0.17073170731707318
        ],
        "result_counter": {
            "0.17073170731707318": 1
        },
        "prediction": 0.17073170731707318
    },
    {
        "question": "A furniture store kept a record of how many couches it sold each day. What is the range of the numbers?",
        "answer": 10.0,
        "generated": [
            "couches_sold = [8, 14, 11, 4, 5]\nans = max(couches_sold) - min(couches_sold)"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "Jackson, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did exactly 1 pull-up?",
        "answer": 6.0,
        "generated": [
            "number_of_pullups_frequency = {0: 0, 1: 6, 2: 4, 3: 2}\nans = number_of_pullups_frequency[1]"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Wednesday and Thursday?",
        "answer": -1.0,
        "generated": [
            "wednesday_sales = 32\nthursday_sales = 31\nans = thursday_sales - wednesday_sales"
        ],
        "results": [
            -1.0
        ],
        "result_counter": {
            "-1.0": 1
        },
        "prediction": -1.0
    },
    {
        "question": "Kendra spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Wednesday and Thursday?",
        "answer": 3.0,
        "generated": [
            "shells_wednesday = 3\nshells_thursday = 6\nans = shells_thursday - shells_wednesday"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "In hopes of raising more funds for arts education, some parents in the Salem School District publicized the current per-student arts education budget. According to the table, what was the rate of change between 2008 and 2009?",
        "answer": 8.0,
        "generated": [
            "budget_2008 = 21\nbudget_2009 = 29\nans = budget_2009 - budget_2008"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Gabby owns four dogs and monitors how much food they eat in a month. What fraction of the food was eaten by Pepper? Simplify your answer.",
        "answer": "22/81",
        "generated": [
            "total_food = 50 + 44 + 28 + 40\npepper_food = 44\nans = pepper_food / total_food"
        ],
        "results": [
            0.2716049382716049
        ],
        "result_counter": {
            "0.2716049382716049": 1
        },
        "prediction": 0.2716049382716049
    },
    {
        "question": "Each year the Lancaster School District publishes its annual budget, which includes information on the sports program's per-student spending. According to the table, what was the rate of change between 2016 and 2017?",
        "answer": 5.0,
        "generated": [
            "per_student_budget_2016 = 45\nper_student_budget_2017 = 50\nrate_of_change = per_student_budget_2017 - per_student_budget_2016\nans = rate_of_change"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "A bus driver paid attention to how many passengers his bus had each day. What is the median of the numbers?",
        "answer": 65.0,
        "generated": [
            "number_of_people = [68, 63, 83, 65, 77, 63, 64]\nnumber_of_people = sorted(number_of_people)\nmiddle1 = (len(number_of_people) - 1) // 2\nmiddle2 = len(number_of_people) // 2\nans = (number_of_people[middle1] + number_of_people[middle2]) / 2"
        ],
        "results": [
            65.0
        ],
        "result_counter": {
            "65.0": 1
        },
        "prediction": 65.0
    },
    {
        "question": "How much money does Dan need to buy a grape lollipop and a caramel?",
        "answer": 0.53,
        "generated": [
            "grape_lollipop_price = 0.40\ncaramel_price = 0.13\nans = grape_lollipop_price + caramel_price"
        ],
        "results": [
            0.53
        ],
        "result_counter": {
            "0.53": 1
        },
        "prediction": 0.53
    },
    {
        "question": "A food magazine published a listing of local restaurant ratings. What is the highest rating?",
        "answer": 50.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nratings_list = [12, 16, 17, 21, 23, 28, 29, 35, 38, 40, 40, 42, 44, 45, 47, 47, 49, 50]\nans = max(ratings_list)"
        ],
        "results": [
            50.0
        ],
        "result_counter": {
            "50.0": 1
        },
        "prediction": 50.0
    },
    {
        "question": "How much more does a spool of thread cost than a tube of paste?",
        "answer": 0.2,
        "generated": [
            "thread_cost = 0.74\npaste_cost = 0.54\nans = thread_cost - paste_cost"
        ],
        "results": [
            0.19999999999999996
        ],
        "result_counter": {
            "0.19999999999999996": 1
        },
        "prediction": 0.19999999999999996
    },
    {
        "question": "A toy store employee counted the number of toys in each bin in the sale section. How many bins had exactly 43 toys?",
        "answer": 4.0,
        "generated": [
            "toys_per_bin_list = [43, 43, 43, 43, 47, 48, 52, 52, 52, 54, 56, 62, 64, 66, 66, 72, 73, 80, 80, 82, 84, 85, 85]\nans = toys_per_bin_list.count(43)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "The manager of a party supply store researched how many balloons it sold in the past 4 days. How many balloons in total did the store sell on Monday and Tuesday?",
        "answer": 335.0,
        "generated": [
            "monday_balloons = 193\ntuesday_balloons = 142\nans = monday_balloons + tuesday_balloons"
        ],
        "results": [
            335.0
        ],
        "result_counter": {
            "335.0": 1
        },
        "prediction": 335.0
    },
    {
        "question": "How much money does Finn need to buy 2 bottles of mustard?",
        "answer": 1.6,
        "generated": [
            "mustard_price = 0.80\nquantity = 2\nans = mustard_price * quantity"
        ],
        "results": [
            1.6
        ],
        "result_counter": {
            "1.6": 1
        },
        "prediction": 1.6
    },
    {
        "question": "If Isaiah buys 1 kilogram of romaine lettuce, how much will he spend?",
        "answer": 0.46,
        "generated": [
            "romaine_lettuce_price = 0.46\nquantity = 1\nans = romaine_lettuce_price * quantity"
        ],
        "results": [
            0.46
        ],
        "result_counter": {
            "0.46": 1
        },
        "prediction": 0.46
    },
    {
        "question": "Some friends played a trivia game and recorded their scores. What is the mode of the numbers?",
        "answer": 7.0,
        "generated": [
            "from collections import Counter\n\nscores = [2, 4, 7, 2, 7, 7, 4, 7]\nscore_counts = Counter(scores)\nmode = score_counts.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Molly, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did more than 1 pull-up?",
        "answer": 18.0,
        "generated": [
            "pull_ups_frequency = {0: 18, 1: 7, 2: 5, 3: 13}\nans = sum([freq for pull_ups, freq in pull_ups_frequency.items() if pull_ups > 1])"
        ],
        "results": [
            18.0
        ],
        "result_counter": {
            "18.0": 1
        },
        "prediction": 18.0
    },
    {
        "question": "How much money does Jasmine need to buy a wooden block, a shapes stencil, and a green bouncy ball?",
        "answer": 0.14,
        "generated": [
            "wooden_block = 0.01\nshapes_stencil = 0.07\ngreen_bouncy_ball = 0.06\nans = wooden_block + shapes_stencil + green_bouncy_ball"
        ],
        "results": [
            0.14
        ],
        "result_counter": {
            "0.14": 1
        },
        "prediction": 0.14
    },
    {
        "question": "How much money does Polly need to buy a piece of elegant stationery and a piece of polka-dotted paper?",
        "answer": 0.2,
        "generated": [
            "elegant_stationery = 0.10\npolka_dotted_paper = 0.10\nans = elegant_stationery + polka_dotted_paper"
        ],
        "results": [
            0.2
        ],
        "result_counter": {
            "0.2": 1
        },
        "prediction": 0.2
    },
    {
        "question": "A food magazine published a listing of local restaurant ratings. What is the highest rating?",
        "answer": 50.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nratings_list = [16, 16, 23, 34, 36, 50]\nans = max(ratings_list)"
        ],
        "results": [
            50.0
        ],
        "result_counter": {
            "50.0": 1
        },
        "prediction": 50.0
    },
    {
        "question": "A cable company analyst paid attention to how many new customers it had each day. On which day did the cable company have the fewest new customers?",
        "answer": "Thursday",
        "generated": [
            "new_customers = {'Wednesday': 131, 'Thursday': 114, 'Friday': 141, 'Saturday': 134}\nmin_value = min(new_customers.values())\nfor key, value in new_customers.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Thursday"
        ],
        "result_counter": {
            "Thursday": 1
        },
        "prediction": "Thursday"
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "yes",
        "generated": [
            "x_values = [11, 5, 20]\nif len(x_values) == len(set(x_values)):\n    ans = 'yes'\nelse:\n    ans = 'no'"
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2011 and 2012?",
        "answer": -2.0,
        "generated": [
            "weight_2011 = 32\nweight_2012 = 30\nans = weight_2012 - weight_2011"
        ],
        "results": [
            -2.0
        ],
        "result_counter": {
            "-2.0": 1
        },
        "prediction": -2.0
    },
    {
        "question": "Charlotte went to the store. She bought 2 kilograms of semisweet chocolate chips and 2 kilograms of butterscotch chips. How much did she spend?",
        "answer": 9.52,
        "generated": [
            "semisweet_chips_price = 1.51\nbutterscotch_chips_price = 3.25\nquantity = 2\ntotal_cost = (semisweet_chips_price * quantity) + (butterscotch_chips_price * quantity)\nans = total_cost"
        ],
        "results": [
            9.52
        ],
        "result_counter": {
            "9.52": 1
        },
        "prediction": 9.52
    },
    {
        "question": "How much money does Lara need to buy a red wagon and a model railroad set?",
        "answer": 130.0,
        "generated": [
            "red_wagon_price = 32\nmodel_railroad_set_price = 98\nans = red_wagon_price + model_railroad_set_price"
        ],
        "results": [
            130.0
        ],
        "result_counter": {
            "130.0": 1
        },
        "prediction": 130.0
    },
    {
        "question": "Dillon purchased 5 kilograms of chocolate chip cookie dough, 1 kilogram of gingersnap cookie dough, and 5 kilograms of peanut butter cookie dough. What was the total cost?",
        "answer": 28.0,
        "generated": [
            "chocolate_chip_cost = 5 * 2\ngingersnap_cost = 1 * 3\npeanut_butter_cost = 5 * 3\ntotal_cost = chocolate_chip_cost + gingersnap_cost + peanut_butter_cost\nans = total_cost"
        ],
        "results": [
            28.0
        ],
        "result_counter": {
            "28.0": 1
        },
        "prediction": 28.0
    },
    {
        "question": "The town council reported on how many stop signs there are on each street. What is the mean of the numbers?",
        "answer": 7.0,
        "generated": [
            "number_of_stop_signs = [10, 4, 9, 5, 7, 7, 9, 5]\nans = sum(number_of_stop_signs) / len(number_of_stop_signs)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "A car dealership tracked the number of cars sold each month. In which month did the dealership sell the fewest cars?",
        "answer": "August",
        "generated": [
            "cars_sold = {'May': 249, 'June': 245, 'July': 254, 'August': 225}\nmin_value = min(cars_sold.values())\nfor key, value in cars_sold.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "August"
        ],
        "result_counter": {
            "August": 1
        },
        "prediction": "August"
    },
    {
        "question": "Each toy bin has 10 yellow blocks. How many yellow blocks are in 3 toy bins?",
        "answer": 30.0,
        "generated": [
            "yellow_blocks_per_bin = 10\nnumber_of_bins = 3\nans = yellow_blocks_per_bin * number_of_bins"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "How much money does Brennan need to buy a green colored pencil and a purple colored pencil?",
        "answer": 1.7,
        "generated": [
            "green_colored_pencil = 0.76\npurple_colored_pencil = 0.94\nans = green_colored_pencil + purple_colored_pencil"
        ],
        "results": [
            1.7
        ],
        "result_counter": {
            "1.7": 1
        },
        "prediction": 1.7
    },
    {
        "question": "Look at the following schedule. When does the train depart from Winchester?",
        "answer": "5:25 P.M.",
        "generated": [
            "train_schedule = {\n    'Hillsboro': ('9:55 A.M.', '10:20 A.M.'),\n    'Campbell': ('11:20 A.M.', '11:50 A.M.'),\n    'Lexington': ('1:30 P.M.', '1:45 P.M.'),\n    'Westminster': ('3:00 P.M.', '3:30 P.M.'),\n    'Winchester': ('5:05 P.M.', '5:25 P.M.'),\n    'Dayton': ('6:40 P.M.', '6:55 P.M.'),\n    'Kensington': ('8:30 P.M.', '8:55 P.M.'),\n    'Manchester': ('10:35 P.M.', '10:55 P.M.'),\n    'Lowell': ('12:15 A.M.', '12:40 A.M.'),\n    'Weston': ('1:35 A.M.', '2:05 A.M.')\n}\n\nans = train_schedule['Winchester'][1]"
        ],
        "results": [
            "5:25 P.M."
        ],
        "result_counter": {
            "5:25 P.M.": 1
        },
        "prediction": "5:25 P.M."
    },
    {
        "question": "In trying to calculate how much money could be saved by packing lunch, Felipe recorded the amount he spent on lunch each day. According to the table, what was the rate of change between Wednesday and Thursday?",
        "answer": 4.0,
        "generated": [
            "wednesday_spent = 3\nthursday_spent = 7\nans = thursday_spent - wednesday_spent"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "The Kingwood Art Museum recorded how many finger puppets the children made at last Sunday's art workshop. How many children made exactly 1 finger puppet?",
        "answer": 16.0,
        "generated": [
            "number_of_children_making_1_finger_puppet = 16\nans = number_of_children_making_1_finger_puppet"
        ],
        "results": [
            16.0
        ],
        "result_counter": {
            "16.0": 1
        },
        "prediction": 16.0
    },
    {
        "question": "Emmy went to the store. She bought 4 kilograms of rotini pasta and 4 kilograms of spirali pasta. How much did she spend?",
        "answer": 23.28,
        "generated": [
            "rotini_price_per_kg = 2.86\nspirali_price_per_kg = 2.96\nrotini_weight = 4\nspirali_weight = 4\ntotal_cost = (rotini_price_per_kg * rotini_weight) + (spirali_price_per_kg * spirali_weight)\nans = total_cost"
        ],
        "results": [
            23.28
        ],
        "result_counter": {
            "23.28": 1
        },
        "prediction": 23.28
    },
    {
        "question": "Look at the following schedule. How long does it take to get from the shopping mall to the hospital?",
        "answer": "1 hour",
        "generated": [
            "shopping_mall_departure = 11  # 11:00 A.M.\nhospital_arrival = 11.5  # 11:30 A.M.\ntime_difference = hospital_arrival - shopping_mall_departure\nminutes = time_difference * 60\n\nif minutes == 60:\n    ans = '1 hour'\nelif minutes == 15:\n    ans = '15 minutes'\nelif minutes == 45:\n    ans = '45 minutes'\nelif minutes == 30:\n    ans = '30 minutes'"
        ],
        "results": [
            "30 minutes"
        ],
        "result_counter": {
            "30 minutes": 1
        },
        "prediction": "30 minutes"
    },
    {
        "question": "Each bouquet has 5 lilies. How many lilies are in 3 bouquets?",
        "answer": 15.0,
        "generated": [
            "lilies_per_bouquet = 5\nnumber_of_bouquets = 3\nans = lilies_per_bouquet * number_of_bouquets"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "A city recorded how many people rode the subway each day. How many people in total rode the subway on Tuesday and Wednesday?",
        "answer": 4912.0,
        "generated": [
            "tuesday_riders = 2206\nwednesday_riders = 2706\nans = tuesday_riders + wednesday_riders"
        ],
        "results": [
            4912.0
        ],
        "result_counter": {
            "4912.0": 1
        },
        "prediction": 4912.0
    },
    {
        "question": "In considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people are there in all?",
        "answer": 40.0,
        "generated": [
            "number_of_trips = [1, 2, 3, 4, 5]\nfrequency = [1, 8, 20, 9, 2]\ntotal_people = sum([number_of_trips[i] * frequency[i] for i in range(len(number_of_trips))])\nans = total_people"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "How much money does Valentina need to buy a speedboat ride and an airplane ride?",
        "answer": 1190.0,
        "generated": [
            "airplane_ride = 787.00\nspeedboat_ride = 403.00\ntotal_cost = airplane_ride + speedboat_ride\nans = total_cost"
        ],
        "results": [
            1190.0
        ],
        "result_counter": {
            "1190.0": 1
        },
        "prediction": 1190.0
    },
    {
        "question": "A car dealership tracked the number of cars sold each month. What is the mean of the numbers?",
        "answer": 16.0,
        "generated": [
            "number_of_cars_sold = [12, 18, 11, 14, 20, 16, 19, 18]\nans = sum(number_of_cars_sold) / len(number_of_cars_sold)"
        ],
        "results": [
            16.0
        ],
        "result_counter": {
            "16.0": 1
        },
        "prediction": 16.0
    },
    {
        "question": "Turner buys 1 pound of shredded wheat. What is the total cost?",
        "answer": 4.74,
        "generated": [
            "shredded_wheat_price_per_lb = 4.74\ntotal_cost = shredded_wheat_price_per_lb * 1\nans = total_cost"
        ],
        "results": [
            4.74
        ],
        "result_counter": {
            "4.74": 1
        },
        "prediction": 4.74
    },
    {
        "question": "Chad went to the store and bought 3/4 of a pound of oatmeal raisin cookie dough. How much did he spend?",
        "answer": 5.25,
        "generated": [
            "oatmeal_raisin_price_per_pound = 7\noatmeal_raisin_weight = 3/4\ntotal_cost = oatmeal_raisin_price_per_pound * oatmeal_raisin_weight\nans = total_cost"
        ],
        "results": [
            5.25
        ],
        "result_counter": {
            "5.25": 1
        },
        "prediction": 5.25
    },
    {
        "question": "Several students participated in a race. What is the mean of the numbers?",
        "answer": 36.0,
        "generated": [
            "race_times = [23, 39, 33, 35, 42, 38, 35, 43]\nans = sum(race_times) / len(race_times)"
        ],
        "results": [
            36.0
        ],
        "result_counter": {
            "36.0": 1
        },
        "prediction": 36.0
    },
    {
        "question": "How much would it cost to buy 4+9/10 kilograms of heart-shaped beads?",
        "answer": 14.7,
        "generated": [
            "heart_shaped_beads_price = 3\nweight = 4 + 9/10\nans = heart_shaped_beads_price * weight"
        ],
        "results": [
            14.700000000000001
        ],
        "result_counter": {
            "14.700000000000001": 1
        },
        "prediction": 14.700000000000001
    },
    {
        "question": "How much money does Nate need to buy a history book and a spelling workbook?",
        "answer": 25.0,
        "generated": [
            "history_book_price = 15\nspelling_workbook_price = 10\nans = history_book_price + spelling_workbook_price"
        ],
        "results": [
            25.0
        ],
        "result_counter": {
            "25.0": 1
        },
        "prediction": 25.0
    },
    {
        "question": "Kendra has $0.19. How much money will Kendra have left if she buys a piece of green slate and a piece of fool's gold?",
        "answer": 0.07,
        "generated": [
            "green_slate_price = 0.09\nfools_gold_price = 0.03\ntotal_money = 0.19\nmoney_left = total_money - (green_slate_price + fools_gold_price)\nans = money_left"
        ],
        "results": [
            0.07
        ],
        "result_counter": {
            "0.07": 1
        },
        "prediction": 0.07
    },
    {
        "question": "Students at Lexington Middle School wrote and submitted poems for a district-wide writing contest. How many students wrote at least 4 poems?",
        "answer": 20.0,
        "generated": [
            "students_with_4_or_more_poems = 7 + 11 + 2\nans = students_with_4_or_more_poems"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "Donald has $0.07. Does he have enough to buy a scallop shell and a shiny gold shell?",
        "answer": "yes",
        "generated": [
            "scallop_shell_price = 0.05\nshiny_gold_shell_price = 0.01\ntotal_money = 0.07\nif total_money >= scallop_shell_price + shiny_gold_shell_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "The teachers at a middle school counted how many computers they had in their classrooms. What is the range of the numbers?",
        "answer": 3.0,
        "generated": [
            "number_of_computers = [6, 5, 5, 5, 6, 8]\nans = max(number_of_computers) - min(number_of_computers)"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "A farmer counted the number of apples on each tree in her orchard. How many trees have exactly 35 apples?",
        "answer": 2.0,
        "generated": [
            "apples_per_tree_list = [35, 35, 38, 39, 40, 43, 45, 47, 71, 73, 90]\nans = apples_per_tree_list.count(35)"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "The librarian at the public library counted the number of books on each shelf. What is the smallest number of books?",
        "answer": 18.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbooks_number_list = [18, 21, 25, 26, 29, 39, 52, 57, 61, 62, 64, 66, 67, 69, 76, 90]\nans = min(books_number_list)"
        ],
        "results": [
            18.0
        ],
        "result_counter": {
            "18.0": 1
        },
        "prediction": 18.0
    },
    {
        "question": "A game show program recorded the scores of its contestants. How many contestants scored more than 8?",
        "answer": 20.0,
        "generated": [
            "scores_frequency = {5: 17, 6: 14, 7: 1, 8: 4, 9: 12, 10: 8}\nans = sum([freq for score, freq in scores_frequency.items() if score > 8])"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "How much more does a pink and white striped shell cost than a polished silver top shell?",
        "answer": 0.5,
        "generated": [
            "pink_and_white_shell_cost = 0.79\npolished_silver_top_shell_cost = 0.29\nans = pink_and_white_shell_cost - polished_silver_top_shell_cost"
        ],
        "results": [
            0.5
        ],
        "result_counter": {
            "0.5": 1
        },
        "prediction": 0.5
    },
    {
        "question": "How much money does Layla need to buy a coloring book and a book of crossword puzzles?",
        "answer": 9.0,
        "generated": [
            "crossword_puzzle_book = 5\ncoloring_book = 4\nans = crossword_puzzle_book + coloring_book"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Logan recalled how many minutes he had spent at theater rehearsal in the past 4 days. On which day did Logan rehearse the most?",
        "answer": "Thursday",
        "generated": [
            "rehearsal_minutes = {'Thursday': 172, 'Friday': 127, 'Saturday': 117, 'Sunday': 122}\nmax_minutes = max(rehearsal_minutes.values())\nfor day, minutes in rehearsal_minutes.items():\n    if minutes == max_minutes:\n        ans = day"
        ],
        "results": [
            "Thursday"
        ],
        "result_counter": {
            "Thursday": 1
        },
        "prediction": "Thursday"
    },
    {
        "question": "A game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. How many people spun a number greater than 3?",
        "answer": 20.0,
        "generated": [
            "number_greater_than_3 = {4: 0, 5: 20}\nans = sum(number_greater_than_3.values())"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "A plant nursery in Greenville keeps records of how many of its plants are annuals, biennials, and perennials. What fraction of the plants are biennials? Simplify your answer.",
        "answer": "21/62",
        "generated": [
            "total_plants = 57 + 66 + 63\nbiennials = 63\nans = biennials / total_plants"
        ],
        "results": [
            0.3387096774193548
        ],
        "result_counter": {
            "0.3387096774193548": 1
        },
        "prediction": 0.3387096774193548
    },
    {
        "question": "The members of the track team compared how many miles they ran last week. What is the mean of the numbers?",
        "answer": 5.0,
        "generated": [
            "miles_ran = [4, 10, 3, 4, 3, 6]\nans = sum(miles_ran) / len(miles_ran)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "Tina counted the number of pieces of pepperoni on each pizza she made. What is the largest number of pieces of pepperoni?",
        "answer": 49.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\npepperoni_number_list = [9, 13, 15, 21, 21, 23, 28, 38, 49]\nans = max(pepperoni_number_list)"
        ],
        "results": [
            49.0
        ],
        "result_counter": {
            "49.0": 1
        },
        "prediction": 49.0
    },
    {
        "question": "Judy has $66.00. How much money will Judy have left if she buys a yellow bath towel and a fleece blanket?",
        "answer": 35.0,
        "generated": [
            "bath_towel_price = 18.00\nfleece_blanket_price = 13.00\ntotal_money = 66.00\nmoney_spent = bath_towel_price + fleece_blanket_price\nans = total_money - money_spent"
        ],
        "results": [
            35.0
        ],
        "result_counter": {
            "35.0": 1
        },
        "prediction": 35.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [8, 9, 10]\ny_values = [20, 10, 0]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "Look at the following schedule. Which class begins at 2.10 P.M.?",
        "answer": "swing dance class",
        "generated": [
            "class_schedule = {\n    'salsa dance': ('9:05 A.M.', '9:35 A.M.'),\n    'western dance': ('9:45 A.M.', '11:05 A.M.'),\n    'beginning ballet': ('11:15 A.M.', '11:55 A.M.'),\n    'intermediate ballet': ('12:00 P.M.', '1:10 P.M.'),\n    'hip hop dance': ('1:25 P.M.', '2:05 P.M.'),\n    'swing dance': ('2:10 P.M.', '3:15 P.M.')\n}\n\nfor class_name, time_range in class_schedule.items():\n    if time_range[0] == '2:10 P.M.':\n        ans = class_name.lower() + ' class'"
        ],
        "results": [
            "swing dance class"
        ],
        "result_counter": {
            "swing dance class": 1
        },
        "prediction": "swing dance class"
    },
    {
        "question": "How much more does a plane ticket to Tokyo cost than a plane ticket to New York City?",
        "answer": 517.0,
        "generated": [
            "tokyo_ticket = 971.00\nnyc_ticket = 454.00\nans = tokyo_ticket - nyc_ticket"
        ],
        "results": [
            517.0
        ],
        "result_counter": {
            "517.0": 1
        },
        "prediction": 517.0
    },
    {
        "question": "The bird watcher counted the number of birds in each flock that passed overhead. What is the largest number of birds?",
        "answer": 75.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbirds_number_list = [20, 20, 20, 32, 33, 35, 35, 38, 42, 45, 45, 45, 50, 52, 53, 56, 56, 57, 59, 60, 64, 65, 66, 69, 75]\nans = max(birds_number_list)"
        ],
        "results": [
            75.0
        ],
        "result_counter": {
            "75.0": 1
        },
        "prediction": 75.0
    },
    {
        "question": "The transportation company tracked the number of train tickets sold in the past 7 days. What is the median of the numbers?",
        "answer": 42.0,
        "generated": [
            "tickets_sold = [42, 35, 38, 43, 36, 43, 45]\ntickets_sold = sorted(tickets_sold)\nmiddle1 = (len(tickets_sold) - 1) // 2\nmiddle2 = len(tickets_sold) // 2\nans = (tickets_sold[middle1] + tickets_sold[middle2]) / 2"
        ],
        "results": [
            42.0
        ],
        "result_counter": {
            "42.0": 1
        },
        "prediction": 42.0
    },
    {
        "question": "While hanging Christmas lights for neighbors, Evan counted the number of broken lights on each string. How many strings had at least 50 broken lights but less than 80 broken lights?",
        "answer": 11.0,
        "generated": [
            "broken_lights_list = [22, 23, 24, 26, 29, 33, 38, 39, 40, 42, 47, 49, 50, 56, 56, 57, 60, 60, 61, 68, 69, 73, 78]\nstrings_with_50_to_80_lights = [x for x in broken_lights_list if 50 <= x < 80]\nans = len(strings_with_50_to_80_lights)"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "A bus driver paid attention to how many passengers her bus had each day. On which day did the bus have the most passengers?",
        "answer": "Saturday",
        "generated": [
            "bus_passengers = {'Saturday': 97, 'Sunday': 94, 'Monday': 91, 'Tuesday': 93}\nmax_value = max(bus_passengers.values())\nfor key, value in bus_passengers.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Saturday"
        ],
        "result_counter": {
            "Saturday": 1
        },
        "prediction": "Saturday"
    },
    {
        "question": "While compiling photos for an album, Maureen noted the number of photographs taken by each of her friends and family. How many people took more than 1 photograph?",
        "answer": 51.0,
        "generated": [
            "number_of_people_taking_photos = [9, 0, 16, 1, 18, 4, 12]\nans = sum(number_of_people_taking_photos[2:])"
        ],
        "results": [
            51.0
        ],
        "result_counter": {
            "51.0": 1
        },
        "prediction": 51.0
    },
    {
        "question": "A game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. How many people spun a number less than 3?",
        "answer": 17.0,
        "generated": [
            "number_frequency = {1: 3, 2: 14, 3: 4, 4: 9, 5: 0}\nans = number_frequency[1] + number_frequency[2]"
        ],
        "results": [
            17.0
        ],
        "result_counter": {
            "17.0": 1
        },
        "prediction": 17.0
    },
    {
        "question": "Stefan measured the length of each scarf in the clothing store where he works. How many scarves are at least 60 centimeters but less than 80 centimeters?",
        "answer": 9.0,
        "generated": [
            "scarf_lengths = [69, 70, 71, 71, 72, 73, 73, 77, 79, 80, 80, 83, 86, 87, 89, 90, 90]\nans = sum(1 for length in scarf_lengths if 60 <= length < 80)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "How much more does a guitar cost than a clarinet?",
        "answer": 90.0,
        "generated": [
            "guitar_cost = 584\nclarinet_cost = 494\nans = guitar_cost - clarinet_cost"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "Ethan wants to buy 3+1/4 pounds of rib. How much will he spend?",
        "answer": 16.25,
        "generated": [
            "rib_price_per_lb = 5\ntotal_weight = 3 + 1/4\ntotal_cost = rib_price_per_lb * total_weight\nans = total_cost"
        ],
        "results": [
            16.25
        ],
        "result_counter": {
            "16.25": 1
        },
        "prediction": 16.25
    },
    {
        "question": "Livingston Property Management reviewed the number of vacant apartments at each its apartment complexes over time. In September, which complex had the most vacant apartments?",
        "answer": "City Apartments",
        "generated": [
            "vacant_apartments_september = {\n    'Alameda Apartments': 17,\n    'City Apartments': 20,\n    'Downtown Apartments': 13,\n    'Shadyside Apartments': 5,\n    'University Apartments': 12\n}\nmax_vacant = max(vacant_apartments_september.values())\nfor key, value in vacant_apartments_september.items():\n    if value == max_vacant:\n        ans = key"
        ],
        "results": [
            "City Apartments"
        ],
        "result_counter": {
            "City Apartments": 1
        },
        "prediction": "City Apartments"
    },
    {
        "question": "Erin graphed the temperature at noon for 7 days. What is the mode of the numbers?",
        "answer": 4.0,
        "generated": [
            "temperatures = [4, 4, 6, 5, 6, 4, 5]\nfrom collections import Counter\ncounter = Counter(temperatures)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "How much more does a pot-bellied pig cost than a rabbit?",
        "answer": 29.0,
        "generated": [
            "rabbit_cost = 21.88\npot_bellied_pig_cost = 50.88\nans = pot_bellied_pig_cost - rabbit_cost"
        ],
        "results": [
            29.000000000000004
        ],
        "result_counter": {
            "29.000000000000004": 1
        },
        "prediction": 29.000000000000004
    },
    {
        "question": "Sandeep counted the number of silver beads on each bracelet at Booneville Jewelry, the store where he works. How many bracelets had at least 47 silver beads?",
        "answer": 7.0,
        "generated": [
            "beads_number_list = [21, 23, 25, 25, 26, 26, 29, 30, 31, 32, 35, 36, 37, 38, 40, 42, 46, 46, 48, 49, 49, 49, 56, 58, 59]\nbracelets_with_47_or_more_beads = [bead for bead in beads_number_list if bead >= 47]\nans = len(bracelets_with_47_or_more_beads)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "A wilderness retail store asked a consulting company to do an analysis of their hiking shoe customers. The consulting company gathered data from each customer that purchased hiking shoes, and recorded the shoe brand and the customer's level of happiness. What is the probability that a randomly selected customer is pleased and purchased a Footlong shoe? Simplify any fractions.",
        "answer": "2/11",
        "generated": [
            "total_customers = (3 + 2) + (2 + 4)\npleased_footlong_customers = 2\nans = pleased_footlong_customers / total_customers"
        ],
        "results": [
            0.18181818181818182
        ],
        "result_counter": {
            "0.18181818181818182": 1
        },
        "prediction": 0.18181818181818182
    },
    {
        "question": "A food magazine published a listing of local restaurant ratings. How many restaurants were rated exactly 4 points?",
        "answer": 0.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\n# There is no leaf value under the stem 4, so no restaurants were rated exactly 4 points.\nans = 0"
        ],
        "results": [
            0.0
        ],
        "result_counter": {
            "0.0": 1
        },
        "prediction": 0.0
    },
    {
        "question": "Kenny bought 4 kilograms of strawberry ice cream and 2 kilograms of cherry ice cream. How much did he spend?",
        "answer": 12.78,
        "generated": [
            "strawberry_price_per_kg = 2.30\ncherry_price_per_kg = 1.79\nstrawberry_kg = 4\ncherry_kg = 2\ntotal_cost = (strawberry_price_per_kg * strawberry_kg) + (cherry_price_per_kg * cherry_kg)\nans = total_cost"
        ],
        "results": [
            12.78
        ],
        "result_counter": {
            "12.78": 1
        },
        "prediction": 12.78
    },
    {
        "question": "How much money does Anthony need to buy 2 pieces of black obsidian and 7 pumice stones?",
        "answer": 6.22,
        "generated": [
            "black_obsidian_price = 0.59\npumice_stone_price = 0.72\ntotal_money_needed = (2 * black_obsidian_price) + (7 * pumice_stone_price)\nans = total_money_needed"
        ],
        "results": [
            6.22
        ],
        "result_counter": {
            "6.22": 1
        },
        "prediction": 6.22
    },
    {
        "question": "How much money does Kinsley need to buy a basketball ticket and a football ticket?",
        "answer": 176.28,
        "generated": [
            "basketball_ticket = 92.75\nfootball_ticket = 83.53\ntotal_money_needed = basketball_ticket + football_ticket\nans = total_money_needed"
        ],
        "results": [
            176.28
        ],
        "result_counter": {
            "176.28": 1
        },
        "prediction": 176.28
    },
    {
        "question": "The local high school found out how many members each club had. Which club has the fewest members?",
        "answer": "photography club",
        "generated": [
            "club_members = {'geology club': 185, 'photography club': 118, 'art club': 158, 'Spanish club': 159}\nmin_value = min(club_members.values())\nfor key, value in club_members.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "photography club"
        ],
        "result_counter": {
            "photography club": 1
        },
        "prediction": "photography club"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $190, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_190 = 13000\nquantity_supplied_price_190 = 13600\nif quantity_demanded_price_190 > quantity_supplied_price_190:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. What is the smallest number of lemon-flavored candies?",
        "answer": 61.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nlemon_candies_number_list = [61, 62, 63, 69, 78, 83, 85, 90]\nans = min(lemon_candies_number_list)"
        ],
        "results": [
            61.0
        ],
        "result_counter": {
            "61.0": 1
        },
        "prediction": 61.0
    },
    {
        "question": "Helen kept track of the number of characters in each book she read. How many books had at least 30 characters but fewer than 40 characters?",
        "answer": 3.0,
        "generated": [
            "stem_3 = [30, 32, 35, 35]\nans = len(stem_3)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "The manager of a party supply store researched how many balloons it sold in the past 6 days. What is the mean of the numbers?",
        "answer": 74.0,
        "generated": [
            "number_of_balloons_sold = [74, 78, 74, 71, 72, 75]\nans = sum(number_of_balloons_sold) / len(number_of_balloons_sold)"
        ],
        "results": [
            74.0
        ],
        "result_counter": {
            "74.0": 1
        },
        "prediction": 74.0
    },
    {
        "question": "Every summer, Josiah goes on a week-long canoe trip with his childhood camp friends. After the trip, he usually purchases some oars from the destination city. His collection of oars is organized by year and type of wood. What is the probability that a randomly selected oar was made from spruce wood and was purchased in 2010? Simplify any fractions.",
        "answer": "1/6",
        "generated": [
            "total_oars = (3 + 6) + (3 + 6)\nspruce_wood_2010 = 3\nans = spruce_wood_2010 / total_oars"
        ],
        "results": [
            0.16666666666666666
        ],
        "result_counter": {
            "0.16666666666666666": 1
        },
        "prediction": 0.16666666666666666
    },
    {
        "question": "An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between July and August?",
        "answer": -7.0,
        "generated": [
            "waiting_time_july = 41\nwaiting_time_august = 34\nans = waiting_time_august - waiting_time_july"
        ],
        "results": [
            -7.0
        ],
        "result_counter": {
            "-7.0": 1
        },
        "prediction": -7.0
    },
    {
        "question": "Look at the following schedule. Which game ends at 11.30 A.M.?",
        "answer": "Waves versus Alligators game",
        "generated": [
            "game_end_times = {'Waves versus Alligators': '11:30 A.M.', 'Fire versus Blizzard': '2:35 P.M.', 'Thunder versus Eagles': '12:45 P.M.', 'Dolphins versus Bears': '12:10 P.M.'}\nfor game, end_time in game_end_times.items():\n    if end_time == '11:30 A.M.':\n        ans = game"
        ],
        "results": [
            "Waves versus Alligators"
        ],
        "result_counter": {
            "Waves versus Alligators": 1
        },
        "prediction": "Waves versus Alligators"
    },
    {
        "question": "Each branch has 5 flowers. How many flowers are on 6 branches?",
        "answer": 30.0,
        "generated": [
            "flowers_per_branch = 5\nbranches = 6\nans = flowers_per_branch * branches"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "Liz's Treats counted how many times its most frequent customers ate ice cream last month. How many customers are there in all?",
        "answer": 54.0,
        "generated": [
            "customer_number_for_each_frequency = [8, 17, 9, 20, 0]\nans = sum(customer_number_for_each_frequency)"
        ],
        "results": [
            54.0
        ],
        "result_counter": {
            "54.0": 1
        },
        "prediction": 54.0
    },
    {
        "question": "Valeria buys 3.2 pounds of African rice. What is the total cost?",
        "answer": 12.8,
        "generated": [
            "african_rice_price = 4\nquantity = 3.2\ntotal_cost = african_rice_price * quantity\nans = total_cost"
        ],
        "results": [
            12.8
        ],
        "result_counter": {
            "12.8": 1
        },
        "prediction": 12.8
    },
    {
        "question": "Josie, a fantasy football fan, carefully studied the number of touchdowns completed by her favorite players last season. How many players scored at least 1 touchdown last season?",
        "answer": 46.0,
        "generated": [
            "players_with_touchdowns = [20, 15, 10, 0, 1]\nans = sum(players_with_touchdowns)"
        ],
        "results": [
            46.0
        ],
        "result_counter": {
            "46.0": 1
        },
        "prediction": 46.0
    },
    {
        "question": "Lola buys 1.4 pounds of lace scraps. What is the total cost?",
        "answer": 16.8,
        "generated": [
            "lace_price_per_lb = 12\nlace_weight = 1.4\ntotal_cost = lace_price_per_lb * lace_weight\nans = total_cost"
        ],
        "results": [
            16.799999999999997
        ],
        "result_counter": {
            "16.799999999999997": 1
        },
        "prediction": 16.799999999999997
    },
    {
        "question": "Hunter counted the number of pairs of shoes for sale at each of the shoe stores in the mall. How many stores have exactly 90 pairs of shoes?",
        "answer": 4.0,
        "generated": [
            "shoe_number_list = [35, 36, 36, 40, 42, 50, 51, 51, 52, 54, 63, 63, 73, 74, 82, 83, 84, 87, 88, 90, 90, 90, 90]\nexact_90_pairs = shoe_number_list.count(90)\nans = exact_90_pairs"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "As part of a math lab, Darell tracked the number of times his classmates drew a number between 2 and 8. Which number was drawn the fewest times?",
        "answer": 4.0,
        "generated": [
            "number_frequency = {2: 14, 3: 13, 4: 0, 5: 19, 6: 7, 7: 12, 8: 16}\nmin_value = min(number_frequency.values())\nfor key, value in number_frequency.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "Look at the following schedule. Which class ends at 5.45 P.M.?",
        "answer": "European History class",
        "generated": [
            "class_end_times = {'Russian': '9:40 A.M.', 'Ancient Civilizations': '11:45 A.M.', 'Plant Biology': '1:45 P.M.', 'Advanced Algebra': '3:00 P.M.', 'Japanese': '5:00 P.M.', 'European History': '5:45 P.M.'}\nfor key, value in class_end_times.items():\n    if value == '5:45 P.M.':\n        ans = key + ' class'"
        ],
        "results": [
            "European History class"
        ],
        "result_counter": {
            "European History class": 1
        },
        "prediction": "European History class"
    },
    {
        "question": "The local high school found out how many members each club had. What is the mode of the numbers?",
        "answer": 9.0,
        "generated": [
            "members = [9, 9, 8, 9, 8]\nfrom collections import Counter\ncounter = Counter(members)\nmode = counter.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "How much money does Brenda need to buy 7 hang gliders?",
        "answer": 63553.0,
        "generated": [
            "hang_glider_price = 9079\nnumber_of_hang_gliders = 7\nans = hang_glider_price * number_of_hang_gliders"
        ],
        "results": [
            63553.0
        ],
        "result_counter": {
            "63553.0": 1
        },
        "prediction": 63553.0
    },
    {
        "question": "A pair of Franklin High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2015 and 2016?",
        "answer": 0.0,
        "generated": [
            "games_won_2015 = 12\ngames_won_2016 = 12\nans = games_won_2016 - games_won_2015"
        ],
        "results": [
            0.0
        ],
        "result_counter": {
            "0.0": 1
        },
        "prediction": 0.0
    },
    {
        "question": "How much more does a Jamaican vacation package cost than a Caribbean vacation package?",
        "answer": 5349.0,
        "generated": [
            "jamaican_vacation_cost = 9269\ncaribbean_vacation_cost = 3920\nans = jamaican_vacation_cost - caribbean_vacation_cost"
        ],
        "results": [
            5349.0
        ],
        "result_counter": {
            "5349.0": 1
        },
        "prediction": 5349.0
    },
    {
        "question": "The members of the local garden club tallied the number of plants in each person's garden. How many gardens have at least 30 plants?",
        "answer": 6.0,
        "generated": [
            "garden_plant_numbers = [32, 41, 48, 51, 61, 73]\ngardens_with_at_least_30_plants = [num for num in garden_plant_numbers if num >= 30]\nans = len(gardens_with_at_least_30_plants)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "How much money does Lauren need to buy a boxcar and a jet ski?",
        "answer": 13802.0,
        "generated": [
            "boxcar_price = 7900\njet_ski_price = 5902\nans = boxcar_price + jet_ski_price"
        ],
        "results": [
            13802.0
        ],
        "result_counter": {
            "13802.0": 1
        },
        "prediction": 13802.0
    },
    {
        "question": "Danny's classmates revealed how many science articles they read. Together, how many science articles did Danny and Lisa read?",
        "answer": 808.0,
        "generated": [
            "danny_articles = 682\nlisa_articles = 126\nans = danny_articles + lisa_articles"
        ],
        "results": [
            808.0
        ],
        "result_counter": {
            "808.0": 1
        },
        "prediction": 808.0
    },
    {
        "question": "How much would it cost to buy 3 pounds of gummy bears, 3 pounds of yogurt-covered peanuts, and 2 pounds of licorice?",
        "answer": 17.0,
        "generated": [
            "gummy_bears_price = 2\nyogurt_covered_peanuts_price = 1\nlicorice_price = 4\n\ncost = (3 * gummy_bears_price) + (3 * yogurt_covered_peanuts_price) + (2 * licorice_price)\nans = cost"
        ],
        "results": [
            17.0
        ],
        "result_counter": {
            "17.0": 1
        },
        "prediction": 17.0
    },
    {
        "question": "A flight attendant was counting the number of passengers present to see if any upgrades could be offered. The flight attendant's list contained passengers' Frequent Flyer status as well as number of bags checked. What is the probability that a randomly selected passenger has 1 checked bag and silver status? Simplify any fractions.",
        "answer": "1/5",
        "generated": [
            "total_passengers = 4 + 4 + 8 + 4\nsilver_status_one_bag = 4\nans = silver_status_one_bag / total_passengers"
        ],
        "results": [
            0.2
        ],
        "result_counter": {
            "0.2": 1
        },
        "prediction": 0.2
    },
    {
        "question": "The coach of the Academic Bowl recorded the scores in a trivia game to determine who would represent the school at the regional competition. How many people scored more than 9?",
        "answer": 14.0,
        "generated": [
            "score_frequency = {5: 2, 6: 8, 7: 4, 8: 11, 9: 1, 10: 14}\nans = sum([freq for score, freq in score_frequency.items() if score > 9])"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "Dylan's classmates revealed how many science articles they read. What is the mean of the numbers?",
        "answer": 8.0,
        "generated": [
            "number_of_articles = [7, 5, 8, 9, 10, 9]\nans = sum(number_of_articles) / len(number_of_articles)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "A food industry researcher compiled the revenues of several pizzerias. Which restaurant made more from pizzas, New York Slice or The Real Chicago?",
        "answer": "The Real Chicago",
        "generated": [
            "revenue_new_york_slice = 10 + 19\nrevenue_the_real_chicago = 17 + 19\nif revenue_new_york_slice > revenue_the_real_chicago:\n    ans = 'New York Slice'\nelse:\n    ans = 'The Real Chicago'"
        ],
        "results": [
            "The Real Chicago"
        ],
        "result_counter": {
            "The Real Chicago": 1
        },
        "prediction": "The Real Chicago"
    },
    {
        "question": "An architecture student measured the heights of all the buildings downtown. How many buildings are at least 27 meters tall?",
        "answer": 12.0,
        "generated": [
            "building_heights = [10, 12, 17, 18, 23, 33, 34, 39, 40, 47, 54, 56, 58, 68, 69, 74, 81]\nbuildings_taller_than_27 = [height for height in building_heights if height >= 27]\nans = len(buildings_taller_than_27)"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "Perry's Treats counted how many times its most frequent customers ate ice cream last month. How many customers ate ice cream at least 1 time?",
        "answer": 29.0,
        "generated": [
            "frequency_list = [3, 4, 17, 7, 0, 1]\nans = sum(frequency_list) - frequency_list[0]"
        ],
        "results": [
            29.0
        ],
        "result_counter": {
            "29.0": 1
        },
        "prediction": 29.0
    },
    {
        "question": "A pet store owner had his staff count the number of fish in each tank. What is the largest number of fish per tank?",
        "answer": 68.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nfish_number_list = [10, 10, 12, 13, 14, 15, 28, 29, 31, 32, 33, 34, 34, 37, 48, 48, 48, 52, 59, 65, 66, 68]\nans = max(fish_number_list)"
        ],
        "results": [
            68.0
        ],
        "result_counter": {
            "68.0": 1
        },
        "prediction": 68.0
    },
    {
        "question": "Look at the following schedule. When does Ms. Hampton's class begin?",
        "answer": "2:00 P.M.",
        "generated": [
            "class_schedule = {\n    \"Mr. Harper's class\": (\"7:25 A.M.\", \"8:20 A.M.\"),\n    \"Mrs. Suzuki's class\": (\"8:25 A.M.\", \"9:30 A.M.\"),\n    \"Mrs. Carlson's class\": (\"9:50 A.M.\", \"10:20 A.M.\"),\n    \"Ms. Dyer's class\": (\"10:30 A.M.\", \"11:10 A.M.\"),\n    \"Mr. Mason's class\": (\"11:20 A.M.\", \"11:55 A.M.\"),\n    \"Mrs. McCoy's class\": (\"12:00 P.M.\", \"12:45 P.M.\"),\n    \"Ms. Mueller's class\": (\"1:05 P.M.\", \"1:55 P.M.\"),\n    \"Ms. Hampton's class\": (\"2:00 P.M.\", \"2:50 P.M.\"),\n}\n\nans = class_schedule[\"Ms. Hampton's class\"][0]"
        ],
        "results": [
            "2:00 P.M."
        ],
        "result_counter": {
            "2:00 P.M.": 1
        },
        "prediction": "2:00 P.M."
    },
    {
        "question": "For an economics project, Jim determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a car on the Seattle-Bremerton ferry than on the Mukilteu-Clinton ferry?",
        "answer": 5.0,
        "generated": [
            "seattle_bremerton_car_fare = 12\nmukilteo_clinton_car_fare = 7\nans = seattle_bremerton_car_fare - mukilteo_clinton_car_fare"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "Danny has $103.16. How much money will Danny have left if he buys a model airplane and a mystery game?",
        "answer": 49.93,
        "generated": [
            "model_airplane_price = 38.89\nmystery_game_price = 14.34\ntotal_money = 103.16\nmoney_left = total_money - (model_airplane_price + mystery_game_price)\nans = money_left"
        ],
        "results": [
            49.92999999999999
        ],
        "result_counter": {
            "49.92999999999999": 1
        },
        "prediction": 49.92999999999999
    },
    {
        "question": "After a field trip to the park, students in Mrs. Garcia's art class counted the number of leaf rubbings they had made. How many students made at least 2 leaf rubbings?",
        "answer": 14.0,
        "generated": [
            "students_with_2_or_more_rubbings = 3 + 11\nans = students_with_2_or_more_rubbings"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "Each toy bin has 2 red blocks. How many red blocks are in 5 toy bins?",
        "answer": 10.0,
        "generated": [
            "number_of_bins = 5\nred_blocks_per_bin = 2\nans = number_of_bins * red_blocks_per_bin"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $65, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_65 = 13000\nquantity_supplied_price_65 = 19200\nif quantity_demanded_price_65 > quantity_supplied_price_65:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "The players on a quiz show received the following scores. Who had the highest score?",
        "answer": "Wesley",
        "generated": [
            "quiz_show_scores = {'Vince': 445, 'Herman': 425, 'Tom': 422, 'Wesley': 452}\nmax_score = max(quiz_show_scores.values())\nfor name, score in quiz_show_scores.items():\n    if score == max_score:\n        ans = name"
        ],
        "results": [
            "Wesley"
        ],
        "result_counter": {
            "Wesley": 1
        },
        "prediction": "Wesley"
    },
    {
        "question": "An environmental agency examined how many trees were planted by different organizations. In all, how many trees were planted by New Planet and Plant It?",
        "answer": 578.0,
        "generated": [
            "new_planet_trees = 207\nplant_it_trees = 371\nans = new_planet_trees + plant_it_trees"
        ],
        "results": [
            578.0
        ],
        "result_counter": {
            "578.0": 1
        },
        "prediction": 578.0
    },
    {
        "question": "Castroville University offers four applied majors and monitors the number of students in each. What fraction of the students in applied majors are majoring in mechanical engineering? Simplify your answer.",
        "answer": "5/28",
        "generated": [
            "intake_electronics = 170\nintake_architecture = 470\nintake_civil_engineering = 280\nintake_mechanical_engineering = 200\n\ntotal_students = intake_electronics + intake_architecture + intake_civil_engineering + intake_mechanical_engineering\nfraction_mechanical_engineering = intake_mechanical_engineering / total_students\nans = fraction_mechanical_engineering"
        ],
        "results": [
            0.17857142857142858
        ],
        "result_counter": {
            "0.17857142857142858": 1
        },
        "prediction": 0.17857142857142858
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "yes",
        "generated": [
            "x_values = [15, 5, 13, 11]\nif len(x_values) == len(set(x_values)):\n    ans = 'yes'\nelse:\n    ans = 'no'"
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "yes",
        "generated": [
            "x_values = [15, 11, 1, 12]\nif len(x_values) == len(set(x_values)):\n    ans = 'yes'\nelse:\n    ans = 'no'"
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "If Edwin buys 4 kilograms of chestnuts, 5 kilograms of peanuts, and 5 kilograms of macadamia nuts, how much will he spend?",
        "answer": 50.31,
        "generated": [
            "chestnuts_price = 5.14\npeanuts_price = 1.95\nmacadamia_nuts_price = 4.00\n\nchestnuts_weight = 4\npeanuts_weight = 5\nmacadamia_nuts_weight = 5\n\ntotal_cost = (chestnuts_price * chestnuts_weight) + (peanuts_price * peanuts_weight) + (macadamia_nuts_price * macadamia_nuts_weight)\nans = total_cost"
        ],
        "results": [
            50.31
        ],
        "result_counter": {
            "50.31": 1
        },
        "prediction": 50.31
    },
    {
        "question": "In considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people went to the library at least 3 times last month?",
        "answer": 44.0,
        "generated": [
            "frequency_at_least_3_times = [6, 9, 13, 16]\nans = sum(frequency_at_least_3_times)"
        ],
        "results": [
            44.0
        ],
        "result_counter": {
            "44.0": 1
        },
        "prediction": 44.0
    },
    {
        "question": "Nora has $11. Does she have enough to buy fried eggs and a breakfast burrito?",
        "answer": "no",
        "generated": [
            "fried_eggs_price = 3\nbreakfast_burrito_price = 9\ntotal_money = 11\nif total_money >= fried_eggs_price + breakfast_burrito_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [12, 13, 14]\ny_values = [7, 10, 13]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "While hanging Christmas lights for neighbors, Kelsey counted the number of broken lights on each string. How many strings had at least 50 broken lights?",
        "answer": 4.0,
        "generated": [
            "broken_lights_list = [43, 45, 62, 75, 76, 90]\nstrings_with_50_or_more_broken_lights = [x for x in broken_lights_list if x >= 50]\nans = len(strings_with_50_or_more_broken_lights)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A car dealership tracked the number of cars sold each month. In which month did the dealership sell the most cars?",
        "answer": "January",
        "generated": [
            "cars_sold = {'November': 268, 'December': 286, 'January': 289, 'February': 226}\nmax_value = max(cars_sold.values())\nfor key, value in cars_sold.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "January"
        ],
        "result_counter": {
            "January": 1
        },
        "prediction": "January"
    },
    {
        "question": "An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between May and June?",
        "answer": -34.0,
        "generated": [
            "waiting_time_may = 40\nwaiting_time_june = 6\nans = waiting_time_june - waiting_time_may"
        ],
        "results": [
            -34.0
        ],
        "result_counter": {
            "-34.0": 1
        },
        "prediction": -34.0
    },
    {
        "question": "Seth went to the store. He bought 1+3/10 pounds of lentils. How much did he spend?",
        "answer": 3.9,
        "generated": [
            "lentils_price_per_pound = 3\nlentils_weight = 1 + 3/10\ntotal_cost = lentils_price_per_pound * lentils_weight\nans = total_cost"
        ],
        "results": [
            3.9000000000000004
        ],
        "result_counter": {
            "3.9000000000000004": 1
        },
        "prediction": 3.9000000000000004
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [0, 1, 2]\ny_values = [20, 12, 4]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "Eddie has $9.50. Does he have enough to buy a coffee mug and a glass bowl?",
        "answer": "no",
        "generated": [
            "coffee_mug_price = 2.93\nglass_bowl_price = 6.97\ntotal_money = 9.5\nif total_money > coffee_mug_price + glass_bowl_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [5, 6, 7]\ny_values = [0, 1, 4]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "Look at the following schedule. Nina just missed the 12.15 P.M. train at Ashland. What time is the next train?",
        "answer": "7:30 P.M.",
        "generated": [
            "ashland_train_times = ['12:00 P.M.', '12:15 P.M.', '7:30 P.M.', '9:45 P.M.', '10:00 P.M.']\nmissed_train_index = ashland_train_times.index('12:15 P.M.')\nnext_train = ashland_train_times[missed_train_index + 1]\nans = next_train"
        ],
        "results": [
            "7:30 P.M."
        ],
        "result_counter": {
            "7:30 P.M.": 1
        },
        "prediction": "7:30 P.M."
    },
    {
        "question": "Josh looked over his calendar to see how many times he had soccer practice each month. In which month did Josh have the most soccer practices?",
        "answer": "April",
        "generated": [
            "practice_dict = {'November': 24, 'March': 23, 'April': 28, 'May': 22}\nmax_value = max(practice_dict.values())\nfor key, value in practice_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "April"
        ],
        "result_counter": {
            "April": 1
        },
        "prediction": "April"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $960, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_960 = 10700\nquantity_supplied_price_960 = 7600\nif quantity_demanded_price_960 > quantity_supplied_price_960:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "An economics student recorded the amount of per-capita aid that the U.S. gave to various countries during the 1900s. Per capita, how much more aid did Pakistan receive in 1980 than in 1990?",
        "answer": 4.0,
        "generated": [
            "aid_pakistan_1980 = 14\naid_pakistan_1990 = 10\nans = aid_pakistan_1980 - aid_pakistan_1990"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A law firm in Weston kept track of how many hours were billed by each partner last year. What fraction of the hours were billed by Jamie? Simplify your answer.",
        "answer": "100/533",
        "generated": [
            "hours_billed = {'Jenna': 690, 'Maddie': 950, 'Jamie': 1000, 'Grayson': 910, 'Sidney': 890, 'Mitchell': 890}\ntotal_hours_billed = sum(hours_billed.values())\njamie_hours_billed = hours_billed['Jamie']\nans = jamie_hours_billed / total_hours_billed"
        ],
        "results": [
            0.18761726078799248
        ],
        "result_counter": {
            "0.18761726078799248": 1
        },
        "prediction": 0.18761726078799248
    },
    {
        "question": "Elena has $0.74. Does she have enough to buy a shiny metal bead and a thick gray bead?",
        "answer": "yes",
        "generated": [
            "shiny_metal_bead = 0.28\nthick_gray_bead = 0.44\ntotal_money = 0.74\nif total_money >= shiny_metal_bead + thick_gray_bead:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Kamal kept track of the number of characters in each book he read. How many books had at least 30 characters but fewer than 50 characters?",
        "answer": 8.0,
        "generated": [
            "number_list = [21, 24, 36, 40, 40, 42, 43, 47, 48, 49, 51, 54]\nbooks_in_range = [num for num in number_list if 30 <= num < 50]\nans = len(books_in_range)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Tyler went on a bird watching trip and jotted down the number of birds he saw each day. What is the mode of the numbers?",
        "answer": 6.0,
        "generated": [
            "bird_counts = [2, 6, 6, 2, 6]\nfrom collections import Counter\ncount_dict = Counter(bird_counts)\nmode = max(count_dict, key=count_dict.get)\nans = mode"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Tammy has $1.06. Does she have enough to buy a tangerine and a nectarine?",
        "answer": "yes",
        "generated": [
            "tangerine_price = 0.69\nnectarine_price = 0.33\ntotal_money = 1.06\nif total_money >= tangerine_price + nectarine_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Cody's Candies has been studying how much chocolate people have been eating in different countries. In 2002, how much more chocolate did Denmark consume per capita than Australia?",
        "answer": 5.0,
        "generated": [
            "denmark_2002 = 9\naustralia_2002 = 4\nans = denmark_2002 - australia_2002"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "Damon counted the number of ducks at each pond in the city. How many ponds had at least 50 ducks but fewer than 68 ducks?",
        "answer": 5.0,
        "generated": [
            "ducks_per_pond = [40, 44, 45, 46, 52, 54, 61, 62, 63, 69, 70, 71, 74, 75, 76, 79]\nponds_in_range = [x for x in ducks_per_pond if 50 <= x < 68]\nans = len(ponds_in_range)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "Mr. Kerr recorded the scores of his students on the most recent math quiz. How many students scored more than 9?",
        "answer": 13.0,
        "generated": [
            "score_frequency = {5: 8, 6: 6, 7: 2, 8: 19, 9: 10, 10: 13}\nstudents_more_than_9 = score_frequency[10]\nans = students_more_than_9"
        ],
        "results": [
            13.0
        ],
        "result_counter": {
            "13.0": 1
        },
        "prediction": 13.0
    },
    {
        "question": "How much money does Ernest need to buy a baking dish and a mixing bowl?",
        "answer": 15.0,
        "generated": [
            "baking_dish_price = 6\nmixing_bowl_price = 9\nans = baking_dish_price + mixing_bowl_price"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "The players on a quiz show received the following scores. What is the mode of the numbers?",
        "answer": 69.0,
        "generated": [
            "from collections import Counter\n\nscores = [65, 69, 71, 69, 65, 71, 69, 69]\nscore_counts = Counter(scores)\nmode = score_counts.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            69.0
        ],
        "result_counter": {
            "69.0": 1
        },
        "prediction": 69.0
    },
    {
        "question": "On a camping trip, Clara kept a log of the types of snakes she saw. She noted their colors and approximate lengths. What is the probability that a randomly selected snake is red and 1 foot long? Simplify any fractions.",
        "answer": "4/17",
        "generated": [
            "total_snakes = 4 + 3 + 5 + 5\nred_1_foot_long = 4\nans = red_1_foot_long / total_snakes"
        ],
        "results": [
            0.23529411764705882
        ],
        "result_counter": {
            "0.23529411764705882": 1
        },
        "prediction": 0.23529411764705882
    },
    {
        "question": "Dr. Wagner, a pediatrician, weighed all the children who recently visited his office. How many children weighed at least 60 pounds but less than 70 pounds?",
        "answer": 2.0,
        "generated": [
            "stem_leaf = {\n    2: [8],\n    3: [],\n    4: [0],\n    5: [4, 9],\n    6: [3, 8],\n    7: [8],\n    8: [],\n    9: [0]\n}\n\nchildren_in_range = stem_leaf[6]\nans = len(children_in_range)"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "Look at the following schedule. When does the unicycle rider's performance begin?",
        "answer": "8:10 P.M.",
        "generated": [
            "performances = {\n    'the jugglers': ('4:10 P.M.', '4:15 P.M.'),\n    'the trapeze artists': ('4:25 P.M.', '4:45 P.M.'),\n    'the strongman': ('5:00 P.M.', '5:05 P.M.'),\n    'the stuntman': ('5:15 P.M.', '5:55 P.M.'),\n    'the tightrope walkers': ('6:00 P.M.', '6:35 P.M.'),\n    'the magician': ('6:40 P.M.', '7:20 P.M.'),\n    'the clowns': ('7:35 P.M.', '8:05 P.M.'),\n    'the unicycle rider': ('8:10 P.M.', '8:35 P.M.')\n}\n\nans = performances['the unicycle rider'][0]"
        ],
        "results": [
            "8:10 P.M."
        ],
        "result_counter": {
            "8:10 P.M.": 1
        },
        "prediction": "8:10 P.M."
    },
    {
        "question": "The school district compared how many math teachers each high school has. What is the mean of the numbers?",
        "answer": 7.0,
        "generated": [
            "number_of_math_teachers = [6, 8, 10, 9, 5, 6, 5, 7]\nans = sum(number_of_math_teachers) / len(number_of_math_teachers)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "This is Duncan's complete financial record for July. On July 5, how much money did Duncan make?",
        "answer": 15.0,
        "generated": [
            "received_on_july_5 = 15.00\nans = received_on_july_5"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "How much money does Donald need to buy a fish bowl and a bag of birdseed?",
        "answer": 14.0,
        "generated": [
            "fish_bowl_price = 5\nbirdseed_price = 9\nans = fish_bowl_price + birdseed_price"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "A taxi cab driver tracked how many miles she drove each month. How many more miles did the taxi cab driver drive in July than in August?",
        "answer": 2154.0,
        "generated": [
            "miles_july = 3229\nmiles_august = 1075\nans = miles_july - miles_august"
        ],
        "results": [
            2154.0
        ],
        "result_counter": {
            "2154.0": 1
        },
        "prediction": 2154.0
    },
    {
        "question": "Emilia counted the number of pairs of shoes for sale at each of the shoe stores in the mall. How many stores have at least 60 pairs of shoes but fewer than 100 pairs of shoes?",
        "answer": 4.0,
        "generated": [
            "shoe_counts = [44, 50, 56, 60, 84, 89, 90]\nans = sum(60 <= count < 100 for count in shoe_counts)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A math textbook explains probability by showing a set of cards numbered 4 through 9 and showing the number of people who might draw each card. How many people are there in all?",
        "answer": 57.0,
        "generated": [
            "number_drawn_frequency = [1, 9, 8, 16, 11, 12]\nans = sum(number_drawn_frequency)"
        ],
        "results": [
            57.0
        ],
        "result_counter": {
            "57.0": 1
        },
        "prediction": 57.0
    },
    {
        "question": "Brianna conducted a blind taste test on some of her friends in order to determine if organic fruits tasted different than non-organic fruits. Each friend ate one type of fruit. What is the probability that a randomly selected friend preferred non-organic and tasted apples? Simplify any fractions.",
        "answer": "1/11",
        "generated": [
            "total_friends = 3 + 4 + 1 + 3\nnon_organic_apples = 1\nans = non_organic_apples / total_friends"
        ],
        "results": [
            0.09090909090909091
        ],
        "result_counter": {
            "0.09090909090909091": 1
        },
        "prediction": 0.09090909090909091
    },
    {
        "question": "Matthew has $428.00. How much money will Matthew have left if he buys a king snake and a bearded dragon?",
        "answer": 191.0,
        "generated": [
            "king_snake_price = 119.00\nbearded_dragon_price = 118.00\ntotal_money = 428.00\nmoney_left = total_money - (king_snake_price + bearded_dragon_price)\nans = money_left"
        ],
        "results": [
            191.0
        ],
        "result_counter": {
            "191.0": 1
        },
        "prediction": 191.0
    },
    {
        "question": "Each box has 5 yogurt pops. How many yogurt pops are in 6 boxes?",
        "answer": 30.0,
        "generated": [
            "yogurt_pops_per_box = 5\nnumber_of_boxes = 6\nans = yogurt_pops_per_box * number_of_boxes"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "Each shelf has 10 plates. How many plates are on 3 shelves?",
        "answer": 30.0,
        "generated": [
            "plates_per_shelf = 10\nnumber_of_shelves = 3\nans = plates_per_shelf * number_of_shelves"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "How much money does Lacey need to buy an orange T-shirt, a pair of white socks, and a pair of shorts?",
        "answer": 16.0,
        "generated": [
            "orange_tshirt = 7\nwhite_socks = 4\nshorts = 5\nans = orange_tshirt + white_socks + shorts"
        ],
        "results": [
            16.0
        ],
        "result_counter": {
            "16.0": 1
        },
        "prediction": 16.0
    },
    {
        "question": "Every year Ashland has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2010 and 2011?",
        "answer": 3.0,
        "generated": [
            "winning_time_2010 = 30\nwinning_time_2011 = 33\nans = winning_time_2011 - winning_time_2010"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "A shipping company keeps track of the number of boxes in each shipment they send out. How many shipments had at least 10 boxes?",
        "answer": 23.0,
        "generated": [
            "stem_leaf_data = {\n    1: [0, 0, 2, 6, 8],\n    2: [4, 6],\n    3: [],\n    4: [2, 2, 4, 8, 9],\n    5: [1, 3, 6],\n    6: [2, 2, 3, 8, 9, 9],\n    7: [3, 7]\n}\n\nshipments_with_at_least_10_boxes = 0\nfor stem, leaves in stem_leaf_data.items():\n    if stem >= 2:\n        shipments_with_at_least_10_boxes += len(leaves)\n\nans = shipments_with_at_least_10_boxes"
        ],
        "results": [
            18.0
        ],
        "result_counter": {
            "18.0": 1
        },
        "prediction": 18.0
    },
    {
        "question": "A county agency recorded the money donated to several charitable causes over time. In May, which cause raised the least money?",
        "answer": "hunger",
        "generated": [
            "donations_in_may = {'hunger': 2, 'parks': 4, 'education': 7, 'medical research': 9}\nmin_value = min(donations_in_may.values())\nfor key, value in donations_in_may.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "hunger"
        ],
        "result_counter": {
            "hunger": 1
        },
        "prediction": "hunger"
    },
    {
        "question": "Ernest designs bow ties for a local boutique store. The store manager counted the ties currently on display, tracking them by material and shape. What is the probability that a randomly selected bow tie is made of suede and is shaped like a butterfly? Simplify any fractions.",
        "answer": "2/7",
        "generated": [
            "total_bow_ties = 1 + 3 + 4 + 6\nsuede_butterfly = 4\nans = suede_butterfly / total_bow_ties"
        ],
        "results": [
            0.2857142857142857
        ],
        "result_counter": {
            "0.2857142857142857": 1
        },
        "prediction": 0.2857142857142857
    },
    {
        "question": "As part of a statistics project, a math class weighed all the children who were willing to participate. What is the weight of the lightest child?",
        "answer": 10.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nweights_list = [10, 15, 19, 22, 29, 29, 29, 32, 33, 39, 42, 42, 46]\nans = min(weights_list)"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "A business magazine surveyed its readers about their commute times. How many commutes are less than 51 minutes?",
        "answer": 6.0,
        "generated": [
            "commute_times = [30, 38, 41, 44, 44, 50, 51, 52, 57, 57, 62, 65, 67, 69, 69]\ncommutes_less_than_51 = [time for time in commute_times if time < 51]\nans = len(commutes_less_than_51)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "At a candy factory, butterscotch candies were packaged into bags of different sizes. How many bags had at least 29 butterscotch candies but fewer than 77 butterscotch candies?",
        "answer": 16.0,
        "generated": [
            "candy_number_list = [20, 28, 35, 42, 42, 43, 44, 45, 49, 49, 55, 56, 61, 63, 65, 68, 69, 72]\nbags_in_range = [num for num in candy_number_list if 29 <= num < 77]\nans = len(bags_in_range)"
        ],
        "results": [
            16.0
        ],
        "result_counter": {
            "16.0": 1
        },
        "prediction": 16.0
    },
    {
        "question": "Gabrielle purchased 2 pounds of blueberries, 1 pound of raspberries, and 5 pounds of loganberries. What was the total cost?",
        "answer": 36.18,
        "generated": [
            "loganberries_price = 5.88\nblueberries_price = 2.35\nstrawberries_price = 4.04\nraspberries_price = 2.08\n\ntotal_cost = (2 * blueberries_price) + (1 * raspberries_price) + (5 * loganberries_price)\nans = total_cost"
        ],
        "results": [
            36.18
        ],
        "result_counter": {
            "36.18": 1
        },
        "prediction": 36.18
    },
    {
        "question": "Ms. Cline reported her students' scores on the most recent quiz. How many students scored fewer than 80 points?",
        "answer": 23.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nquiz_scores = [40, 43, 43, 44, 44, 45, 45, 50, 50, 51, 52, 55, 55, 57, 58, 63, 64, 72, 73, 73, 74, 75, 79]\nans = len(quiz_scores)"
        ],
        "results": [
            23.0
        ],
        "result_counter": {
            "23.0": 1
        },
        "prediction": 23.0
    },
    {
        "question": "Mr. Christensen, a track coach, recorded the sizes of all the nearby track teams. How many teams have fewer than 50 members?",
        "answer": 12.0,
        "generated": [
            "team_sizes = [22, 24, 24, 33, 34, 38, 39, 40, 41, 44, 45, 46, 51, 53, 54, 54, 55, 55, 56, 56]\nteams_below_50 = [size for size in team_sizes if size < 50]\nans = len(teams_below_50)"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "How much money does Lester need to buy 8 chocolate cheesecakes?",
        "answer": 70.8,
        "generated": [
            "chocolate_cheesecake_price = 8.85\nquantity = 8\nans = chocolate_cheesecake_price * quantity"
        ],
        "results": [
            70.8
        ],
        "result_counter": {
            "70.8": 1
        },
        "prediction": 70.8
    },
    {
        "question": "The bird-watching club recorded how many birds its members saw each month. In which month did the club see the most birds?",
        "answer": "December",
        "generated": [
            "bird_dict = {'October': 125, 'November': 115, 'December': 152, 'January': 121}\nmax_value = max(bird_dict.values())\nfor key, value in bird_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "December"
        ],
        "result_counter": {
            "December": 1
        },
        "prediction": "December"
    },
    {
        "question": "After a spelling bee, some students compared how many words they spelled correctly. What is the range of the numbers?",
        "answer": 18.0,
        "generated": [
            "spelling_bee_results = [56, 54, 54, 57, 54, 65, 72]\nans = max(spelling_bee_results) - min(spelling_bee_results)"
        ],
        "results": [
            18.0
        ],
        "result_counter": {
            "18.0": 1
        },
        "prediction": 18.0
    },
    {
        "question": "The players on a quiz show received the following scores. What is the mean of the numbers?",
        "answer": 7.0,
        "generated": [
            "quiz_show_scores = [9, 9, 4, 7, 3, 8, 9]\nans = sum(quiz_show_scores) / len(quiz_show_scores)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "The city recorded how many fire hydrants there are on each street. What is the mode of the numbers?",
        "answer": 3.0,
        "generated": [
            "hydrants = [3, 6, 3, 3, 7, 6, 1, 7]\nhydrant_count = {}\nfor hydrant in hydrants:\n    if hydrant in hydrant_count:\n        hydrant_count[hydrant] += 1\n    else:\n        hydrant_count[hydrant] = 1\n\nmax_count = max(hydrant_count.values())\nmode = [key for key, value in hydrant_count.items() if value == max_count]\nans = mode[0]"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "How much money does Tina need to buy 5 denim skirts and 4 purple dresses?",
        "answer": 65.63,
        "generated": [
            "denim_skirt_price = 8.47\npurple_dress_price = 5.82\ntotal_cost = (5 * denim_skirt_price) + (4 * purple_dress_price)\nans = total_cost"
        ],
        "results": [
            65.63
        ],
        "result_counter": {
            "65.63": 1
        },
        "prediction": 65.63
    },
    {
        "question": "Look at the following schedule. When does lap swim end?",
        "answer": "3:35 P.M.",
        "generated": [
            "ans = '3:35 P.M.'"
        ],
        "results": [
            "3:35 P.M."
        ],
        "result_counter": {
            "3:35 P.M.": 1
        },
        "prediction": "3:35 P.M."
    },
    {
        "question": "Winchester Flooring tracked the number of broken tiles in each shipment it received last year. What is the largest number of broken tiles?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbroken_tiles_number_list = [11, 21, 27, 29, 32, 32, 37, 52, 58, 59, 62, 63, 63, 66, 67, 77, 80, 85, 87, 90]\nans = max(broken_tiles_number_list)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "For a science fair project, Oliver tracked the temperature each day. How many temperature readings were exactly 19\u00b0C?",
        "answer": 4.0,
        "generated": [
            "temperature_list = [11, 18, 19, 19, 19, 19, 20, 23, 24, 33, 37, 38, 40]\nans = temperature_list.count(19)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A farmer counted the number of apples on each tree in her orchard. How many trees have at least 80 apples?",
        "answer": 5.0,
        "generated": [
            "apples_per_tree_list = [42, 51, 52, 53, 60, 61, 61, 73, 76, 79, 81, 81, 85, 89, 90]\ntrees_with_80_or_more_apples = [tree for tree in apples_per_tree_list if tree >= 80]\nans = len(trees_with_80_or_more_apples)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "A pet store owner had his staff count the number of fish in each tank. What is the smallest number of fish per tank?",
        "answer": 11.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nfish_number_list = [11, 15, 17, 22, 24, 26, 27, 28, 31, 31, 35, 42, 43, 46, 49, 57, 63, 63, 67, 76, 78, 81, 83]\nans = min(fish_number_list)"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "Eliana is looking at the price of new cell phones online. Her favorite company, OrangeTech, has a special this weekend. Eliana can add an upgrade to a phone for an additional cost, or she can buy a used phone to get a discount. The change in price for each option is shown in the table. Which option results in a greater change in price?",
        "answer": "buying a used phone",
        "generated": [
            "upgrade_price = 60\nused_phone_discount = -75\nif abs(upgrade_price) > abs(used_phone_discount):\n    ans = \"adding an upgrade\"\nelse:\n    ans = \"buying a used phone\""
        ],
        "results": [
            "buying a used phone"
        ],
        "result_counter": {
            "buying a used phone": 1
        },
        "prediction": "buying a used phone"
    },
    {
        "question": "Justine's P.E. class participated in a push-up competition, and Justine wrote down how many push-ups each person could do. How many people did at least 60 push-ups?",
        "answer": 11.0,
        "generated": [
            "push_ups_list = [48, 55, 56, 63, 66, 67, 67, 71, 73, 73, 75, 77, 77, 78]\nans = sum(1 for push_ups in push_ups_list if push_ups >= 60)"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "After growing tired of squinting while driving, Erik went shopping for a pair of sunglasses. He tried on glasses with different frames and lenses. What is the probability that a randomly selected pair of sunglasses has browline frames and polarized lenses? Simplify any fractions.",
        "answer": "4/15",
        "generated": [
            "total_sunglasses = (2 + 5) + (4 + 4)\nbrowline_polarized = 4\nans = browline_polarized / total_sunglasses"
        ],
        "results": [
            0.26666666666666666
        ],
        "result_counter": {
            "0.26666666666666666": 1
        },
        "prediction": 0.26666666666666666
    },
    {
        "question": "The Lexington Soup Company recorded the number of rotten tomatoes in each barrel it received. How many barrels had at least 20 rotten tomatoes?",
        "answer": 5.0,
        "generated": [
            "barrels_with_20_or_more_rotten_tomatoes = [20, 30, 32, 70, 74, 84, 90]\nans = len(barrels_with_20_or_more_rotten_tomatoes)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Christina has $0.21. How much money will Christina have left if she buys an orange ribbon and a shiny red button?",
        "answer": 0.08,
        "generated": [
            "orange_ribbon_price = 0.06\nshiny_red_button_price = 0.07\ntotal_money = 0.21\nmoney_left = total_money - (orange_ribbon_price + shiny_red_button_price)\nans = money_left"
        ],
        "results": [
            0.07999999999999999
        ],
        "result_counter": {
            "0.07999999999999999": 1
        },
        "prediction": 0.07999999999999999
    },
    {
        "question": "A gymnast jotted down the number of cartwheels she did each day. What is the mean of the numbers?",
        "answer": 8.0,
        "generated": [
            "number_of_cartwheels = [8, 6, 10, 7, 9]\nans = sum(number_of_cartwheels) / len(number_of_cartwheels)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Dr. Rudd, a pediatrician, weighed all the children who recently visited his office. How many children weighed less than 50 pounds?",
        "answer": 23.0,
        "generated": [
            "weights = [12, 12, 12, 14, 16, 18, 18, 22, 22, 23, 29, 35, 37, 38, 38, 39, 40, 42, 43, 43, 45, 47, 47]\nchildren_under_50 = [weight for weight in weights if weight < 50]\nans = len(children_under_50)"
        ],
        "results": [
            23.0
        ],
        "result_counter": {
            "23.0": 1
        },
        "prediction": 23.0
    },
    {
        "question": "Mona went to the store and bought 3+3/4 pounds of fruit salad. How much did she spend?",
        "answer": 15.0,
        "generated": [
            "fruit_salad_price_per_pound = 4\nfruit_salad_weight = 3 + 3/4\nans = fruit_salad_price_per_pound * fruit_salad_weight"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "An Idaho farmer has been monitoring crop prices over time. Per cwt, how much did Timothy seed cost in 2005?",
        "answer": 7.0,
        "generated": [
            "timothy_seed_2005 = 7\nans = timothy_seed_2005"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "To figure out how many vacation days she had left to use, Erin looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2017 and 2018?",
        "answer": 8.0,
        "generated": [
            "vacation_days_2017 = 26\nvacation_days_2018 = 34\nans = vacation_days_2018 - vacation_days_2017"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Arlington will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming at least 2 times?",
        "answer": 34.0,
        "generated": [
            "number_of_times_frequency = {1: 4, 2: 8, 3: 3, 4: 16, 5: 7}\nans = sum([frequency for times, frequency in number_of_times_frequency.items() if times >= 2])"
        ],
        "results": [
            34.0
        ],
        "result_counter": {
            "34.0": 1
        },
        "prediction": 34.0
    },
    {
        "question": "A farm equipment company kept a record of the number of tractors made each month. In which month did the company make the most tractors?",
        "answer": "September",
        "generated": [
            "tractors_dict = {'July': 353, 'August': 332, 'September': 375, 'October': 357}\nmax_value = max(tractors_dict.values())\nfor key, value in tractors_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "September"
        ],
        "result_counter": {
            "September": 1
        },
        "prediction": "September"
    },
    {
        "question": "Mrs. Freeman kept track of her students' scores on last year's final exam. What is the highest score?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nexam_scores = [15, 22, 39, 52, 64, 71, 76, 87, 90]\nans = max(exam_scores)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "While hanging Christmas lights for neighbors, Paul counted the number of broken lights on each string. How many strings had at least 10 broken lights but less than 20 broken lights?",
        "answer": 3.0,
        "generated": [
            "broken_lights_list = [14, 18, 18, 28, 32, 34, 35, 41, 43, 47, 53, 57, 59, 69, 75, 76]\nstrings_with_10_to_20_lights = [x for x in broken_lights_list if 10 <= x < 20]\nans = len(strings_with_10_to_20_lights)"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "yes",
        "generated": [
            "x_values = [17, 10, 6]\nif len(x_values) == len(set(x_values)):\n    ans = 'yes'\nelse:\n    ans = 'no'"
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "What is the total cost for 5 pounds of hazelnuts?",
        "answer": 51.45,
        "generated": [
            "hazelnuts_price_per_lb = 10.29\ntotal_cost = 5 * hazelnuts_price_per_lb\nans = total_cost"
        ],
        "results": [
            51.449999999999996
        ],
        "result_counter": {
            "51.449999999999996": 1
        },
        "prediction": 51.449999999999996
    },
    {
        "question": "Robert, who just won the election for student body president at Lakeside Middle School, tallied how many votes he received from each grade. What fraction of his votes were from the eighth grade? Simplify your answer.",
        "answer": "20/179",
        "generated": [
            "total_votes = 810 + 780 + 200\neighth_grade_votes = 200\nans = eighth_grade_votes / total_votes"
        ],
        "results": [
            0.11173184357541899
        ],
        "result_counter": {
            "0.11173184357541899": 1
        },
        "prediction": 0.11173184357541899
    },
    {
        "question": "The players on a quiz show received the following scores. What is the mode of the numbers?",
        "answer": 2.0,
        "generated": [
            "from collections import Counter\n\nscores = [2, 2, 6, 6, 2]\nscore_counts = Counter(scores)\nmode = score_counts.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "A technical support line tracked how many calls it received each day. On which day did the support line receive the fewest calls?",
        "answer": "Thursday",
        "generated": [
            "calls_dict = {'Monday': 454, 'Tuesday': 442, 'Wednesday': 452, 'Thursday': 425}\nmin_calls = min(calls_dict.values())\nfor day, calls in calls_dict.items():\n    if calls == min_calls:\n        ans = day"
        ],
        "results": [
            "Thursday"
        ],
        "result_counter": {
            "Thursday": 1
        },
        "prediction": "Thursday"
    },
    {
        "question": "Amy surveyed people at the amusement park where she works and asked them how many times they visited last year. How many people went to an amusement park fewer than 2 times?",
        "answer": 6.0,
        "generated": [
            "frequency_dict = {1: 6, 2: 3, 3: 9, 4: 12}\nans = frequency_dict[1]"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Eli counted the number of problems on each of his tests. What is the largest number of problems?",
        "answer": 48.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nproblems_number_list = [10, 13, 14, 14, 14, 16, 16, 19, 23, 25, 25, 34, 35, 37, 41, 42, 44, 45, 45, 45, 45, 48]\nans = max(problems_number_list)"
        ],
        "results": [
            48.0
        ],
        "result_counter": {
            "48.0": 1
        },
        "prediction": 48.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $160, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_160 = 12500\nquantity_supplied_price_160 = 12200\nif quantity_demanded_price_160 > quantity_supplied_price_160:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "As part of a statistics project, a math class weighed all the children who were willing to participate. How many children weighed at least 19 pounds but less than 35 pounds?",
        "answer": 9.0,
        "generated": [
            "weights = [12, 21, 24, 28, 29, 31, 31, 32, 32, 34, 46, 46, 48]\nans = sum(19 <= weight < 35 for weight in weights)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "The Fairview Art Museum recorded how many finger puppets the children made at last Sunday's art workshop. How many children made more than 5 finger puppets?",
        "answer": 1.0,
        "generated": [
            "number_of_children_making_more_than_5_puppets = 1\nans = number_of_children_making_more_than_5_puppets"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "Sue has $54.00. Does she have enough to buy a bicycle and a swimsuit?",
        "answer": "no",
        "generated": [
            "bicycle_price = 43.00\nswimsuit_price = 15.00\ntotal_money = 54.00\nif total_money >= bicycle_price + swimsuit_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Megan counted the number of peanuts in each bag of trail mix. What is the largest number of peanuts?",
        "answer": 58.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\npeanuts_number_list = [23, 24, 25, 26, 27, 29, 36, 57, 58]\nans = max(peanuts_number_list)"
        ],
        "results": [
            58.0
        ],
        "result_counter": {
            "58.0": 1
        },
        "prediction": 58.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $20, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_20 = 21900\nquantity_supplied_price_20 = 6400\nif quantity_demanded_price_20 > quantity_supplied_price_20:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "A video store clerk looked up the number of movies checked out each day. What is the mean of the numbers?",
        "answer": 94.0,
        "generated": [
            "number_of_movies_checked_out = [96, 93, 95, 92, 94]\nans = sum(number_of_movies_checked_out) / len(number_of_movies_checked_out)"
        ],
        "results": [
            94.0
        ],
        "result_counter": {
            "94.0": 1
        },
        "prediction": 94.0
    },
    {
        "question": "A band from Arlington went on tour over the summer, and each member chipped in for the cost of gas. What fraction of the gas money came from Devon? Simplify your answer.",
        "answer": "69/127",
        "generated": [
            "total_gas_money = 480 + 690 + 100\ndevon_contribution = 690\nans = devon_contribution / total_gas_money"
        ],
        "results": [
            0.5433070866141733
        ],
        "result_counter": {
            "0.5433070866141733": 1
        },
        "prediction": 0.5433070866141733
    },
    {
        "question": "Several people compared how many Web pages they had visited. What is the mean of the numbers?",
        "answer": 7.0,
        "generated": [
            "number_of_web_pages = [5, 8, 9, 8, 4, 8]\nans = sum(number_of_web_pages) / len(number_of_web_pages)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Helen looked at her calendar to figure out how much time she spent babysitting each month. In which month did Helen babysit the most?",
        "answer": "February",
        "generated": [
            "babysitting_hours = {'December': 23, 'January': 22, 'February': 29, 'March': 26}\nmax_value = max(babysitting_hours.values())\nfor key, value in babysitting_hours.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "February"
        ],
        "result_counter": {
            "February": 1
        },
        "prediction": "February"
    },
    {
        "question": "How much more does baked chicken cost than a pepperoni pizza?",
        "answer": 7.0,
        "generated": [
            "baked_chicken_price = 20\npepperoni_pizza_price = 13\nans = baked_chicken_price - pepperoni_pizza_price"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $840, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_840 = 16000\nquantity_supplied_price_840 = 16800\nif quantity_demanded_price_840 > quantity_supplied_price_840:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "At their family reunion, the Stanley family recorded everyone's age. How many people are exactly 33 years old?",
        "answer": 1.0,
        "generated": [
            "age_list = [33, 34, 34, 42, 45, 64, 64, 72, 82]\nans = age_list.count(33)"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "Look at the following schedule. How long does it take to get from the pizza place to the train station?",
        "answer": "2 hours and 15 minutes",
        "generated": [
            "from datetime import datetime\n\npizza_place_departure = datetime.strptime(\"11:15 A.M.\", \"%I:%M %p\")\ntrain_station_arrival = datetime.strptime(\"1:30 P.M.\", \"%I:%M %p\")\ntime_difference = train_station_arrival - pizza_place_departure\n\noptions = {\n    \"2 hours and 15 minutes\": 2 * 60 + 15,\n    \"2 hours\": 2 * 60,\n    \"1 hour and 45 minutes\": 1 * 60 + 45,\n    \"1 hour and 30 minutes\": 1 * 60 + 30\n}\n\nfor option, minutes in options.items():\n    if minutes == time_difference.seconds // 60:\n        ans = option\n        break"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "Jaylen counted the number of pairs of shoes for sale at each of the shoe stores in the mall. What is the smallest number of pairs of shoes?",
        "answer": 34.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nshoe_number_list = [34, 36, 38, 40, 47, 48, 51, 55, 59, 66, 66, 71, 71, 75, 79, 80, 86, 87, 87, 90, 90]\nans = min(shoe_number_list)"
        ],
        "results": [
            34.0
        ],
        "result_counter": {
            "34.0": 1
        },
        "prediction": 34.0
    },
    {
        "question": "Compare pattern A to pattern B. Which statement is true? ",
        "answer": "Each term in pattern B is 10 times the corresponding term in pattern A.",
        "generated": [
            "pattern_A = [3, 6, 9, 12]\npattern_B = [30, 60, 90, 120]\n\ncomparison = [pattern_B[i] - pattern_A[i] for i in range(len(pattern_A))]\nif all(x == comparison[0] for x in comparison):\n    ans = 'Each term in pattern B is 27 more than the corresponding term in pattern A.'\nelse:\n    ans = 'Each term in pattern B is 10 times the corresponding term in pattern A.'"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "How much more does a Hawaiian vacation package cost than an Australian vacation package?",
        "answer": 210.0,
        "generated": [
            "hawaiian_vacation_cost = 741.00\naustralian_vacation_cost = 531.00\nans = hawaiian_vacation_cost - australian_vacation_cost"
        ],
        "results": [
            210.0
        ],
        "result_counter": {
            "210.0": 1
        },
        "prediction": 210.0
    },
    {
        "question": "At a school carnival, a curious student volunteer counted the number of times visitors to her booth spun the numbers 1 through 6. How many people spun a number less than 2?",
        "answer": 16.0,
        "generated": [
            "number_frequency = {1: 16, 2: 3, 3: 12, 4: 14, 5: 11, 6: 2}\nans = number_frequency[1]"
        ],
        "results": [
            16.0
        ],
        "result_counter": {
            "16.0": 1
        },
        "prediction": 16.0
    },
    {
        "question": "An Idaho farmer has been monitoring crop prices over time. Per cwt, how much did Timothy seed cost in 2004?",
        "answer": 7.0,
        "generated": [
            "timothy_seed_2004 = 7\nans = timothy_seed_2004"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "How much money does Henry need to buy 2 measuring tapes and a rake?",
        "answer": 16.98,
        "generated": [
            "measuring_tape_price = 4.87\nrake_price = 7.24\ntotal_money_needed = (2 * measuring_tape_price) + rake_price\nans = total_money_needed"
        ],
        "results": [
            16.98
        ],
        "result_counter": {
            "16.98": 1
        },
        "prediction": 16.98
    },
    {
        "question": "An economist tracked the amount of per-capita aid sent from the U.S. to various countries during the 1900s. Per capita, how much more aid did Libya receive in 1965 than in 1975?",
        "answer": 2.0,
        "generated": [
            "libya_aid_1965 = 4\nlibya_aid_1975 = 2\nans = libya_aid_1965 - libya_aid_1975"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "Several people compared how many Web pages they had visited. Who visited the most Web pages?",
        "answer": "Sofia",
        "generated": [
            "web_pages_dict = {'Kenji': 141, 'Alexis': 119, 'Josh': 147, 'Sofia': 174}\nmax_value = max(web_pages_dict.values())\nfor key, value in web_pages_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Sofia"
        ],
        "result_counter": {
            "Sofia": 1
        },
        "prediction": "Sofia"
    },
    {
        "question": "How much more does a denim skirt cost than a purple T-shirt?",
        "answer": 6.0,
        "generated": [
            "denim_skirt_cost = 9.00\npurple_tshirt_cost = 3.00\nans = denim_skirt_cost - purple_tshirt_cost"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Josie, an employee at Morgan's Convenience Store, looked at the sales of each of its soda products. On Friday, how much more did the convenience store make from Nature's Nectar sales than from Sweet Sips sales?",
        "answer": 12.0,
        "generated": [
            "natures_nectar_friday = 19\nsweet_sips_friday = 7\nans = natures_nectar_friday - sweet_sips_friday"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "A toy store employee counted the number of toys in each bin in the sale section. What is the smallest number of toys?",
        "answer": 35.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\ntoys_number_list = [35, 43, 46, 49, 49, 52, 60, 65, 75]\nans = min(toys_number_list)"
        ],
        "results": [
            35.0
        ],
        "result_counter": {
            "35.0": 1
        },
        "prediction": 35.0
    },
    {
        "question": "How much money does Walter need to buy a football helmet key chain and a puppy key chain?",
        "answer": 4.59,
        "generated": [
            "football_helmet_key_chain = 1.90\npuppy_key_chain = 2.69\nans = football_helmet_key_chain + puppy_key_chain"
        ],
        "results": [
            4.59
        ],
        "result_counter": {
            "4.59": 1
        },
        "prediction": 4.59
    },
    {
        "question": "The school district compared how many math teachers each high school has. What is the mode of the numbers?",
        "answer": 2.0,
        "generated": [
            "number_of_teachers = [2, 2, 6, 6, 2, 7, 7]\nteacher_count = {}\nfor num in number_of_teachers:\n    if num in teacher_count:\n        teacher_count[num] += 1\n    else:\n        teacher_count[num] = 1\nmode = max(teacher_count, key=teacher_count.get)\nans = mode"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "A teacher at Mills Middle School studied the absence rates of her students over the course of a few years. In 2006, which student had the most absences?",
        "answer": "Valentina",
        "generated": [
            "absences_2006 = {'Valentina': 18, 'Preston': 3, 'Liz': 4}\nmax_value = max(absences_2006.values())\nfor key, value in absences_2006.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Valentina"
        ],
        "result_counter": {
            "Valentina": 1
        },
        "prediction": "Valentina"
    },
    {
        "question": "A dentist was making note of his upcoming appointments with different aged patients and the reasons for their visits. What is the probability that a randomly selected appointment is for a broken tooth and is with patients 19-60 years old? Simplify any fractions.",
        "answer": "2/7",
        "generated": [
            "total_appointments = (4 + 2) + (4 + 4)\nbroken_tooth_19_to_60 = 4\nans = broken_tooth_19_to_60 / total_appointments"
        ],
        "results": [
            0.2857142857142857
        ],
        "result_counter": {
            "0.2857142857142857": 1
        },
        "prediction": 0.2857142857142857
    },
    {
        "question": "Each train car has 10 people. How many people are in 6 train cars?",
        "answer": 60.0,
        "generated": [
            "people_per_train_car = 10\nnumber_of_train_cars = 6\nans = people_per_train_car * number_of_train_cars"
        ],
        "results": [
            60.0
        ],
        "result_counter": {
            "60.0": 1
        },
        "prediction": 60.0
    },
    {
        "question": "How much more does a grandfather clock cost than a crystal vase?",
        "answer": 164.0,
        "generated": [
            "grandfather_clock_cost = 628.00\ncrystal_vase_cost = 464.00\nans = grandfather_clock_cost - crystal_vase_cost"
        ],
        "results": [
            164.0
        ],
        "result_counter": {
            "164.0": 1
        },
        "prediction": 164.0
    },
    {
        "question": "Megan looked at the dates of the digital photos on her computer to find out how many she had taken in the past 5 days. What is the mean of the numbers?",
        "answer": 7.0,
        "generated": [
            "number_of_photos = [9, 8, 9, 2, 7]\nans = sum(number_of_photos) / len(number_of_photos)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Stamford will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming fewer than 2 times?",
        "answer": 3.0,
        "generated": [
            "number_of_times_frequency = {1: 3, 2: 10, 3: 17, 4: 6}\nans = number_of_times_frequency[1]"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "A restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Thursday and Friday?",
        "answer": -4.0,
        "generated": [
            "thursday_time = 37\nfriday_time = 33\nans = friday_time - thursday_time"
        ],
        "results": [
            -4.0
        ],
        "result_counter": {
            "-4.0": 1
        },
        "prediction": -4.0
    },
    {
        "question": "Some students compared how many clubs they belong to. What is the mode of the numbers?",
        "answer": 7.0,
        "generated": [
            "from collections import Counter\n\nnumber_of_clubs = [5, 7, 5, 10, 7, 7]\nclub_count = Counter(number_of_clubs)\nmode = club_count.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "The parks department compared how many basketball hoops there are at each park. What is the range of the numbers?",
        "answer": 8.0,
        "generated": [
            "number_of_hoops = [10, 6, 9, 5, 2, 4, 3, 8]\nans = max(number_of_hoops) - min(number_of_hoops)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "The shop teacher, Mr. Johnston, wrote down how many picture frames the students made last week. How many students made exactly 6 picture frames?",
        "answer": 19.0,
        "generated": [
            "ans = 19"
        ],
        "results": [
            19.0
        ],
        "result_counter": {
            "19.0": 1
        },
        "prediction": 19.0
    },
    {
        "question": "Caleb has $0.34. Does he have enough to buy a piece of mint chocolate and a butterscotch candy?",
        "answer": "no",
        "generated": [
            "mint_chocolate_price = 0.24\nbutterscotch_candy_price = 0.13\ntotal_money = 0.34\nif total_money >= mint_chocolate_price + butterscotch_candy_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Sean paid attention to how many flowers he planted in the garden during the past 5 days. What is the range of the numbers?",
        "answer": 17.0,
        "generated": [
            "number_of_flowers = [22, 39, 29, 35, 33]\nans = max(number_of_flowers) - min(number_of_flowers)"
        ],
        "results": [
            17.0
        ],
        "result_counter": {
            "17.0": 1
        },
        "prediction": 17.0
    },
    {
        "question": "Trudy and her friends recorded their scores while playing a board game. How many people scored more than 8?",
        "answer": 23.0,
        "generated": [
            "score_frequency = {6: 7, 7: 6, 8: 20, 9: 4, 10: 19}\nans = sum([freq for score, freq in score_frequency.items() if score > 8])"
        ],
        "results": [
            23.0
        ],
        "result_counter": {
            "23.0": 1
        },
        "prediction": 23.0
    },
    {
        "question": "A real estate agent looked into how many houses were sold in different cities. What is the mode of the numbers?",
        "answer": 71.0,
        "generated": [
            "from collections import Counter\n\nhouse_sales = [71, 74, 71, 71, 74, 68, 68]\ncounter = Counter(house_sales)\nmode = counter.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            71.0
        ],
        "result_counter": {
            "71.0": 1
        },
        "prediction": 71.0
    },
    {
        "question": "Percy has $49.50. Does he have enough to buy a pair of brown pants and a pair of shorts?",
        "answer": "yes",
        "generated": [
            "brown_pants_price = 19.92\nshorts_price = 27.55\ntotal_money = 49.5\nif total_money > brown_pants_price + shorts_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "How much more does a roll of packaging tape cost than a large yellow envelope?",
        "answer": 0.1,
        "generated": [
            "packaging_tape_cost = 0.63\nlarge_yellow_envelope_cost = 0.53\nans = packaging_tape_cost - large_yellow_envelope_cost"
        ],
        "results": [
            0.09999999999999998
        ],
        "result_counter": {
            "0.09999999999999998": 1
        },
        "prediction": 0.09999999999999998
    },
    {
        "question": "Ms. Sherman reported her students' scores on the most recent quiz. How many students scored fewer than 58 points?",
        "answer": 12.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nquiz_scores = [20, 22, 26, 29, 34, 35, 37, 37, 38, 41, 49, 51, 58, 58]\nstudents_below_58 = [score for score in quiz_scores if score < 58]\nans = len(students_below_58)"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "How much money does Rhianna need to buy a can of fruit cocktail and a jar of pickles?",
        "answer": 3.78,
        "generated": [
            "fruit_cocktail_price = 2.23\npickles_price = 1.55\nans = fruit_cocktail_price + pickles_price"
        ],
        "results": [
            3.7800000000000002
        ],
        "result_counter": {
            "3.7800000000000002": 1
        },
        "prediction": 3.7800000000000002
    },
    {
        "question": "Mitchell recalled how many goals he had made in soccer practice each day. What is the median of the numbers?",
        "answer": 5.0,
        "generated": [
            "goals = [5, 0, 3, 8, 4, 10, 9]\ngoals = sorted(goals)\nmiddle1 = (len(goals) - 1) // 2\nmiddle2 = len(goals) // 2\nans = (goals[middle1] + goals[middle2]) / 2"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "A farmer recalled how many watermelons were harvested in the past 4 days. On which day were the fewest watermelons harvested?",
        "answer": "Thursday",
        "generated": [
            "watermelons_dict = {'Thursday': 40, 'Friday': 49, 'Saturday': 42, 'Sunday': 46}\nmin_value = min(watermelons_dict.values())\nfor key, value in watermelons_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Thursday"
        ],
        "result_counter": {
            "Thursday": 1
        },
        "prediction": "Thursday"
    },
    {
        "question": "Each roof has 5 seagulls. How many seagulls are on 3 roofs?",
        "answer": 15.0,
        "generated": [
            "seagulls_per_roof = 5\nnumber_of_roofs = 3\nans = seagulls_per_roof * number_of_roofs"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "The parks department compared how many basketball hoops there are at each park. What is the mode of the numbers?",
        "answer": 9.0,
        "generated": [
            "from collections import Counter\n\nnumber_of_hoops = [9, 8, 8, 9, 8, 9, 2, 9]\nhoops_counter = Counter(number_of_hoops)\nmode = hoops_counter.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Brianna has two part-time jobs as a children's entertainer. Here are her yearly finances. What is Brianna's gross income for the year?",
        "answer": 24850.0,
        "generated": [
            "earnings_birthday_party_princess = 11650\nearnings_childrens_plays = 13200\ngross_income = earnings_birthday_party_princess + earnings_childrens_plays\nans = gross_income"
        ],
        "results": [
            24850.0
        ],
        "result_counter": {
            "24850.0": 1
        },
        "prediction": 24850.0
    },
    {
        "question": "How much money does Erica need to buy 5 pairs of designer shoes?",
        "answer": 23690.0,
        "generated": [
            "shoe_price = 4738\nquantity = 5\nans = shoe_price * quantity"
        ],
        "results": [
            23690.0
        ],
        "result_counter": {
            "23690.0": 1
        },
        "prediction": 23690.0
    },
    {
        "question": "Addison worked at a water park last summer. Here are Addison's finances for the summer. What was Addison's net income last summer?",
        "answer": 6220.0,
        "generated": [
            "earnings = 6840\ntaxes = 620\nans = earnings - taxes"
        ],
        "results": [
            6220.0
        ],
        "result_counter": {
            "6220.0": 1
        },
        "prediction": 6220.0
    },
    {
        "question": "Cole graphed the temperature at noon for 6 days. What is the mode of the numbers?",
        "answer": 6.0,
        "generated": [
            "temperatures = [6, 6, 9, 6, 9, 7]\ntemperature_counts = {}\nfor temp in temperatures:\n    if temp in temperature_counts:\n        temperature_counts[temp] += 1\n    else:\n        temperature_counts[temp] = 1\n\nmode = max(temperature_counts, key=temperature_counts.get)\nans = mode"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "How much money does Rudy need to buy 4 whistles?",
        "answer": 5.68,
        "generated": [
            "whistle_price = 1.42\nnumber_of_whistles = 4\nans = whistle_price * number_of_whistles"
        ],
        "results": [
            5.68
        ],
        "result_counter": {
            "5.68": 1
        },
        "prediction": 5.68
    },
    {
        "question": "The owner of an orchard kept records about how many apples were picked in the past 5 days. How many apples in total were picked on Friday and Saturday?",
        "answer": 12276.0,
        "generated": [
            "apples_friday = 8131\napples_saturday = 4145\nans = apples_friday + apples_saturday"
        ],
        "results": [
            12276.0
        ],
        "result_counter": {
            "12276.0": 1
        },
        "prediction": 12276.0
    },
    {
        "question": "A crayon factory monitored the number of broken crayons per box during the past day. What is the smallest number of broken crayons?",
        "answer": 12.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbroken_crayons_number_list = [12, 27, 28, 30, 33, 50, 82, 88, 90]\nans = min(broken_crayons_number_list)"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [16, 17, 18]\ny_values = [2, 11, 18]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "Ms. McCormick reported her students' scores on the most recent quiz. How many students scored at least 65 points?",
        "answer": 3.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nquiz_scores = [22, 22, 29, 30, 32, 33, 41, 45, 48, 57, 59, 75, 81, 89]\nstudents_above_65 = [score for score in quiz_scores if score >= 65]\nans = len(students_above_65)"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Each soccer field has 5 sprinklers. How many sprinklers are on 4 soccer fields?",
        "answer": 20.0,
        "generated": [
            "sprinklers_per_field = 5\nnumber_of_fields = 4\nans = sprinklers_per_field * number_of_fields"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "This is Sandra's complete financial record for December. How much money did Sandra spend on December 29?",
        "answer": 7.8,
        "generated": [
            "expense_dec_29 = 7.80\nans = expense_dec_29"
        ],
        "results": [
            7.8
        ],
        "result_counter": {
            "7.8": 1
        },
        "prediction": 7.8
    },
    {
        "question": "How much more does a banana cream pie cost than a pumpkin pie?",
        "answer": 0.41,
        "generated": [
            "pumpkin_pie_price = 10.53\nbanana_cream_pie_price = 10.94\nans = banana_cream_pie_price - pumpkin_pie_price"
        ],
        "results": [
            0.41000000000000014
        ],
        "result_counter": {
            "0.41000000000000014": 1
        },
        "prediction": 0.41000000000000014
    },
    {
        "question": "A zoologist counted the number of reptiles at each of the state's zoos. Are there more reptiles at the Eastern Zoo or the Northside Zoo?",
        "answer": "Northside Zoo",
        "generated": [
            "reptiles_in_zoos = {\n    'Northside Zoo': {'Turtles': 8, 'Lizards': 12},\n    'Eastern Zoo': {'Turtles': 14, 'Lizards': 5},\n    'Wilderness Zoo': {'Turtles': 13, 'Lizards': 18},\n    'South Zoo': {'Turtles': 5, 'Lizards': 7},\n    'Pacific Zoo': {'Turtles': 13, 'Lizards': 15}\n}\n\nnorthside_reptiles = reptiles_in_zoos['Northside Zoo']['Turtles'] + reptiles_in_zoos['Northside Zoo']['Lizards']\neastern_reptiles = reptiles_in_zoos['Eastern Zoo']['Turtles'] + reptiles_in_zoos['Eastern Zoo']['Lizards']\n\nif northside_reptiles > eastern_reptiles:\n    ans = 'Northside Zoo'\nelse:\n    ans = 'Eastern Zoo'"
        ],
        "results": [
            "Northside Zoo"
        ],
        "result_counter": {
            "Northside Zoo": 1
        },
        "prediction": "Northside Zoo"
    },
    {
        "question": "Anna has $2.00. Does she have enough to buy a jar of tomato sauce and a bottle of hot sauce?",
        "answer": "yes",
        "generated": [
            "tomato_sauce_price = 0.94\nhot_sauce_price = 0.85\ntotal_money = 2.00\nif total_money > tomato_sauce_price + hot_sauce_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "This is Sandra's complete financial record for December. How much money did Sandra spend on December 29?",
        "answer": 7.8,
        "generated": [
            "expense_dec_29 = 7.80\nans = expense_dec_29"
        ],
        "results": [
            7.8
        ],
        "result_counter": {
            "7.8": 1
        },
        "prediction": 7.8
    },
    {
        "question": "A pretzel stand owner kept track of the number of pretzels sold during the past 3 days. How many more pretzels did the stand sell on Friday than on Sunday?",
        "answer": 202.0,
        "generated": [
            "pretzels_friday = 678\npretzels_sunday = 476\nans = pretzels_friday - pretzels_sunday"
        ],
        "results": [
            202.0
        ],
        "result_counter": {
            "202.0": 1
        },
        "prediction": 202.0
    },
    {
        "question": "A marketing research firm asked people how many times they visited the mall last month. How many people went to the mall twice last month?",
        "answer": 11.0,
        "generated": [
            "number_of_trips_frequency = {0: 10, 1: 7, 2: 11, 3: 20, 4: 9, 5: 5, 6: 15}\nans = number_of_trips_frequency[2]"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "Justin went to the store. He bought 3.4 pounds of cream cheese. How much did he spend?",
        "answer": 6.8,
        "generated": [
            "cream_cheese_price = 2\ncream_cheese_weight = 3.4\ntotal_cost = cream_cheese_price * cream_cheese_weight\nans = total_cost"
        ],
        "results": [
            6.8
        ],
        "result_counter": {
            "6.8": 1
        },
        "prediction": 6.8
    },
    {
        "question": "A pair of Sullivan High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2011 and 2012?",
        "answer": -2.0,
        "generated": [
            "games_won_2011 = 7\ngames_won_2012 = 5\nans = games_won_2012 - games_won_2011"
        ],
        "results": [
            -2.0
        ],
        "result_counter": {
            "-2.0": 1
        },
        "prediction": -2.0
    },
    {
        "question": "Dr. Pratt, a zoo director, researched ticket prices at other zoos around the country. Of the zoos shown, which charges the most for a child ticket?",
        "answer": "Bronx",
        "generated": [
            "child_ticket_prices = {'Central Park': 5, 'Southern Nevada': 6, 'Central Florida': 7, 'Bronx': 11, 'Boise': 3}\nmax_value = max(child_ticket_prices.values())\nfor key, value in child_ticket_prices.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Bronx"
        ],
        "result_counter": {
            "Bronx": 1
        },
        "prediction": "Bronx"
    },
    {
        "question": "Some teachers compared how many students are in their classes. What is the range of the numbers?",
        "answer": 21.0,
        "generated": [
            "number_of_students = [14, 35, 17, 27, 31, 19]\nans = max(number_of_students) - min(number_of_students)"
        ],
        "results": [
            21.0
        ],
        "result_counter": {
            "21.0": 1
        },
        "prediction": 21.0
    },
    {
        "question": "Sadie, a journalism student, counted the number of pages in several major magazines. What is the smallest number of pages?",
        "answer": 21.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\npages_number_list = [21, 35, 36, 42, 42, 49, 53, 53, 58, 59]\nans = min(pages_number_list)"
        ],
        "results": [
            21.0
        ],
        "result_counter": {
            "21.0": 1
        },
        "prediction": 21.0
    },
    {
        "question": "Chloe has $7,949.00. Does she have enough to buy a painting signed by a famous artist and a bat signed by a famous baseball player?",
        "answer": "no",
        "generated": [
            "painting_price = 1914\nbat_price = 6338\ntotal_money = 7949\nif total_money > painting_price + bat_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Professor Harrell released the results of yesterday's pop quiz. How many students scored fewer than 63 points?",
        "answer": 17.0,
        "generated": [
            "quiz_scores = [12, 12, 15, 17, 21, 23, 31, 32, 32, 33, 38, 46, 46, 47, 50, 58, 61, 75, 85]\nstudents_below_63 = [score for score in quiz_scores if score < 63]\nans = len(students_below_63)"
        ],
        "results": [
            17.0
        ],
        "result_counter": {
            "17.0": 1
        },
        "prediction": 17.0
    },
    {
        "question": "Each package has 10 pens. How many pens are in 4 packages?",
        "answer": 40.0,
        "generated": [
            "pens_per_package = 10\nnumber_of_packages = 4\nans = pens_per_package * number_of_packages"
        ],
        "results": [
            40.0
        ],
        "result_counter": {
            "40.0": 1
        },
        "prediction": 40.0
    },
    {
        "question": "Garrett buys 0.8 pounds of Concorde pears. What is the total cost?",
        "answer": 1.6,
        "generated": [
            "concorde_pears_price = 2\nweight = 0.8\ntotal_cost = concorde_pears_price * weight\nans = total_cost"
        ],
        "results": [
            1.6
        ],
        "result_counter": {
            "1.6": 1
        },
        "prediction": 1.6
    },
    {
        "question": "Look at the following schedule. Which movie ends at 6.20 P.M.?",
        "answer": "Return to Tumbleweed City",
        "generated": [
            "movie_end_times = {'Two Funny Guys in a Big City': '10:50 A.M.', 'A Mysterious Mystery': '11:55 A.M.', 'Witches and Wizards on Broomsticks': '12:45 P.M.', 'Time Traveler II': '1:50 P.M.', 'Cartoon Penguin Adventure': '4:05 P.M.', 'Aliens from Outer Space': '4:45 P.M.', 'Return to Tumbleweed City': '6:20 P.M.'}\nfor movie, end_time in movie_end_times.items():\n    if end_time == '6:20 P.M.':\n        ans = movie"
        ],
        "results": [
            "Return to Tumbleweed City"
        ],
        "result_counter": {
            "Return to Tumbleweed City": 1
        },
        "prediction": "Return to Tumbleweed City"
    },
    {
        "question": "Becky is looking at the price of new cell phones online. Her favorite company, OrangeTech, has a special this weekend. Becky can add an upgrade to a phone for an additional cost, or she can buy a used phone to get a discount. The change in price for each option is shown in the table. Which option results in a greater change in price?",
        "answer": "buying a used phone",
        "generated": [
            "upgrade_price = 60\nused_phone_discount = -75\nif abs(upgrade_price) > abs(used_phone_discount):\n    ans = 'adding an upgrade'\nelse:\n    ans = 'buying a used phone'"
        ],
        "results": [
            "buying a used phone"
        ],
        "result_counter": {
            "buying a used phone": 1
        },
        "prediction": "buying a used phone"
    },
    {
        "question": "How much money does Damon need to buy 6 magazines?",
        "answer": 11.34,
        "generated": [
            "magazine_price = 1.89\nnumber_of_magazines = 6\nans = magazine_price * number_of_magazines"
        ],
        "results": [
            11.34
        ],
        "result_counter": {
            "11.34": 1
        },
        "prediction": 11.34
    },
    {
        "question": "A pet store owner had her staff count the number of fish in each tank. How many tanks have at least 28 fish?",
        "answer": 14.0,
        "generated": [
            "fish_per_tank_list = [25, 30, 34, 42, 48, 49, 55, 57, 64, 67, 71, 72, 75, 82, 86]\ntanks_with_at_least_28_fish = [fish for fish in fish_per_tank_list if fish >= 28]\nans = len(tanks_with_at_least_28_fish)"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "Mabel likes watching the show Engineering Marvels. In last night's episode, the engineering team visited a tall skyscraper and a deep mine. A banner at the bottom of the screen showed the elevation of each location the team visited. Which location is closer to sea level?",
        "answer": "bottom of the mine",
        "generated": [
            "elevation_skyscraper = 275\nelevation_mine = -260\nif abs(elevation_skyscraper) < abs(elevation_mine):\n    ans = 'top of the skyscraper'\nelse:\n    ans = 'bottom of the mine'"
        ],
        "results": [
            "bottom of the mine"
        ],
        "result_counter": {
            "bottom of the mine": 1
        },
        "prediction": "bottom of the mine"
    },
    {
        "question": "The players on a quiz show received the following scores. Who had the lowest score?",
        "answer": "Patrick",
        "generated": [
            "quiz_show_scores = {'Barbara': 48, 'Hanson': 45, 'Ezra': 46, 'Patrick': 43}\nmin_score = min(quiz_show_scores.values())\nfor name, score in quiz_show_scores.items():\n    if score == min_score:\n        ans = name"
        ],
        "results": [
            "Patrick"
        ],
        "result_counter": {
            "Patrick": 1
        },
        "prediction": "Patrick"
    },
    {
        "question": "Some farmers compared how many sheep were in their flocks. What is the median of the numbers?",
        "answer": 67.0,
        "generated": [
            "sheep_numbers = [60, 86, 67, 57, 76]\nsheep_numbers = sorted(sheep_numbers)\nmiddle1 = (len(sheep_numbers) - 1) // 2\nmiddle2 = len(sheep_numbers) // 2\nans = (sheep_numbers[middle1] + sheep_numbers[middle2]) / 2"
        ],
        "results": [
            67.0
        ],
        "result_counter": {
            "67.0": 1
        },
        "prediction": 67.0
    },
    {
        "question": "Cassie's P.E. class participated in a push-up competition, and Cassie wrote down how many push-ups each person could do. How many people did fewer than 55 push-ups?",
        "answer": 10.0,
        "generated": [
            "push_ups = [23, 23, 27, 28, 38, 42, 44, 45, 50, 50, 56, 56, 58, 59, 65, 69, 76, 83, 90, 90]\nans = sum(1 for push_up in push_ups if push_up < 55)"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "Some students compared how many clubs they belong to. What is the range of the numbers?",
        "answer": 8.0,
        "generated": [
            "number_of_clubs = [8, 10, 10, 4, 7, 9, 2, 2]\nans = max(number_of_clubs) - min(number_of_clubs)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "How much more does a cookbook cost than a map of Africa?",
        "answer": 5.66,
        "generated": [
            "cookbook_price = 8.95\nmap_of_africa_price = 3.29\nans = cookbook_price - map_of_africa_price"
        ],
        "results": [
            5.659999999999999
        ],
        "result_counter": {
            "5.659999999999999": 1
        },
        "prediction": 5.659999999999999
    },
    {
        "question": "Some friends compared the sizes of their stuffed animal collections. Who has the most stuffed animals?",
        "answer": "Meg",
        "generated": [
            "stuffed_animals_dict = {'Meg': 263, 'Becky': 232, 'Savannah': 226, 'Evelyn': 236}\nmax_value = max(stuffed_animals_dict.values())\nfor key, value in stuffed_animals_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Meg"
        ],
        "result_counter": {
            "Meg": 1
        },
        "prediction": "Meg"
    },
    {
        "question": "Barry, a doctor's office receptionist, tracked the average waiting time at the office each month. According to the table, what was the rate of change between May and June?",
        "answer": 6.0,
        "generated": [
            "waiting_time_may = 28\nwaiting_time_june = 34\nans = waiting_time_june - waiting_time_may"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Reagan kept track of the number of characters in each book she read. How many books had at least 30 characters?",
        "answer": 15.0,
        "generated": [
            "number_list = [10, 12, 13, 17, 17, 20, 22, 24, 30, 34, 35, 36, 36, 38, 39, 40, 43, 46, 47, 54, 54, 57, 59]\nbooks_with_at_least_30_characters = [num for num in number_list if num >= 30]\nans = len(books_with_at_least_30_characters)"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "A pair of Knox High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2018 and 2019?",
        "answer": -3.0,
        "generated": [
            "games_won_2018 = 15\ngames_won_2019 = 12\nans = games_won_2019 - games_won_2018"
        ],
        "results": [
            -3.0
        ],
        "result_counter": {
            "-3.0": 1
        },
        "prediction": -3.0
    },
    {
        "question": "Several people compared how many Web pages they had visited. What is the range of the numbers?",
        "answer": 8.0,
        "generated": [
            "web_pages_visited = [7, 10, 10, 9, 4, 2, 8, 7]\nans = max(web_pages_visited) - min(web_pages_visited)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "An ice cream shop kept track of how many ice cream cones it sold in the past 4 days. On which day did the shop sell the most ice cream cones?",
        "answer": "Thursday",
        "generated": [
            "ice_cream_dict = {'Tuesday': 848, 'Wednesday': 847, 'Thursday': 887, 'Friday': 878}\nmax_value = max(ice_cream_dict.values())\nfor key, value in ice_cream_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Thursday"
        ],
        "result_counter": {
            "Thursday": 1
        },
        "prediction": "Thursday"
    },
    {
        "question": "The staff of a game show tracked the performance of all the contestants during the past season. How many people scored at least 45 points but fewer than 70 points?",
        "answer": 6.0,
        "generated": [
            "scores_list = [11, 14, 21, 21, 22, 22, 24, 27, 32, 32, 36, 39, 40, 43, 50, 51, 55, 59, 61, 66, 71, 73, 75, 76, 84]\ncount = 0\nfor score in scores_list:\n    if 45 <= score < 70:\n        count += 1\nans = count"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Some friends discussed the sizes of their coin collections. What is the range of the numbers?",
        "answer": 21.0,
        "generated": [
            "coin_collections = [76, 74, 86, 65, 65, 67, 80, 71]\nans = max(coin_collections) - min(coin_collections)"
        ],
        "results": [
            21.0
        ],
        "result_counter": {
            "21.0": 1
        },
        "prediction": 21.0
    },
    {
        "question": "Several people compared how many Web pages they had visited. What is the range of the numbers?",
        "answer": 7.0,
        "generated": [
            "web_pages_visited = [7, 7, 8, 9, 3, 4, 3, 2]\nans = max(web_pages_visited) - min(web_pages_visited)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Dr. Hatfield, a zoo director, researched ticket prices at other zoos around the country. How much does an adult ticket to the Cleveland Zoo cost?",
        "answer": 10.0,
        "generated": [
            "zoo_ticket_prices = {\n    'Los Angeles': {'Adult': 13, 'Child': 8},\n    'Houston': {'Adult': 10, 'Child': 6},\n    'Cleveland': {'Adult': 10, 'Child': 7},\n    'Brookfield': {'Adult': 12, 'Child': 8}\n}\n\nans = zoo_ticket_prices['Cleveland']['Adult']"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "Wanderlust Travel Agency asked customers when they plan to take their next trip. This frequency chart shows their answers. How many fewer people said their next trip will be in winter than in summer?",
        "answer": 34.0,
        "generated": [
            "winter_frequency = 13\nsummer_frequency = 47\nans = summer_frequency - winter_frequency"
        ],
        "results": [
            34.0
        ],
        "result_counter": {
            "34.0": 1
        },
        "prediction": 34.0
    },
    {
        "question": "How much money does Mitch need to buy a picnic table, an iron bench, and a lawn mower?",
        "answer": 1195.0,
        "generated": [
            "picnic_table_price = 529.00\niron_bench_price = 493.00\nlawn_mower_price = 173.00\ntotal_cost = picnic_table_price + iron_bench_price + lawn_mower_price\nans = total_cost"
        ],
        "results": [
            1195.0
        ],
        "result_counter": {
            "1195.0": 1
        },
        "prediction": 1195.0
    },
    {
        "question": "Fans of the Oakland baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2016 and 2017?",
        "answer": -4.0,
        "generated": [
            "games_won_2016 = 42\ngames_won_2017 = 38\nans = games_won_2017 - games_won_2016"
        ],
        "results": [
            -4.0
        ],
        "result_counter": {
            "-4.0": 1
        },
        "prediction": -4.0
    },
    {
        "question": "The members of the cycling club compared how many miles they biked last week. Who biked the fewest miles?",
        "answer": "Keith",
        "generated": [
            "miles_dict = {'Paul': 18, 'Anthony': 16, 'Keith': 12, 'Lauren': 19}\nmin_value = min(miles_dict.values())\nfor key, value in miles_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Keith"
        ],
        "result_counter": {
            "Keith": 1
        },
        "prediction": "Keith"
    },
    {
        "question": "A video store clerk looked up the number of movies checked out each day. How many more movies were checked out on Saturday than on Friday?",
        "answer": 424.0,
        "generated": [
            "movies_checked_out = {'Thursday': 387, 'Friday': 122, 'Saturday': 546}\ndifference = movies_checked_out['Saturday'] - movies_checked_out['Friday']\nans = difference"
        ],
        "results": [
            424.0
        ],
        "result_counter": {
            "424.0": 1
        },
        "prediction": 424.0
    },
    {
        "question": "Dalton kept a log of how many pages he read each month. In which month did Dalton read the most pages?",
        "answer": "July",
        "generated": [
            "pages_dict = {'June': 60, 'July': 69, 'August': 64, 'September': 61}\nmax_value = max(pages_dict.values())\nfor key, value in pages_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "July"
        ],
        "result_counter": {
            "July": 1
        },
        "prediction": "July"
    },
    {
        "question": "Warren found out the sizes of all the clubs at his school. How many clubs have exactly 64 members?",
        "answer": 0.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nclub_sizes = [12, 14, 16, 17, 17, 20, 32, 42, 44, 46, 52, 71, 76, 79, 80, 81, 84, 86, 89]\nnumber_of_clubs_with_64_members = club_sizes.count(64)\nans = number_of_clubs_with_64_members"
        ],
        "results": [
            0.0
        ],
        "result_counter": {
            "0.0": 1
        },
        "prediction": 0.0
    },
    {
        "question": "In considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people went to the library more than 3 times last month?",
        "answer": 7.0,
        "generated": [
            "number_of_trips_frequency = {1: 1, 2: 10, 3: 19, 4: 7}\nans = number_of_trips_frequency[4]"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Dwayne graphed the daily low temperature for 6 days. What is the mean of the numbers?",
        "answer": 9.0,
        "generated": [
            "daily_low_temperatures = [5, 14, 13, 9, 6, 7]\nans = sum(daily_low_temperatures) / len(daily_low_temperatures)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "A charity recorded how many donations it received each month. In which month did the charity receive the most donations?",
        "answer": "October",
        "generated": [
            "donations_dict = {'July': 353, 'August': 331, 'September': 358, 'October': 385}\nmax_value = max(donations_dict.values())\nfor key, value in donations_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "October"
        ],
        "result_counter": {
            "October": 1
        },
        "prediction": "October"
    },
    {
        "question": "Amanda has $11,631.00. Does she have enough to buy a funnel cake stand and an ice cream truck?",
        "answer": "no",
        "generated": [
            "funnel_cake_stand = 5293\nice_cream_truck = 6382\ntotal_money = 11631\nif total_money > funnel_cake_stand + ice_cream_truck:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "A statistician analyzed the number of runs scored by players last season. How many players scored at least 3 runs last season?",
        "answer": 12.0,
        "generated": [
            "runs_scored_frequency = {0: 1, 1: 9, 2: 12, 3: 8, 4: 4}\nplayers_with_at_least_3_runs = sum([frequency for runs, frequency in runs_scored_frequency.items() if runs >= 3])\nans = players_with_at_least_3_runs"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "Each office has 5 stools. How many stools are in 5 offices?",
        "answer": 25.0,
        "generated": [
            "number_of_offices = 5\nstools_per_office = 5\nans = number_of_offices * stools_per_office"
        ],
        "results": [
            25.0
        ],
        "result_counter": {
            "25.0": 1
        },
        "prediction": 25.0
    },
    {
        "question": "Paula has $13,967. Does she have enough to buy a pretzel stand and a popsicle stand?",
        "answer": "no",
        "generated": [
            "pretzel_stand_price = 8591\npopsicle_stand_price = 5600\ntotal_money = 13967\nif total_money > pretzel_stand_price + popsicle_stand_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "How much more does a hockey ticket cost than a football ticket?",
        "answer": 52.64,
        "generated": [
            "hockey_ticket_price = 69.12\nfootball_ticket_price = 16.48\nans = hockey_ticket_price - football_ticket_price"
        ],
        "results": [
            52.64
        ],
        "result_counter": {
            "52.64": 1
        },
        "prediction": 52.64
    },
    {
        "question": "A food manufacturer surveyed consumers about their macaroni and cheese consumption. How many people ate macaroni and cheese more than 1 time?",
        "answer": 57.0,
        "generated": [
            "times_eaten_more_than_1 = [19, 16, 12, 10]\nans = sum(times_eaten_more_than_1)"
        ],
        "results": [
            57.0
        ],
        "result_counter": {
            "57.0": 1
        },
        "prediction": 57.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [17, 18, 19]\ny_values = [2, 11, 20]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "Some students compared how many blocks they live from school. What is the mode of the numbers?",
        "answer": 7.0,
        "generated": [
            "from collections import Counter\n\nblocks = [6, 5, 5, 7, 6, 7, 7]\ncounter = Counter(blocks)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Shelley has $272.00. Does she have enough to buy a lawn mower and an iron bench?",
        "answer": "no",
        "generated": [
            "lawn_mower_price = 145.00\niron_bench_price = 140.00\ntotal_money = 272.00\nif total_money >= lawn_mower_price + iron_bench_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "A food critic counted the number of menu items at each restaurant in town. How many restaurants have exactly 24 menu items?",
        "answer": 4.0,
        "generated": [
            "stem_leaf_data = {\n    1: [0, 0, 2, 6],\n    2: [4, 4, 4, 4, 5, 7],\n    3: [4],\n    4: [0, 2, 5, 6, 8]\n}\n\ntarget_menu_items = 24\nstem = target_menu_items // 10\nleaf = target_menu_items % 10\n\nans = stem_leaf_data[stem].count(leaf)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "Donald went to the store. He bought 1/2 of a kilogram of purple beads. How much did he spend?",
        "answer": 1.0,
        "generated": [
            "purple_beads_price_per_kg = 2\namount_purchased = 0.5\nans = purple_beads_price_per_kg * amount_purchased"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "The county released data about how many schools there are in each town. What is the range of the numbers?",
        "answer": 6.0,
        "generated": [
            "number_of_schools = [10, 10, 7, 4, 6]\nans = max(number_of_schools) - min(number_of_schools)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "How much money does Kylie need to buy a ladder and a wrench?",
        "answer": 47.0,
        "generated": [
            "ladder_price = 36.00\nwrench_price = 11.00\nans = ladder_price + wrench_price"
        ],
        "results": [
            47.0
        ],
        "result_counter": {
            "47.0": 1
        },
        "prediction": 47.0
    },
    {
        "question": "How much money does Levi need to buy a ticket for a Hawaiian cruise and a ticket for a Caribbean cruise?",
        "answer": 13111.0,
        "generated": [
            "hawaiian_cruise = 7072.00\ncaribbean_cruise = 6039.00\nans = hawaiian_cruise + caribbean_cruise"
        ],
        "results": [
            13111.0
        ],
        "result_counter": {
            "13111.0": 1
        },
        "prediction": 13111.0
    },
    {
        "question": "The advertising agency counted the number of billboards in each city in the state. What is the largest number of billboards?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbillboards_number_list = [15, 22, 26, 28, 28, 33, 36, 36, 38, 38, 39, 47, 50, 50, 53, 59, 60, 62, 64, 69, 75, 87, 87, 90]\nans = max(billboards_number_list)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "Tanner went to the store and bought 5 pounds of cumin and 1 pound of cinnamon. How much did he spend?",
        "answer": 32.2,
        "generated": [
            "cumin_price = 5.12\ncinnamon_price = 6.60\ncumin_weight = 5\ncinnamon_weight = 1\ntotal_cost = (cumin_price * cumin_weight) + (cinnamon_price * cinnamon_weight)\nans = total_cost"
        ],
        "results": [
            32.2
        ],
        "result_counter": {
            "32.2": 1
        },
        "prediction": 32.2
    },
    {
        "question": "A law firm in Princeton kept track of how many hours were billed by each partner last year. What fraction of the hours were billed by Gordon? Simplify your answer.",
        "answer": "61/364",
        "generated": [
            "total_hours_billed = 870 + 790 + 810 + 560 + 610\ngordon_hours_billed = 610\nans = gordon_hours_billed / total_hours_billed"
        ],
        "results": [
            0.16758241758241757
        ],
        "result_counter": {
            "0.16758241758241757": 1
        },
        "prediction": 0.16758241758241757
    },
    {
        "question": "How much money does Destiny need to buy a math book and a dictionary?",
        "answer": 35.0,
        "generated": [
            "math_book_price = 19.00\ndictionary_price = 16.00\nans = math_book_price + dictionary_price"
        ],
        "results": [
            35.0
        ],
        "result_counter": {
            "35.0": 1
        },
        "prediction": 35.0
    },
    {
        "question": "Aiden's class recorded how many cans of food each student collected for their canned food drive. What is the median of the numbers?",
        "answer": 9.0,
        "generated": [
            "cans = [6, 10, 9, 9, 10]\ncans = sorted(cans)\nmiddle1 = (len(cans) - 1) // 2\nmiddle2 = len(cans) // 2\nans = (cans[middle1] + cans[middle2]) / 2"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Martin tracked the attendance at the school play. On which day did the fewest people attend the play?",
        "answer": "Thursday",
        "generated": [
            "tickets_dict = {'Tuesday': 317, 'Wednesday': 371, 'Thursday': 313, 'Friday': 337}\nmin_value = min(tickets_dict.values())\nfor key, value in tickets_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Thursday"
        ],
        "result_counter": {
            "Thursday": 1
        },
        "prediction": "Thursday"
    },
    {
        "question": "Edwin counted the number of pairs of shoes for sale at each of the shoe stores in the mall. How many stores have exactly 66 pairs of shoes?",
        "answer": 3.0,
        "generated": [
            "shoe_number_list = [29, 34, 39, 40, 47, 47, 57, 59, 65, 66, 66, 66, 68, 72, 73, 73, 74, 78, 80, 84]\nans = shoe_number_list.count(66)"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Logan surveyed people at the amusement park where he works and asked them how many times they visited last year. How many people went to an amusement park more than 2 times?",
        "answer": 22.0,
        "generated": [
            "trips_frequency = {1: 13, 2: 10, 3: 1, 4: 16, 5: 5}\nans = sum([frequency for trips, frequency in trips_frequency.items() if trips > 2])"
        ],
        "results": [
            22.0
        ],
        "result_counter": {
            "22.0": 1
        },
        "prediction": 22.0
    },
    {
        "question": "Some friends compared the sizes of their stuffed animal collections. Who has the fewest stuffed animals?",
        "answer": "Katie",
        "generated": [
            "stuffed_animals_dict = {'Isaac': 281, 'Edgar': 221, 'Justin': 282, 'Katie': 218}\nmin_value = min(stuffed_animals_dict.values())\nfor key, value in stuffed_animals_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Katie"
        ],
        "result_counter": {
            "Katie": 1
        },
        "prediction": "Katie"
    },
    {
        "question": "Pedro has $82. Does he have enough to buy a ballet ticket and an opera ticket?",
        "answer": "yes",
        "generated": [
            "ballet_ticket_price = 15\nopera_ticket_price = 65\ntotal_money = 82\nif total_money >= ballet_ticket_price + opera_ticket_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Look at the following schedule. Which class ends at 3.30 P.M.?",
        "answer": "tap dance class",
        "generated": [
            "class_end_times = {'hip hop dance class': '9:15 A.M.', 'swing dance class': '10:35 A.M.', 'modern dance class': '11:50 A.M.', 'ballroom dance class': '1:00 P.M.', 'advanced ballet class': '2:15 P.M.', 'tap dance class': '3:30 P.M.', 'salsa dance class': '5:15 P.M.', 'western dance class': '6:55 P.M.'}\nfor key, value in class_end_times.items():\n    if value == '3:30 P.M.':\n        ans = key"
        ],
        "results": [
            "tap dance class"
        ],
        "result_counter": {
            "tap dance class": 1
        },
        "prediction": "tap dance class"
    },
    {
        "question": "The bird watcher counted the number of birds in each flock that passed overhead. How many flocks had exactly 23 birds?",
        "answer": 2.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nflocks_with_23_birds = [23, 23, 37, 44, 54, 73]\nans = flocks_with_23_birds.count(23)"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "A business magazine surveyed its readers about their commute times. What is the longest commute time?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\ncommute_time_list = [26, 35, 38, 39, 40, 44, 44, 53, 55, 63, 65, 69, 69, 70, 72, 78, 81, 85, 88, 90]\nans = max(commute_time_list)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "Look at the following schedule. How long does it take to get from the doctor's office to the playground?",
        "answer": "2 hours and 45 minutes",
        "generated": [
            "departure_time_doctor_office = \"10:15 A.M.\"\narrival_time_playground = \"1:00 P.M.\"\n\nfrom datetime import datetime\n\ndeparture_time_doctor_office = datetime.strptime(departure_time_doctor_office, \"%I:%M %p\")\narrival_time_playground = datetime.strptime(arrival_time_playground, \"%I:%M %p\")\n\ntime_difference = arrival_time_playground - departure_time_doctor_office\ntime_difference_minutes = time_difference.seconds // 60\n\nif time_difference_minutes == 15:\n    ans = '15 minutes'\nelif time_difference_minutes == 150:\n    ans = '2 hours and 30 minutes'\nelif time_difference_minutes == 105:\n    ans = '1 hour and 45 minutes'\nelif time_difference_minutes == 165:\n    ans = '2 hours and 45 minutes'"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "The Lancaster Chamber of Commerce researched the number of employees working at local companies. How many companies have exactly 5 employees?",
        "answer": 2.0,
        "generated": [
            "stem_leaf_data = {\n    0: [5, 5, 7, 7, 9],\n    1: [],\n    2: [1, 1, 1, 6, 9, 9],\n    3: [0, 8, 9],\n    4: [2, 5],\n    5: [0, 0, 4, 4]\n}\n\ncompanies_with_5_employees = stem_leaf_data[0].count(5)\nans = companies_with_5_employees"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "A pet store owner had his staff count the number of fish in each tank. How many tanks have exactly 43 fish?",
        "answer": 4.0,
        "generated": [
            "fish_per_tank_list = [22, 30, 31, 36, 42, 43, 43, 43, 43, 44, 46, 47, 47, 52, 56, 56, 58, 59, 66, 69, 70, 77, 78]\nans = fish_per_tank_list.count(43)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "The board of commerce recorded how many employees work at each company. Which company has the fewest employees?",
        "answer": "Madison Corporation",
        "generated": [
            "company_employee_dict = {'Davidson Insurance': 668, 'Madison Corporation': 646, 'ABC Electronics': 648, 'Benson and Blakely': 684}\nmin_value = min(company_employee_dict.values())\nfor key, value in company_employee_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Madison Corporation"
        ],
        "result_counter": {
            "Madison Corporation": 1
        },
        "prediction": "Madison Corporation"
    },
    {
        "question": "After a spelling bee, some students compared how many words they spelled correctly. What is the mode of the numbers?",
        "answer": 45.0,
        "generated": [
            "from collections import Counter\n\nwords_spelled_correctly = [45, 45, 47, 44, 48, 47, 44, 45]\nword_count = Counter(words_spelled_correctly)\nmode = word_count.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            45.0
        ],
        "result_counter": {
            "45.0": 1
        },
        "prediction": 45.0
    },
    {
        "question": "Mike has $0.04. Does he have enough to buy a piece of floral stationery and a white note card?",
        "answer": "no",
        "generated": [
            "floral_stationery_price = 0.02\nwhite_note_card_price = 0.04\ntotal_money = 0.04\nif total_money >= floral_stationery_price + white_note_card_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Use the data to answer the question below. Is the following statement about our solar system true or false? Three-quarters of the planets are larger than Earth.",
        "answer": "false",
        "generated": [
            "planet_volumes = [6.08 * 10**10, 9.28 * 10**11, 1.08 * 10**12, 1.63 * 10**11, 1.43 * 10**15, 8.27 * 10**14, 6.83 * 10**13, 6.25 * 10**13]\nearth_volume = 1.08 * 10**12\nlarger_than_earth = [volume for volume in planet_volumes if volume > earth_volume]\nfraction_larger_than_earth = len(larger_than_earth) / len(planet_volumes)\n\nif fraction_larger_than_earth == 0.75:\n    ans = 'true'\nelse:\n    ans = 'false'"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "A crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 60 broken crayons?",
        "answer": 7.0,
        "generated": [
            "boxes_with_60_or_more_broken_crayons = [60, 62, 64, 71, 75, 88, 90, 90]\nans = len(boxes_with_60_or_more_broken_crayons)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "While hanging Christmas lights for neighbors, Zach counted the number of broken lights on each string. What is the largest number of broken lights?",
        "answer": 75.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbroken_lights_list = [21, 24, 29, 30, 32, 41, 43, 44, 55, 55, 56, 64, 65, 66, 66, 69, 72, 75]\nans = max(broken_lights_list)"
        ],
        "results": [
            75.0
        ],
        "result_counter": {
            "75.0": 1
        },
        "prediction": 75.0
    },
    {
        "question": "How much money does Ben need to buy a golf ball, a bicycle helmet, and a swimsuit?",
        "answer": 19.27,
        "generated": [
            "golf_ball_price = 2.33\nbicycle_helmet_price = 8.14\nswimsuit_price = 8.80\nans = golf_ball_price + bicycle_helmet_price + swimsuit_price"
        ],
        "results": [
            19.270000000000003
        ],
        "result_counter": {
            "19.270000000000003": 1
        },
        "prediction": 19.270000000000003
    },
    {
        "question": "Colette's class recorded how many states each student has visited. What is the mode of the numbers?",
        "answer": 8.0,
        "generated": [
            "from collections import Counter\n\nstates_visited = [2, 8, 3, 8, 8, 3, 2]\ncounter = Counter(states_visited)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "A technical support line tracked how many calls it received each day. How many more calls did the support line receive on Thursday than on Friday?",
        "answer": 318.0,
        "generated": [
            "thursday_calls = 825\nfriday_calls = 507\nans = thursday_calls - friday_calls"
        ],
        "results": [
            318.0
        ],
        "result_counter": {
            "318.0": 1
        },
        "prediction": 318.0
    },
    {
        "question": "A sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. Which country won fewer medals in 2004, Brazil or Finland?",
        "answer": "Finland",
        "generated": [
            "medals_2004 = {'Brazil': 10, 'Sweden': 7, 'Finland': 2}\nmin_value_2004 = min(medals_2004.values())\nfor country, medals in medals_2004.items():\n    if medals == min_value_2004:\n        ans = country"
        ],
        "results": [
            "Finland"
        ],
        "result_counter": {
            "Finland": 1
        },
        "prediction": "Finland"
    },
    {
        "question": "An agricultural agency is researching how much cheese people have been eating in different parts of the world. How much cheese was consumed per capita in Austria in 2006?",
        "answer": 17.0,
        "generated": [
            "cheese_consumption_austria_2006 = 17\nans = cheese_consumption_austria_2006"
        ],
        "results": [
            17.0
        ],
        "result_counter": {
            "17.0": 1
        },
        "prediction": 17.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [17, 18, 19]\ny_values = [20, 12, 4]\n\nslope1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "The members of the cycling club compared how many miles they biked last week. What is the median of the numbers?",
        "answer": 53.0,
        "generated": [
            "miles_biked = [58, 47, 53, 46, 57, 59, 50]\nmiles_biked = sorted(miles_biked)\nmiddle1 = (len(miles_biked) - 1) // 2\nmiddle2 = len(miles_biked) // 2\nans = (miles_biked[middle1] + miles_biked[middle2]) / 2"
        ],
        "results": [
            53.0
        ],
        "result_counter": {
            "53.0": 1
        },
        "prediction": 53.0
    },
    {
        "question": "A farm equipment company kept a record of the number of tractors made each month. In which month did the company make the most tractors?",
        "answer": "October",
        "generated": [
            "tractors_dict = {'October': 887, 'November': 848, 'December': 847, 'January': 878}\nmax_value = max(tractors_dict.values())\nfor key, value in tractors_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "October"
        ],
        "result_counter": {
            "October": 1
        },
        "prediction": "October"
    },
    {
        "question": "Cedarburg will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming exactly twice last month?",
        "answer": 2.0,
        "generated": [
            "number_of_times_frequency = {1: 15, 2: 2, 3: 4, 4: 5}\nans = number_of_times_frequency[2]"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [3, 4, 5]\ny_values = [8, 12, 16]\n\n# Calculate the differences between consecutive x and y values\nx_differences = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\ny_differences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if the differences are constant\nif all(x_differences[0] == x_diff for x_diff in x_differences) and all(y_differences[0] == y_diff for y_diff in y_differences):\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "Each year, the campers at Keith's summer camp try to set that summer's record for finishing the obstacle course as quickly as possible. According to the table, what was the rate of change between 2010 and 2011?",
        "answer": 1.0,
        "generated": [
            "record_times = {'2007': 29, '2008': 27, '2009': 24, '2010': 29, '2011': 30}\ntime_2010 = record_times['2010']\ntime_2011 = record_times['2011']\nans = time_2011 - time_2010"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "no",
        "generated": [
            "x_values = [0, 7, 0, 19]\ny_values = [5, 18, 9, 7]\n\nxy_pairs = list(zip(x_values, y_values))\nunique_x_values = set(x_values)\n\nans = \"yes\"\nfor x in unique_x_values:\n    y_values_for_x = [y for x_pair, y in xy_pairs if x_pair == x]\n    if len(y_values_for_x) > 1:\n        ans = \"no\"\n        break"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "Sadie went on a camping trip and logged the number of miles she hiked each day. What is the range of the numbers?",
        "answer": 11.0,
        "generated": [
            "miles_hiked = [9, 14, 20, 17, 16, 10]\nans = max(miles_hiked) - min(miles_hiked)"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "The architecture student counted the number of bricks in each building in her neighborhood. How many buildings have exactly 90 bricks?",
        "answer": 3.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbricks_per_building_list = [52, 54, 55, 65, 73, 74, 90, 90, 90]\ncount_90_bricks = bricks_per_building_list.count(90)\nans = count_90_bricks"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "A furniture store kept a record of how many couches it sold each day. What is the median of the numbers?",
        "answer": 7.0,
        "generated": [
            "couches_sold = [5, 4, 10, 9, 7]\ncouches_sold = sorted(couches_sold)\nmiddle1 = (len(couches_sold) - 1) // 2\nmiddle2 = len(couches_sold) // 2\nans = (couches_sold[middle1] + couches_sold[middle2]) / 2"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "How much money does Gordon need to buy a deer postcard and a roll of packaging tape?",
        "answer": 0.9,
        "generated": [
            "deer_postcard_price = 0.61\npackaging_tape_price = 0.29\nans = deer_postcard_price + packaging_tape_price"
        ],
        "results": [
            0.8999999999999999
        ],
        "result_counter": {
            "0.8999999999999999": 1
        },
        "prediction": 0.8999999999999999
    },
    {
        "question": "A gymnast jotted down the number of cartwheels she did each day. What is the mode of the numbers?",
        "answer": 11.0,
        "generated": [
            "from collections import Counter\n\ncartwheels = [11, 14, 10, 14, 11, 11, 10]\ncounter = Counter(cartwheels)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "Spencer's Candies has been studying how much chocolate people have been eating in different countries. How much chocolate was consumed per capita in Austria in 2005?",
        "answer": 9.0,
        "generated": [
            "chocolate_consumption = {\n    'Poland': {'2002': 3, '2005': 4},\n    'Australia': {'2002': 4, '2005': 5},\n    'Austria': {'2002': 8, '2005': 9},\n    'Switzerland': {'2002': 11, '2005': 10}\n}\n\nans = chocolate_consumption['Austria']['2005']"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "How much more does an ice cream truck cost than a funnel cake stand?",
        "answer": 154.0,
        "generated": [
            "ice_cream_truck_cost = 7785\nfunnel_cake_stand_cost = 7631\nans = ice_cream_truck_cost - funnel_cake_stand_cost"
        ],
        "results": [
            154.0
        ],
        "result_counter": {
            "154.0": 1
        },
        "prediction": 154.0
    },
    {
        "question": "The manager of Nonno's Pizza asked 40 customers if they prefer to have vegetables or no vegetables on their pizzas. This table shows the relative frequencies from the survey. How many more women than men prefer vegetables on their pizza?",
        "answer": 10.0,
        "generated": [
            "men_vegetables = 0.15\nwomen_vegetables = 0.40\ntotal_customers = 40\n\nmen_vegetables_customers = men_vegetables * total_customers\nwomen_vegetables_customers = women_vegetables * total_customers\n\nans = women_vegetables_customers - men_vegetables_customers"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "Kim Furniture Exports is shipping pieces of furniture made out of different types of wood. Of which type of wood are the fewest bookcases made?",
        "answer": "maple",
        "generated": [
            "bookcases = {'maple': 7, 'mahogany': 9, 'pine': 18, 'oak': 20}\nmin_value = min(bookcases.values())\nfor key, value in bookcases.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "maple"
        ],
        "result_counter": {
            "maple": 1
        },
        "prediction": "maple"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $815, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_815 = 10900\nquantity_supplied_price_815 = 18300\nif quantity_demanded_price_815 > quantity_supplied_price_815:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "Each field has 10 goats. How many goats are in 3 fields?",
        "answer": 30.0,
        "generated": [
            "goats_per_field = 10\nnumber_of_fields = 3\nans = goats_per_field * number_of_fields"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "A video store clerk looked up the number of movies checked out each day. What is the mode of the numbers?",
        "answer": 60.0,
        "generated": [
            "from collections import Counter\n\nmovies_checked_out = [56, 58, 58, 60, 60, 56, 60]\ncounter = Counter(movies_checked_out)\nmode = counter.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            60.0
        ],
        "result_counter": {
            "60.0": 1
        },
        "prediction": 60.0
    },
    {
        "question": "Devin wrote down how many cups of lemonade he sold in the past 7 days. What is the median of the numbers?",
        "answer": 8.0,
        "generated": [
            "cups_sold = [10, 6, 8, 8, 8, 9, 8]\ncups_sold = sorted(cups_sold)\nmiddle1 = (len(cups_sold) - 1) // 2\nmiddle2 = len(cups_sold) // 2\nans = (cups_sold[middle1] + cups_sold[middle2]) / 2"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Some teachers compared how many years they have been teaching. What is the mode of the numbers?",
        "answer": 1.0,
        "generated": [
            "years_of_teaching = [9, 1, 1, 9, 1]\nfrom collections import Counter\ncounter = Counter(years_of_teaching)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "Use the data to answer the question below. Is the following statement about our solar system true or false? 50% of the planets are made mainly of gas.",
        "answer": "false",
        "generated": [
            "planet_compositions = {'Mercury': 'rock', 'Venus': 'rock', 'Earth': 'rock', 'Mars': 'rock', 'Jupiter': 'gas', 'Saturn': 'gas', 'Uranus': 'ice', 'Neptune': 'ice'}\ngas_planets = [planet for planet, composition in planet_compositions.items() if composition == 'gas']\ntotal_planets = len(planet_compositions)\npercentage_gas_planets = (len(gas_planets) / total_planets) * 100\n\nif percentage_gas_planets == 50:\n    ans = 'true'\nelse:\n    ans = 'false'"
        ],
        "results": [
            "false"
        ],
        "result_counter": {
            "false": 1
        },
        "prediction": "false"
    },
    {
        "question": "How much money does Aaron need to buy 8 yellow bath towels and 3 beach blankets?",
        "answer": 183.0,
        "generated": [
            "yellow_bath_towel_price = 18\nbeach_blanket_price = 13\ntotal_money_needed = (8 * yellow_bath_towel_price) + (3 * beach_blanket_price)\nans = total_money_needed"
        ],
        "results": [
            183.0
        ],
        "result_counter": {
            "183.0": 1
        },
        "prediction": 183.0
    },
    {
        "question": "Mr. Khan, the band director, counted the number of instruments played by each member of the band. Which instrument do the fewest boys play?",
        "answer": "clarinet",
        "generated": [
            "boys_instruments = {'trumpet': 9, 'flute': 18, 'clarinet': 6, 'saxophone': 17}\nmin_value = min(boys_instruments.values())\nfor key, value in boys_instruments.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "clarinet"
        ],
        "result_counter": {
            "clarinet": 1
        },
        "prediction": "clarinet"
    },
    {
        "question": "A baseball player paid attention to how many baseballs he hit in practice each day. What is the median of the numbers?",
        "answer": 4.0,
        "generated": [
            "baseballs_hit = [5, 3, 5, 4, 4]\nbaseballs_hit = sorted(baseballs_hit)\nmiddle1 = (len(baseballs_hit) - 1) // 2\nmiddle2 = len(baseballs_hit) // 2\nans = (baseballs_hit[middle1] + baseballs_hit[middle2]) / 2"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A baseball player paid attention to how many baseballs he hit in practice each day. What is the median of the numbers?",
        "answer": 7.0,
        "generated": [
            "baseballs_hit = [4, 7, 9, 8, 5, 8, 4]\nbaseballs_hit = sorted(baseballs_hit)\nmiddle1 = (len(baseballs_hit) - 1) // 2\nmiddle2 = len(baseballs_hit) // 2\nans = (baseballs_hit[middle1] + baseballs_hit[middle2]) / 2"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "How much money does Sally need to buy a book about soccer and a book about South America?",
        "answer": 14.0,
        "generated": [
            "soccer_book_price = 9.00\nsouth_america_book_price = 5.00\nans = soccer_book_price + south_america_book_price"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "How much money does Kelly need to buy 5 chandeliers and 3 oil paintings?",
        "answer": 2758.0,
        "generated": [
            "chandelier_price = 143\noil_painting_price = 681\ntotal_money_needed = (5 * chandelier_price) + (3 * oil_painting_price)\nans = total_money_needed"
        ],
        "results": [
            2758.0
        ],
        "result_counter": {
            "2758.0": 1
        },
        "prediction": 2758.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "xy_values = [(7, 8), (8, 7), (9, 3)]\nslope1 = (xy_values[1][1] - xy_values[0][1]) / (xy_values[1][0] - xy_values[0][0])\nslope2 = (xy_values[2][1] - xy_values[1][1]) / (xy_values[2][0] - xy_values[1][0])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "Each tool box has 10 nails. How many nails are in 3 tool boxes?",
        "answer": 30.0,
        "generated": [
            "nails_per_toolbox = 10\nnumber_of_toolboxes = 3\nans = nails_per_toolbox * number_of_toolboxes"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "Brenda went to the store and bought 1 pound of Spanish olives. How much did she spend?",
        "answer": 4.0,
        "generated": [
            "spanish_olives_price = 4\npounds = 1\nans = spanish_olives_price * pounds"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A stock broker followed the stock prices of a certain set of companies. On Thursday, how much more did Computer Data Company's stock cost than Watson and Partners's stock?",
        "answer": 3.0,
        "generated": [
            "watson_thursday = 8\ncomputer_data_thursday = 11\nans = computer_data_thursday - watson_thursday"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Leroy kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Thursday and Friday?",
        "answer": -2.0,
        "generated": [
            "thursday_minutes = 47\nfriday_minutes = 45\nans = friday_minutes - thursday_minutes"
        ],
        "results": [
            -2.0
        ],
        "result_counter": {
            "-2.0": 1
        },
        "prediction": -2.0
    },
    {
        "question": "In order to complete their model of a futuristic highway, students in Ms. Laura's design class find out how many toy cars each student can bring to class. How many students in the class have exactly 2 toy cars?",
        "answer": 9.0,
        "generated": [
            "number_of_toy_cars = {0: 0, 1: 7, 2: 9, 3: 16, 4: 2}\nans = number_of_toy_cars[2]"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Look at the following schedule. Which activity ends at 3.50 P.M.?",
        "answer": "lap swim",
        "generated": [
            "activity_end_times = {'diving club practice': '9:20 A.M.', 'water polo practice': '11:05 A.M.', 'water aerobics': '12:50 P.M.', 'intermediate swimming class': '2:20 P.M.', 'lap swim': '3:50 P.M.'}\nfor activity, end_time in activity_end_times.items():\n    if end_time == '3:50 P.M.':\n        ans = activity"
        ],
        "results": [
            "lap swim"
        ],
        "result_counter": {
            "lap swim": 1
        },
        "prediction": "lap swim"
    },
    {
        "question": "Tessa went to the store and bought 4+3/4 kilograms of square washers. How much did she spend?",
        "answer": 14.25,
        "generated": [
            "square_washers_weight = 4 + 3/4\nprice_per_kg = 3\nans = square_washers_weight * price_per_kg"
        ],
        "results": [
            14.25
        ],
        "result_counter": {
            "14.25": 1
        },
        "prediction": 14.25
    },
    {
        "question": "How much money does Elizabeth need to buy a miniature padlock and a piece of plastic pipe?",
        "answer": 0.97,
        "generated": [
            "padlock_price = 0.17\nplastic_pipe_price = 0.80\nans = padlock_price + plastic_pipe_price"
        ],
        "results": [
            0.9700000000000001
        ],
        "result_counter": {
            "0.9700000000000001": 1
        },
        "prediction": 0.9700000000000001
    },
    {
        "question": "How much more does an oyster shell cost than a scallop shell?",
        "answer": 0.03,
        "generated": [
            "oyster_shell_cost = 0.06\nscallop_shell_cost = 0.03\nans = oyster_shell_cost - scallop_shell_cost"
        ],
        "results": [
            0.03
        ],
        "result_counter": {
            "0.03": 1
        },
        "prediction": 0.03
    },
    {
        "question": "Each basket has 10 flowers. How many flowers are in 4 baskets?",
        "answer": 40.0,
        "generated": [
            "flowers_per_basket = 10\nnumber_of_baskets = 4\nans = flowers_per_basket * number_of_baskets"
        ],
        "results": [
            40.0
        ],
        "result_counter": {
            "40.0": 1
        },
        "prediction": 40.0
    },
    {
        "question": "A reporter looked through his notebook to remember how many people he had interviewed in the past 5 days. What is the range of the numbers?",
        "answer": 2.0,
        "generated": [
            "number_of_people_interviewed = [13, 13, 14, 13, 15]\nans = max(number_of_people_interviewed) - min(number_of_people_interviewed)"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "To figure out how many vacation days she had left to use, Katy looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2017 and 2018?",
        "answer": -9.0,
        "generated": [
            "vacation_days_2017 = 25\nvacation_days_2018 = 16\nans = vacation_days_2018 - vacation_days_2017"
        ],
        "results": [
            -9.0
        ],
        "result_counter": {
            "-9.0": 1
        },
        "prediction": -9.0
    },
    {
        "question": "An agricultural agency is researching how much cheese people have been eating in different parts of the world. How much cheese was consumed per capita in Argentina in 2006?",
        "answer": 11.0,
        "generated": [
            "cheese_consumption_argentina_2006 = 11\nans = cheese_consumption_argentina_2006"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "Each tool box has 10 hammers. How many hammers are in 5 tool boxes?",
        "answer": 50.0,
        "generated": [
            "hammers_per_toolbox = 10\nnumber_of_toolboxes = 5\nans = hammers_per_toolbox * number_of_toolboxes"
        ],
        "results": [
            50.0
        ],
        "result_counter": {
            "50.0": 1
        },
        "prediction": 50.0
    },
    {
        "question": "Each shelf has 5 turtleneck sweaters. How many turtleneck sweaters are on 4 shelves?",
        "answer": 20.0,
        "generated": [
            "sweaters_per_shelf = 5\nnumber_of_shelves = 4\nans = sweaters_per_shelf * number_of_shelves"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "What is the total cost for 9/10 of a kilogram of hamburger buns?",
        "answer": 3.6,
        "generated": [
            "hamburger_buns_price = 4\nquantity = 9/10\ntotal_cost = hamburger_buns_price * quantity\nans = total_cost"
        ],
        "results": [
            3.6
        ],
        "result_counter": {
            "3.6": 1
        },
        "prediction": 3.6
    },
    {
        "question": "Each laundry hamper has 5 blouses. How many blouses are in 4 laundry hampers?",
        "answer": 20.0,
        "generated": [
            "blouses_per_hamper = 5\nnumber_of_hampers = 4\nans = blouses_per_hamper * number_of_hampers"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "Doug's class tracked how many newspapers each student collected for their recycling project. What is the mode of the numbers?",
        "answer": 86.0,
        "generated": [
            "from collections import Counter\n\nnewspapers_collected = [85, 86, 87, 86, 85, 85, 86, 86]\ncounter = Counter(newspapers_collected)\nmode = counter.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            86.0
        ],
        "result_counter": {
            "86.0": 1
        },
        "prediction": 86.0
    },
    {
        "question": "Several people compared how many Web pages they had visited. What is the median of the numbers?",
        "answer": 9.0,
        "generated": [
            "web_pages_visited = [7, 7, 9, 9, 10]\nweb_pages_visited = sorted(web_pages_visited)\nmiddle1 = (len(web_pages_visited) - 1) // 2\nmiddle2 = len(web_pages_visited) // 2\nans = (web_pages_visited[middle1] + web_pages_visited[middle2]) / 2"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Look at the following schedule. Which event ends at 12.15 P.M.?",
        "answer": "parachute ball toss",
        "generated": [
            "event_end_times = {'relay race': '4:00 P.M.', 'jump rope race': '3:30 P.M.', 'parachute ball toss': '12:15 P.M.', 'egg relay': '4:35 P.M.'}\nfor event, end_time in event_end_times.items():\n    if end_time == '12:15 P.M.':\n        ans = event"
        ],
        "results": [
            "parachute ball toss"
        ],
        "result_counter": {
            "parachute ball toss": 1
        },
        "prediction": "parachute ball toss"
    },
    {
        "question": "A sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. How many more medals did Brazil win in 2008 than in 2004?",
        "answer": 5.0,
        "generated": [
            "brazil_medals_2004 = 10\nbrazil_medals_2008 = 15\nans = brazil_medals_2008 - brazil_medals_2004"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "The principal of Stafford Elementary School released statistics about how many boys and girls were in each fourth grade class at her school. How many more boys are in Mr. Lopez's class than Miss Smith's class?",
        "answer": 9.0,
        "generated": [
            "boys_miss_smith = 10\nboys_mr_lopez = 19\nans = boys_mr_lopez - boys_miss_smith"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "A furniture store kept a record of how many couches it sold each day. What is the range of the numbers?",
        "answer": 5.0,
        "generated": [
            "couches_sold = [7, 2, 2, 3, 3, 7]\nans = max(couches_sold) - min(couches_sold)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "How much money does Naomi need to buy a hair tie, a box of breath mints, and a comb?",
        "answer": 2.47,
        "generated": [
            "hair_tie_price = 0.57\nbreath_mints_price = 0.94\ncomb_price = 0.96\nans = hair_tie_price + breath_mints_price + comb_price"
        ],
        "results": [
            2.4699999999999998
        ],
        "result_counter": {
            "2.4699999999999998": 1
        },
        "prediction": 2.4699999999999998
    },
    {
        "question": "How much money does Brennan need to buy a shapes stencil and a green bouncy ball?",
        "answer": 0.06,
        "generated": [
            "shapes_stencil_price = 0.02\ngreen_bouncy_ball_price = 0.04\nans = shapes_stencil_price + green_bouncy_ball_price"
        ],
        "results": [
            0.06
        ],
        "result_counter": {
            "0.06": 1
        },
        "prediction": 0.06
    },
    {
        "question": "A technical support line tracked how many calls it received each day. How many calls total did the support line receive on Friday and Saturday?",
        "answer": 9504.0,
        "generated": [
            "calls_friday = 1356\ncalls_saturday = 8148\nans = calls_friday + calls_saturday"
        ],
        "results": [
            9504.0
        ],
        "result_counter": {
            "9504.0": 1
        },
        "prediction": 9504.0
    },
    {
        "question": "Reagan wrote down how many glasses of water she drank during the past 7 days. What is the range of the numbers?",
        "answer": 5.0,
        "generated": [
            "glasses_of_water = [5, 5, 5, 10, 7, 9, 8]\nans = max(glasses_of_water) - min(glasses_of_water)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "Marcy's Candies has been studying how much chocolate people have been eating in different countries. In 2005, how much more chocolate did Germany consume per capita than Poland?",
        "answer": 7.0,
        "generated": [
            "germany_2005 = 11\npoland_2005 = 4\nans = germany_2005 - poland_2005"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "The gym teacher wrote down how many tennis balls his students hit in half an hour. What is the range of the numbers?",
        "answer": 19.0,
        "generated": [
            "number_of_tennis_balls = [76, 65, 67, 62, 63, 57]\nans = max(number_of_tennis_balls) - min(number_of_tennis_balls)"
        ],
        "results": [
            19.0
        ],
        "result_counter": {
            "19.0": 1
        },
        "prediction": 19.0
    },
    {
        "question": "A machine dispensed red gumdrops into bags of various sizes. How many bags had at least 53 red gumdrops but less than 74 red gumdrops?",
        "answer": 6.0,
        "generated": [
            "gumdrops_number_list = [24, 26, 28, 29, 31, 32, 43, 52, 59, 59, 60, 61, 64, 66, 75, 75, 77, 90]\nbags_with_53_to_74_gumdrops = [num for num in gumdrops_number_list if 53 <= num < 74]\nans = len(bags_with_53_to_74_gumdrops)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "The financial aid office at Jordan University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2012 and 2013?",
        "answer": -3.0,
        "generated": [
            "students_2012 = 28\nstudents_2013 = 25\nans = students_2013 - students_2012"
        ],
        "results": [
            -3.0
        ],
        "result_counter": {
            "-3.0": 1
        },
        "prediction": -3.0
    },
    {
        "question": "Sue's family went on a road trip and counted the number of cars they saw each day. On which day did they see the fewest cars?",
        "answer": "Friday",
        "generated": [
            "cars_dict = {'Thursday': 324, 'Friday': 323, 'Saturday': 342, 'Sunday': 334}\nmin_value = min(cars_dict.values())\nfor key, value in cars_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Friday"
        ],
        "result_counter": {
            "Friday": 1
        },
        "prediction": "Friday"
    },
    {
        "question": "A magazine editor looked at her sales figures for the past 3 months. How many more copies were sold in May than in April?",
        "answer": 1836.0,
        "generated": [
            "may_sales = 5123\napril_sales = 3287\nans = may_sales - april_sales"
        ],
        "results": [
            1836.0
        ],
        "result_counter": {
            "1836.0": 1
        },
        "prediction": 1836.0
    },
    {
        "question": "Look at Raphael's pay stub. Raphael lives in a state that has state income tax. How much did Raphael make after taxes?",
        "answer": 1807.8,
        "generated": [
            "total_earnings = 2400\nfederal_income_tax = 266.60\nstate_income_tax = 142.00\nother_taxes = 183.60\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\nans = total_earnings - total_taxes"
        ],
        "results": [
            1807.8
        ],
        "result_counter": {
            "1807.8": 1
        },
        "prediction": 1807.8
    },
    {
        "question": "A pair of Howard High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2017 and 2018?",
        "answer": -5.0,
        "generated": [
            "games_won_2017 = 20\ngames_won_2018 = 15\nans = games_won_2018 - games_won_2017"
        ],
        "results": [
            -5.0
        ],
        "result_counter": {
            "-5.0": 1
        },
        "prediction": -5.0
    },
    {
        "question": "Some dealerships compared their vehicle sales. What is the range of the numbers?",
        "answer": 14.0,
        "generated": [
            "vehicle_sales = [19, 19, 13, 17, 27, 13]\nans = max(vehicle_sales) - min(vehicle_sales)"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "Naomi has $0.50. Does she have enough to buy an elastic band and a spool of gold wire?",
        "answer": "no",
        "generated": [
            "elastic_band_price = 0.17\ngold_wire_price = 0.40\ntotal_money = 0.50\nif total_money > elastic_band_price + gold_wire_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [1, 2, 3]\ny_values = [16, 6, 5]\n\nslope_1_2 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2_3 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1_2 == slope_2_3:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "Each necklace has 5 pearls. How many pearls are on 4 necklaces?",
        "answer": 20.0,
        "generated": [
            "pearls_per_necklace = 5\nnumber_of_necklaces = 4\nans = pearls_per_necklace * number_of_necklaces"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "Some pizza restaurants compared their pizza sales. In all, how many pizza slices did Pizzas Only and Mario's Pizzeria sell?",
        "answer": 2677.0,
        "generated": [
            "pizzas_only_sales = 1470\nmarios_pizzeria_sales = 1207\nans = pizzas_only_sales + marios_pizzeria_sales"
        ],
        "results": [
            2677.0
        ],
        "result_counter": {
            "2677.0": 1
        },
        "prediction": 2677.0
    },
    {
        "question": "Look at the following schedule. When does the zebra feeding end?",
        "answer": "6:55 P.M.",
        "generated": [
            "ans = '6:55 P.M.'"
        ],
        "results": [
            "6:55 P.M."
        ],
        "result_counter": {
            "6:55 P.M.": 1
        },
        "prediction": "6:55 P.M."
    },
    {
        "question": "A pumpkin patch monitored the number of pumpkins sold each day. How many more pumpkins did the pumpkin patch sell on Wednesday than on Thursday?",
        "answer": 486.0,
        "generated": [
            "pumpkins_wednesday = 769\npumpkins_thursday = 283\nans = pumpkins_wednesday - pumpkins_thursday"
        ],
        "results": [
            486.0
        ],
        "result_counter": {
            "486.0": 1
        },
        "prediction": 486.0
    },
    {
        "question": "Each shelf has 2 blocks of cheese. How many blocks of cheese are on 4 shelves?",
        "answer": 8.0,
        "generated": [
            "blocks_per_shelf = 2\nnumber_of_shelves = 4\nans = blocks_per_shelf * number_of_shelves"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Jason has $0.15. Does he have enough to buy a bead with green and blue swirls and a white bead with black spots?",
        "answer": "yes",
        "generated": [
            "green_blue_swirls_bead = 0.08\nwhite_black_spots_bead = 0.06\ntotal_money = 0.15\nif total_money >= green_blue_swirls_bead + white_black_spots_bead:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $635, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_635 = 8400\nquantity_supplied_price_635 = 10600\nif quantity_demanded_price_635 > quantity_supplied_price_635:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "Each basket has 10 lilies. How many lilies are in 4 baskets?",
        "answer": 40.0,
        "generated": [
            "lilies_per_basket = 10\nnumber_of_baskets = 4\nans = lilies_per_basket * number_of_baskets"
        ],
        "results": [
            40.0
        ],
        "result_counter": {
            "40.0": 1
        },
        "prediction": 40.0
    },
    {
        "question": "Sofia, a candy store employee, placed peppermint candies into jars of various sizes. How many jars had at least 10 peppermint candies?",
        "answer": 17.0,
        "generated": [
            "stem_leaf = {\n    1: [1, 1, 1, 4],\n    2: [1, 2, 3, 5, 6],\n    3: [3, 4, 6],\n    4: [3, 6, 7],\n    5: [4, 8]\n}\n\njars_with_at_least_10_candies = 0\nfor stem, leaves in stem_leaf.items():\n    if stem >= 2:\n        jars_with_at_least_10_candies += len(leaves)\n\nans = jars_with_at_least_10_candies"
        ],
        "results": [
            13.0
        ],
        "result_counter": {
            "13.0": 1
        },
        "prediction": 13.0
    },
    {
        "question": "An architecture student measured the heights of all the buildings downtown. How many buildings are exactly 77 meters tall?",
        "answer": 1.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbuilding_heights = [10, 11, 36, 42, 60, 63, 63, 65, 66, 74, 77, 85, 86]\nans = building_heights.count(77)"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "A technical support line tracked how many calls it received each day. On which day did the support line receive the most calls?",
        "answer": "Saturday",
        "generated": [
            "calls_dict = {'Friday': 139, 'Saturday': 193, 'Sunday': 192, 'Monday': 113}\nmax_value = max(calls_dict.values())\nfor key, value in calls_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Saturday"
        ],
        "result_counter": {
            "Saturday": 1
        },
        "prediction": "Saturday"
    },
    {
        "question": "Tracy has $0.14. Does she have enough to buy a brown cat's eye bead and a shiny red bead?",
        "answer": "yes",
        "generated": [
            "cat_eye_bead = 0.08\nshiny_red_bead = 0.05\ntotal_money = 0.14\nif total_money >= cat_eye_bead + shiny_red_bead:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Josiah's Treats counted how many times its most frequent customers ate ice cream last month. How many customers ate ice cream fewer than 2 times?",
        "answer": 29.0,
        "generated": [
            "times_eaten = [0, 1, 2, 3, 4, 5, 6]\nfrequency = [10, 19, 15, 20, 7, 2, 4]\n\ncustomers_fewer_than_2_times = frequency[0] + frequency[1]\nans = customers_fewer_than_2_times"
        ],
        "results": [
            29.0
        ],
        "result_counter": {
            "29.0": 1
        },
        "prediction": 29.0
    },
    {
        "question": "The owner of a bed and breakfast inn recalled how many guests the inn had hosted each day. What is the mean of the numbers?",
        "answer": 9.0,
        "generated": [
            "number_of_guests_each_day = [9, 9, 10, 9, 8]\nans = sum(number_of_guests_each_day) / len(number_of_guests_each_day)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Alvin kept track of how many laps he swam during the past 5 days. What is the median of the numbers?",
        "answer": 8.0,
        "generated": [
            "laps = [5, 10, 6, 8, 10]\nlaps = sorted(laps)\nmiddle1 = (len(laps) - 1) // 2\nmiddle2 = len(laps) // 2\nans = (laps[middle1] + laps[middle2]) / 2"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Lila sold boxes of cookies to raise money for her scout troop. She used a frequency chart to track her sales. Lila sold 1/3 as many boxes of lemon cookies as peanut butter cookies. How many boxes of lemon cookies did she sell?",
        "answer": 3.0,
        "generated": [
            "peanut_butter_cookies = 9\nlemon_cookies = peanut_butter_cookies // 3\nans = lemon_cookies"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Michelle counted the number of ducks at each pond in the city. What is the largest number of ducks?",
        "answer": 90.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nducks_number_list = [16, 28, 36, 51, 53, 88, 90]\nans = max(ducks_number_list)"
        ],
        "results": [
            90.0
        ],
        "result_counter": {
            "90.0": 1
        },
        "prediction": 90.0
    },
    {
        "question": "Ron found out the sizes of all the clubs at his school. What is the size of the smallest club?",
        "answer": 22.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nclub_sizes = [22, 24, 39, 40, 42, 43, 44, 44, 45, 50, 54, 57, 57, 60, 70, 77, 81, 84, 90]\nans = min(club_sizes)"
        ],
        "results": [
            22.0
        ],
        "result_counter": {
            "22.0": 1
        },
        "prediction": 22.0
    },
    {
        "question": "While looking through an almanac at the library, Tucker noticed some data showing the population density of various states. How many people per square mile lived in South Dakota in 2000?",
        "answer": 10.0,
        "generated": [
            "population_per_square_mile_south_dakota_2000 = 10\nans = population_per_square_mile_south_dakota_2000"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "A crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 30 broken crayons?",
        "answer": 17.0,
        "generated": [
            "boxes_with_broken_crayons = [23, 24, 25, 25, 28, 31, 35, 35, 36, 41, 45, 46, 56, 60, 61, 63, 68, 75, 76, 77, 88, 90]\nboxes_with_at_least_30_broken_crayons = [x for x in boxes_with_broken_crayons if x >= 30]\nans = len(boxes_with_at_least_30_broken_crayons)"
        ],
        "results": [
            17.0
        ],
        "result_counter": {
            "17.0": 1
        },
        "prediction": 17.0
    },
    {
        "question": "Each shelf has 2 cups. How many cups are on 4 shelves?",
        "answer": 8.0,
        "generated": [
            "cups_per_shelf = 2\nnumber_of_shelves = 4\nans = cups_per_shelf * number_of_shelves"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "For an economics project, Mitch determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Southport-Fort Fisher ferry?",
        "answer": 2.0,
        "generated": [
            "bicycle_fare_southport_fort_fisher = 2\nans = bicycle_fare_southport_fort_fisher"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "Look at the following schedule. When does the banquet end?",
        "answer": "12:35 P.M.",
        "generated": [
            "event_schedule = {\n    'banquet': {'begin': '10:55 A.M.', 'end': '12:35 P.M.'},\n    'band concert': {'begin': '12:40 P.M.', 'end': '2:00 P.M.'},\n    'choir concert': {'begin': '1:45 P.M.', 'end': '3:55 P.M.'},\n    'award ceremony': {'begin': '3:20 P.M.', 'end': '4:30 P.M.'},\n    'dance performance': {'begin': '4:20 P.M.', 'end': '5:25 P.M.'},\n    'drumming performance': {'begin': '5:35 P.M.', 'end': '7:55 P.M.'}\n}\n\nans = event_schedule['banquet']['end']"
        ],
        "results": [
            "12:35 P.M."
        ],
        "result_counter": {
            "12:35 P.M.": 1
        },
        "prediction": "12:35 P.M."
    },
    {
        "question": "How much money does Ariana need to buy 3 emerald rings and 7 sapphire pendants?",
        "answer": 65845.0,
        "generated": [
            "emerald_ring_price = 5419\nsapphire_pendant_price = 7084\ntotal_cost = (3 * emerald_ring_price) + (7 * sapphire_pendant_price)\nans = total_cost"
        ],
        "results": [
            65845.0
        ],
        "result_counter": {
            "65845.0": 1
        },
        "prediction": 65845.0
    },
    {
        "question": "Ms. Lester reported her students' scores on the most recent quiz. What is the lowest score?",
        "answer": 13.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nquiz_scores_list = [13, 19, 24, 26, 29, 32, 33, 36, 36, 37, 49, 51, 51, 54, 56, 56, 57, 58, 60, 61, 67, 67, 72, 76]\nans = min(quiz_scores_list)"
        ],
        "results": [
            13.0
        ],
        "result_counter": {
            "13.0": 1
        },
        "prediction": 13.0
    },
    {
        "question": "How much more does a surfing adventure package cost than a mountain-biking adventure package?",
        "answer": 246.0,
        "generated": [
            "surfing_adventure_cost = 979\nmountain_biking_adventure_cost = 733\nans = surfing_adventure_cost - mountain_biking_adventure_cost"
        ],
        "results": [
            246.0
        ],
        "result_counter": {
            "246.0": 1
        },
        "prediction": 246.0
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "yes",
        "generated": [
            "x_values = [4, 7, 8]\ny_values = [18, 17, 4]\n\nif len(set(x_values)) == len(x_values):\n    ans = 'yes'\nelse:\n    ans = 'no'"
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [0, 1, 2]\ny_values = [7, 11, 15]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "How much money does Myra need to buy a DVD player and a DVD?",
        "answer": 88.0,
        "generated": [
            "dvd_player_price = 76.00\ndvd_price = 12.00\nans = dvd_player_price + dvd_price"
        ],
        "results": [
            88.0
        ],
        "result_counter": {
            "88.0": 1
        },
        "prediction": 88.0
    },
    {
        "question": "How much more does a leaf blower cost than a fountain?",
        "answer": 4.0,
        "generated": [
            "leaf_blower_cost = 80\nfountain_cost = 76\nans = leaf_blower_cost - fountain_cost"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A county agency recorded the money donated to several charitable causes over time. In May, how much more money was raised for animals than for medical research?",
        "answer": 10.0,
        "generated": [
            "animals_donation_may = 18\nmedical_research_donation_may = 8\nans = animals_donation_may - medical_research_donation_may"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "This morning, Mr. Kline released the scores from last week's spelling test. How many students scored at least 55 points?",
        "answer": 12.0,
        "generated": [
            "scores = [31, 36, 37, 44, 47, 48, 50, 52, 63, 64, 64, 67, 68, 69, 72, 81, 82, 86, 88, 90]\nstudents_with_55_or_more = [score for score in scores if score >= 55]\nans = len(students_with_55_or_more)"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "Every year Salem has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2016 and 2017?",
        "answer": 4.0,
        "generated": [
            "winning_time_2016 = 31\nwinning_time_2017 = 35\nans = winning_time_2017 - winning_time_2016"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "How much money does Haley need to buy a fancy ribbon and a red balloon?",
        "answer": 0.5,
        "generated": [
            "fancy_ribbon_price = 0.31\nred_balloon_price = 0.19\nans = fancy_ribbon_price + red_balloon_price"
        ],
        "results": [
            0.5
        ],
        "result_counter": {
            "0.5": 1
        },
        "prediction": 0.5
    },
    {
        "question": "The teachers at a middle school counted how many computers they had in their classrooms. What is the mean of the numbers?",
        "answer": 15.0,
        "generated": [
            "number_of_computers = [11, 18, 18, 16, 13, 16, 13]\nans = sum(number_of_computers) / len(number_of_computers)"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "In hopes of raising more funds for arts education, some parents in the Clarksville School District publicized the current per-student arts education budget. According to the table, what was the rate of change between 2019 and 2020?",
        "answer": 6.0,
        "generated": [
            "budget_2019 = 19\nbudget_2020 = 25\nans = budget_2020 - budget_2019"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "How much money does Aisha need to buy 8 tickets for a Caribbean cruise?",
        "answer": 38088.0,
        "generated": [
            "caribbean_cruise_ticket = 4761\nnumber_of_tickets = 8\nans = caribbean_cruise_ticket * number_of_tickets"
        ],
        "results": [
            38088.0
        ],
        "result_counter": {
            "38088.0": 1
        },
        "prediction": 38088.0
    },
    {
        "question": "Grayson counted the number of pieces of pepperoni on each pizza he made. What is the smallest number of pieces of pepperoni?",
        "answer": 10.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\npepperoni_number_list = [10, 10, 11, 13, 18, 18, 20, 21, 21, 22, 29, 29, 31, 33, 33, 36, 36, 36, 41, 42, 49]\nans = min(pepperoni_number_list)"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "What is the total cost for 1.6 pounds of cashews?",
        "answer": 12.8,
        "generated": [
            "cashew_price_per_pound = 8\ntotal_weight = 1.6\nans = cashew_price_per_pound * total_weight"
        ],
        "results": [
            12.8
        ],
        "result_counter": {
            "12.8": 1
        },
        "prediction": 12.8
    },
    {
        "question": "Look at the following schedule. Gabby is at Comfy Pillows Resort. If she wants to arrive at Magician Village at 11.30 P.M., what time should she get on the train?",
        "answer": "9:00 P.M.",
        "generated": [
            "train_schedule = {\n    'Comfy Pillows Resort': ['2:30 A.M.', '11:15 A.M.', '9:00 P.M.'],\n    'Pleasant River Campground': ['3:30 A.M.', '12:15 P.M.', '10:00 P.M.'],\n    'Floral Gardens': ['4:15 A.M.', '1:00 P.M.', '10:45 P.M.'],\n    'Magician Village': ['5:00 A.M.', '1:45 P.M.', '11:30 P.M.'],\n    'Skyscraper City': ['5:45 A.M.', '2:30 P.M.', '12:15 A.M.'],\n    'Gecko Paradise': ['6:30 A.M.', '3:15 P.M.', '1:00 A.M.'],\n    'Rocky Ravine Town': ['7:30 A.M.', '4:15 P.M.', '2:00 A.M.']\n}\n\ndesired_arrival_time = '11:30 P.M.'\ndeparture_times = train_schedule['Comfy Pillows Resort']\n\nfor time in departure_times:\n    if train_schedule['Magician Village'].index(time) == train_schedule['Magician Village'].index(desired_arrival_time):\n        ans = time\n\nans\n# The answer is '9:00 P.M.'"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "A crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 60 broken crayons but fewer than 100 broken crayons?",
        "answer": 12.0,
        "generated": [
            "broken_crayons_list = [22, 23, 27, 28, 30, 40, 44, 51, 52, 52, 55, 59, 59, 61, 62, 66, 70, 72, 74, 77, 80, 81, 83, 89, 90]\nboxes_with_60_to_100_crayons = [x for x in broken_crayons_list if 60 <= x < 100]\nans = len(boxes_with_60_to_100_crayons)"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "Scott has $31.00. Does he have enough to buy a pair of khaki pants and a pair of jeans?",
        "answer": "no",
        "generated": [
            "khaki_pants_price = 13.00\njeans_price = 19.00\ntotal_money = 31.00\nif total_money >= khaki_pants_price + jeans_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Look at the following schedule. Which event begins at 12.50 P.M.?",
        "answer": "relay race",
        "generated": [
            "event_schedule = {\n    'three-legged race': ('9:15 A.M.', '9:25 A.M.'),\n    'balloon stomp': ('9:35 A.M.', '10:30 A.M.'),\n    'jump rope race': ('10:35 A.M.', '11:15 A.M.'),\n    'water balloon toss': ('11:25 A.M.', '12:00 P.M.'),\n    'obstacle course': ('12:15 P.M.', '12:40 P.M.'),\n    'relay race': ('12:50 P.M.', '1:05 P.M.'),\n    'bean bag toss': ('1:10 P.M.', '1:25 P.M.'),\n    'hula hoop contest': ('1:30 P.M.', '2:10 P.M.'),\n    'hurdles': ('2:15 P.M.', '2:25 P.M.'),\n    'tug-of-war': ('2:30 P.M.', '3:20 P.M.')\n}\n\nfor event, time in event_schedule.items():\n    if time[0] == '12:50 P.M.':\n        ans = event"
        ],
        "results": [
            "relay race"
        ],
        "result_counter": {
            "relay race": 1
        },
        "prediction": "relay race"
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "xy_values = [(7, 8), (8, 4), (9, 0)]\nslope1 = (xy_values[1][1] - xy_values[0][1]) / (xy_values[1][0] - xy_values[0][0])\nslope2 = (xy_values[2][1] - xy_values[1][1]) / (xy_values[2][0] - xy_values[1][0])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "Francesca owns a used car dealership. The frequency chart shows the cars she has in stock. How many cars does Francesca have in stock?",
        "answer": 55.0,
        "generated": [
            "cars_in_stock = {'white': 13, 'black': 14, 'red': 5, 'silver': 23}\nans = sum(cars_in_stock.values())"
        ],
        "results": [
            55.0
        ],
        "result_counter": {
            "55.0": 1
        },
        "prediction": 55.0
    },
    {
        "question": "Martha found out the sizes of all the clubs at her school. What is the size of the largest club?",
        "answer": 57.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nclub_sizes = [23, 23, 25, 26, 28, 35, 36, 37, 40, 41, 44, 44, 47, 54, 55, 56, 57]\nans = max(club_sizes)"
        ],
        "results": [
            57.0
        ],
        "result_counter": {
            "57.0": 1
        },
        "prediction": 57.0
    },
    {
        "question": "A pottery factory kept track of the number of broken plates per shipment last week. What is the largest number of broken plates?",
        "answer": 42.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbroken_plates_number_list = [10, 11, 14, 15, 25, 30, 30, 32, 33, 34, 37, 42, 42]\nans = max(broken_plates_number_list)"
        ],
        "results": [
            42.0
        ],
        "result_counter": {
            "42.0": 1
        },
        "prediction": 42.0
    },
    {
        "question": "Isaac buys 1 pound of rye. What is the total cost?",
        "answer": 2.84,
        "generated": [
            "rye_price_per_pound = 2.84\ntotal_cost = rye_price_per_pound * 1\nans = total_cost"
        ],
        "results": [
            2.84
        ],
        "result_counter": {
            "2.84": 1
        },
        "prediction": 2.84
    },
    {
        "question": "This morning, Mr. Davidson released the scores from last week's spelling test. How many students scored fewer than 80 points?",
        "answer": 23.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nscores_below_80 = [10, 18, 26, 27, 27, 33, 33, 34, 34, 35, 36, 40, 43, 44]\nans = len(scores_below_80)"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "Spencer is a pediatrics nurse who conducts the first neonatal exam on newborn patients. He makes note of the newborns' height, weight, eye color, and heart rate, among other things. What is the probability that a randomly selected baby has brown eyes and has a fast heart rate (>100 bpm)? Simplify any fractions.",
        "answer": "2/15",
        "generated": [
            "total_babies = 6 + 2 + 3 + 4\nbrown_eyes_fast_heart_rate = 2\nans = brown_eyes_fast_heart_rate / total_babies"
        ],
        "results": [
            0.13333333333333333
        ],
        "result_counter": {
            "0.13333333333333333": 1
        },
        "prediction": 0.13333333333333333
    },
    {
        "question": "Some farmers compared how many sheep were in their flocks. What is the median of the numbers?",
        "answer": 8.0,
        "generated": [
            "number_of_sheep = [8, 9, 6, 8, 5]\nnumber_of_sheep = sorted(number_of_sheep)\nmiddle1 = (len(number_of_sheep) - 1) // 2\nmiddle2 = len(number_of_sheep) // 2\nans = (number_of_sheep[middle1] + number_of_sheep[middle2]) / 2"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $915, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_915 = 11200\nquantity_supplied_price_915 = 5700\nif quantity_demanded_price_915 > quantity_supplied_price_915:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "The town council reported on how many stop signs there are on each street. What is the mode of the numbers?",
        "answer": 12.0,
        "generated": [
            "from collections import Counter\n\nstop_signs = [12, 8, 12, 8, 12]\ncounter = Counter(stop_signs)\nmode = counter.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "Monica entered her sister into their town's Smelly Shoe Competition. Monica observed contestants of all ages proudly strutting around wearing different kinds of smelly shoes. What is the probability that a randomly selected contestant is wearing high heels and is under age 12? Simplify any fractions.",
        "answer": "1/15",
        "generated": [
            "total_contestants = (6 + 3) + (1 + 5)\nhigh_heels_under_12 = 1\nans = high_heels_under_12 / total_contestants"
        ],
        "results": [
            0.06666666666666667
        ],
        "result_counter": {
            "0.06666666666666667": 1
        },
        "prediction": 0.06666666666666667
    },
    {
        "question": "How much more does a motorcycle cost than a canoe?",
        "answer": 274.0,
        "generated": [
            "canoe_cost = 694\nmotorcycle_cost = 968\nans = motorcycle_cost - canoe_cost"
        ],
        "results": [
            274.0
        ],
        "result_counter": {
            "274.0": 1
        },
        "prediction": 274.0
    },
    {
        "question": "The city recorded how many fire hydrants there are on each street. What is the mean of the numbers?",
        "answer": 3.0,
        "generated": [
            "number_of_hydrants = [2, 5, 2, 4, 3, 1, 4, 3]\nans = sum(number_of_hydrants) / len(number_of_hydrants)"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "How much money does Jake need to buy a cockatoo and a bearded dragon?",
        "answer": 386.0,
        "generated": [
            "bearded_dragon_price = 243.00\ncockatoo_price = 143.00\nans = bearded_dragon_price + cockatoo_price"
        ],
        "results": [
            386.0
        ],
        "result_counter": {
            "386.0": 1
        },
        "prediction": 386.0
    },
    {
        "question": "While compiling photos for an album, Andrew noted the number of photographs taken by each of his friends and family. How many people are there in all?",
        "answer": 74.0,
        "generated": [
            "frequency_list = [15, 16, 12, 8, 7, 2, 14]\nans = sum(frequency_list)"
        ],
        "results": [
            74.0
        ],
        "result_counter": {
            "74.0": 1
        },
        "prediction": 74.0
    },
    {
        "question": "Jerry went to the store. He bought 4 kilograms of King Edward potatoes. How much did he spend?",
        "answer": 6.76,
        "generated": [
            "king_edward_price = 1.69\nquantity = 4\nans = king_edward_price * quantity"
        ],
        "results": [
            6.76
        ],
        "result_counter": {
            "6.76": 1
        },
        "prediction": 6.76
    },
    {
        "question": "The aquarium's records showed how many tickets were sold in the past 4 days. On which day did the aquarium sell the most tickets?",
        "answer": "Friday",
        "generated": [
            "tickets_sold = {'Tuesday': 70, 'Wednesday': 71, 'Thursday': 72, 'Friday': 75}\nmax_value = max(tickets_sold.values())\nfor key, value in tickets_sold.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Friday"
        ],
        "result_counter": {
            "Friday": 1
        },
        "prediction": "Friday"
    },
    {
        "question": "Each tool box has 5 screwdrivers. How many screwdrivers are in 5 tool boxes?",
        "answer": 25.0,
        "generated": [
            "screwdrivers_per_toolbox = 5\nnumber_of_toolboxes = 5\nans = screwdrivers_per_toolbox * number_of_toolboxes"
        ],
        "results": [
            25.0
        ],
        "result_counter": {
            "25.0": 1
        },
        "prediction": 25.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $485, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_485 = 7200\nquantity_supplied_price_485 = 20300\nif quantity_demanded_price_485 > quantity_supplied_price_485:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "Akira has $271. Does she have enough to buy a cockatoo and an iguana?",
        "answer": "yes",
        "generated": [
            "cockatoo_price = 124\niguana_price = 138\ntotal_money = 271\nif total_money > cockatoo_price + iguana_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Each branch has 2 caterpillars. How many caterpillars are on 6 branches?",
        "answer": 12.0,
        "generated": [
            "number_of_branches = 6\ncaterpillars_per_branch = 2\nans = number_of_branches * caterpillars_per_branch"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "How much would it cost to buy 5 pounds of unshelled peanuts?",
        "answer": 7.9,
        "generated": [
            "unshelled_peanuts_price_per_lb = 1.58\nquantity = 5\nans = unshelled_peanuts_price_per_lb * quantity"
        ],
        "results": [
            7.9
        ],
        "result_counter": {
            "7.9": 1
        },
        "prediction": 7.9
    },
    {
        "question": "A juice shop tracked how many smoothies it sold in the past 5 days. What is the median of the numbers?",
        "answer": 85.0,
        "generated": [
            "smoothies_sold = [87, 83, 85, 85, 86]\nsmoothies_sold = sorted(smoothies_sold)\nmiddle1 = (len(smoothies_sold) - 1) // 2\nmiddle2 = len(smoothies_sold) // 2\nans = (smoothies_sold[middle1] + smoothies_sold[middle2]) / 2"
        ],
        "results": [
            85.0
        ],
        "result_counter": {
            "85.0": 1
        },
        "prediction": 85.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "xy_values = [(18, 19), (19, 11), (20, 3)]\nslope1 = (xy_values[1][1] - xy_values[0][1]) / (xy_values[1][0] - xy_values[0][0])\nslope2 = (xy_values[2][1] - xy_values[1][1]) / (xy_values[2][0] - xy_values[1][0])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "How much money does Ezra need to buy an egg sandwich, a bowl of melon, and a spinach omelette?",
        "answer": 13.0,
        "generated": [
            "egg_sandwich_price = 7.00\nbowl_of_melon_price = 3.00\nspinach_omelette_price = 3.00\nans = egg_sandwich_price + bowl_of_melon_price + spinach_omelette_price"
        ],
        "results": [
            13.0
        ],
        "result_counter": {
            "13.0": 1
        },
        "prediction": 13.0
    },
    {
        "question": "How much money does Isaac need to buy a dry erase marker and an eraser?",
        "answer": 1.06,
        "generated": [
            "marker_price = 0.65\neraser_price = 0.41\nans = marker_price + eraser_price"
        ],
        "results": [
            1.06
        ],
        "result_counter": {
            "1.06": 1
        },
        "prediction": 1.06
    },
    {
        "question": "Owen found a list of the number of roller coasters at each amusement park in the state. How many amusement parks have at least 31 roller coasters but fewer than 47 roller coasters?",
        "answer": 6.0,
        "generated": [
            "roller_coasters_list = [13, 14, 17, 19, 20, 21, 27, 29, 36, 38, 38, 44, 44, 46, 47, 48, 48]\ncount = 0\nfor num in roller_coasters_list:\n    if 31 <= num < 47:\n        count += 1\nans = count"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "In a recent election at Cline University, four people ran for student body president. What fraction of votes were for Jared? Simplify your answer.",
        "answer": "19/124",
        "generated": [
            "votes = {'Devon': 930, 'Martha': 450, 'Shelby': 720, 'Jared': 380}\ntotal_votes = sum(votes.values())\njared_votes = votes['Jared']\nans = jared_votes / total_votes"
        ],
        "results": [
            0.1532258064516129
        ],
        "result_counter": {
            "0.1532258064516129": 1
        },
        "prediction": 0.1532258064516129
    },
    {
        "question": "Susan and her friends recorded their scores while playing a board game. How many people are there in all?",
        "answer": 34.0,
        "generated": [
            "score_frequencies = [3, 14, 11, 0, 6]\nans = sum(score_frequencies)"
        ],
        "results": [
            34.0
        ],
        "result_counter": {
            "34.0": 1
        },
        "prediction": 34.0
    },
    {
        "question": "Darnel buys 2 pounds of soybeans, 4 pounds of garbanzo beans, and 1 pound of kidney beans. What is the total cost?",
        "answer": 15.36,
        "generated": [
            "kidney_beans_price = 1.78\nsoybeans_price = 1.29\ngarbanzo_beans_price = 2.75\nlima_beans_price = 2.28\n\ntotal_cost = (2 * soybeans_price) + (4 * garbanzo_beans_price) + (1 * kidney_beans_price)\nans = total_cost"
        ],
        "results": [
            15.36
        ],
        "result_counter": {
            "15.36": 1
        },
        "prediction": 15.36
    },
    {
        "question": "For a math assignment, Cora researched the scores of the people competing on her favorite quiz show. How many people scored at least 10 points but fewer than 30 points?",
        "answer": 10.0,
        "generated": [
            "scores_list = [10, 13, 15, 15, 18, 19, 19, 19, 27, 29, 37, 48, 49, 50, 57, 58, 59, 60, 61, 63, 63, 66]\nscores_between_10_and_30 = [score for score in scores_list if 10 <= score < 30]\nans = len(scores_between_10_and_30)"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "How much more does a piece of smoky quartz cost than a piece of fool's gold?",
        "answer": 0.24,
        "generated": [
            "smoky_quartz_cost = 0.78\nfools_gold_cost = 0.54\nans = smoky_quartz_cost - fools_gold_cost"
        ],
        "results": [
            0.24
        ],
        "result_counter": {
            "0.24": 1
        },
        "prediction": 0.24
    },
    {
        "question": "Victoria bought 4 kilograms of olive oil, 4 kilograms of peanut oil, and 5 kilograms of sunflower seed oil. How much did she spend?",
        "answer": 26.0,
        "generated": [
            "oil_prices = 2  # All oils have the same price per kilogram\nolive_oil_kg = 4\npeanut_oil_kg = 4\nsunflower_seed_oil_kg = 5\n\ntotal_kg = olive_oil_kg + peanut_oil_kg + sunflower_seed_oil_kg\nans = total_kg * oil_prices"
        ],
        "results": [
            26.0
        ],
        "result_counter": {
            "26.0": 1
        },
        "prediction": 26.0
    },
    {
        "question": "Sharon's class paid attention to how many bottles each student collected for their recycling project. Who collected the fewest bottles?",
        "answer": "Darren",
        "generated": [
            "bottle_dict = {'Sharon': 798, 'Darren': 747, 'Jayce': 779, 'Richard': 749}\nmin_value = min(bottle_dict.values())\nfor key, value in bottle_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Darren"
        ],
        "result_counter": {
            "Darren": 1
        },
        "prediction": "Darren"
    },
    {
        "question": "An ice cream shop kept track of how many ice cream cones it sold in the past 4 days. On which day did the shop sell the most ice cream cones?",
        "answer": "Friday",
        "generated": [
            "ice_cream_sales = {'Thursday': 52, 'Friday': 59, 'Saturday': 51, 'Sunday': 54}\nmax_value = max(ice_cream_sales.values())\nfor key, value in ice_cream_sales.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Friday"
        ],
        "result_counter": {
            "Friday": 1
        },
        "prediction": "Friday"
    },
    {
        "question": "Hugo kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Tuesday and Wednesday?",
        "answer": -6.0,
        "generated": [
            "time_tuesday = 25\ntime_wednesday = 19\nans = time_wednesday - time_tuesday"
        ],
        "results": [
            -6.0
        ],
        "result_counter": {
            "-6.0": 1
        },
        "prediction": -6.0
    },
    {
        "question": "Some companies compared how many phone calls they made. In all, how many phone calls did Brave New Day Corporation and Henderson Co. make?",
        "answer": 8824.0,
        "generated": [
            "brave_new_day_calls = 1817\nhenderson_calls = 7007\nans = brave_new_day_calls + henderson_calls"
        ],
        "results": [
            8824.0
        ],
        "result_counter": {
            "8824.0": 1
        },
        "prediction": 8824.0
    },
    {
        "question": "The architecture student counted the number of bricks in each building in her neighborhood. How many buildings have at least 66 bricks but fewer than 93 bricks?",
        "answer": 8.0,
        "generated": [
            "brick_numbers = [27, 27, 29, 44, 47, 51, 51, 53, 58, 70, 73, 74, 78, 80, 83, 83, 90]\nbuildings_in_range = [num for num in brick_numbers if 66 <= num < 93]\nans = len(buildings_in_range)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "The manager of a party supply store researched how many balloons it sold in the past 4 days. On which day did the store sell the fewest balloons?",
        "answer": "Sunday",
        "generated": [
            "balloons_sold = {'Thursday': 888, 'Friday': 838, 'Saturday': 843, 'Sunday': 834}\nmin_value = min(balloons_sold.values())\nfor key, value in balloons_sold.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Sunday"
        ],
        "result_counter": {
            "Sunday": 1
        },
        "prediction": "Sunday"
    },
    {
        "question": "Each box has 5 pumpkin scones. How many pumpkin scones are in 5 boxes?",
        "answer": 25.0,
        "generated": [
            "scones_per_box = 5\nnumber_of_boxes = 5\nans = scones_per_box * number_of_boxes"
        ],
        "results": [
            25.0
        ],
        "result_counter": {
            "25.0": 1
        },
        "prediction": 25.0
    },
    {
        "question": "Monica went to the store and bought 1.9 pounds of rectangular erasers . How much did she spend?",
        "answer": 5.7,
        "generated": [
            "rectangular_erasers_price_per_lb = 3\nweight = 1.9\ntotal_cost = rectangular_erasers_price_per_lb * weight\nans = total_cost"
        ],
        "results": [
            5.699999999999999
        ],
        "result_counter": {
            "5.699999999999999": 1
        },
        "prediction": 5.699999999999999
    },
    {
        "question": "Caleb has $8. Does he have enough to buy pasta with white sauce and grilled eggplant?",
        "answer": "yes",
        "generated": [
            "white_sauce_pasta = 4\ngrilled_eggplant = 4\ntotal_money = 8\nif total_money >= white_sauce_pasta + grilled_eggplant:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Connor's P.E. class participated in a push-up competition, and Connor wrote down how many push-ups each person could do. How many people did at least 43 push-ups but fewer than 63 push-ups?",
        "answer": 7.0,
        "generated": [
            "push_ups_list = [46, 47, 48, 52, 56, 61, 62, 66, 68, 71, 77, 78]\ncount = 0\nfor push_ups in push_ups_list:\n    if 43 <= push_ups < 63:\n        count += 1\nans = count"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Each train has 2 cars. How many cars are on 6 trains?",
        "answer": 12.0,
        "generated": [
            "cars_per_train = 2\nnumber_of_trains = 6\nans = cars_per_train * number_of_trains"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "The employees at Jeremiah's Construction monitored the number of cracked window panes in each shipment they received. How many shipments had at least 10 cracked window panes but less than 90 cracked window panes?",
        "answer": 8.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nshipments = [10, 18, 25, 26, 49, 66, 79, 81]\nans = len(shipments)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "A shipping company keeps track of the number of boxes in each shipment they send out. How many shipments had exactly 56 boxes?",
        "answer": 0.0,
        "generated": [
            "stem_leaf_data = {\n    1: [9],\n    2: [6],\n    3: [4, 9],\n    4: [1, 9],\n    5: [0, 3, 9],\n    6: [4, 8]\n}\n\ntarget_value = 56\ntarget_stem = target_value // 10\ntarget_leaf = target_value % 10\n\nans = stem_leaf_data[target_stem].count(target_leaf)"
        ],
        "results": [
            0.0
        ],
        "result_counter": {
            "0.0": 1
        },
        "prediction": 0.0
    },
    {
        "question": "A food industry researcher compiled the revenues of several pizzerias. How much more did Pizzas Only make from pepperoni pizza sales than from cheese pizza sales?",
        "answer": 11.0,
        "generated": [
            "pepperoni_sales_pizzas_only = 19\ncheese_sales_pizzas_only = 8\nans = pepperoni_sales_pizzas_only - cheese_sales_pizzas_only"
        ],
        "results": [
            11.0
        ],
        "result_counter": {
            "11.0": 1
        },
        "prediction": 11.0
    },
    {
        "question": "Oliver has $0.05. Does he have enough to buy a robot stamp and a coyote stamp?",
        "answer": "no",
        "generated": [
            "coyote_stamp_price = 0.05\nrobot_stamp_price = 0.01\ntotal_money = 0.05\nif total_money > coyote_stamp_price + robot_stamp_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [12, 13, 14]\ny_values = [11, 15, 19]\n\nslope1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "Isaiah has $836. Does he have enough to buy a clothes dryer and a barbecue grill?",
        "answer": "no",
        "generated": [
            "clothes_dryer_price = 645\nbarbecue_grill_price = 202\ntotal_money = 836\nif total_money > clothes_dryer_price + barbecue_grill_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Some farmers compared how many tractors they own. What is the range of the numbers?",
        "answer": 6.0,
        "generated": [
            "tractors = [8, 8, 5, 9, 6, 3, 4, 7]\nans = max(tractors) - min(tractors)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "How much more does a baseball glove cost than a jump rope?",
        "answer": 3.48,
        "generated": [
            "baseball_glove_cost = 9.56\njump_rope_cost = 6.08\nans = baseball_glove_cost - jump_rope_cost"
        ],
        "results": [
            3.4800000000000004
        ],
        "result_counter": {
            "3.4800000000000004": 1
        },
        "prediction": 3.4800000000000004
    },
    {
        "question": "Each shelf has 2 blocks of cheese. How many blocks of cheese are on 3 shelves?",
        "answer": 6.0,
        "generated": [
            "blocks_per_shelf = 2\nnumber_of_shelves = 3\nans = blocks_per_shelf * number_of_shelves"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "How much money does Lee need to buy pasta with tomato sauce, pasta with white sauce, and spaghetti and meatballs?",
        "answer": 21.0,
        "generated": [
            "pasta_tomato_sauce = 6\npasta_white_sauce = 7\nspaghetti_meatballs = 8\nans = pasta_tomato_sauce + pasta_white_sauce + spaghetti_meatballs"
        ],
        "results": [
            21.0
        ],
        "result_counter": {
            "21.0": 1
        },
        "prediction": 21.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $15, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_15 = 21700\nquantity_supplied_price_15 = 1000\nif quantity_demanded_price_15 > quantity_supplied_price_15:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "At a candy factory, butterscotch candies were packaged into bags of different sizes. What is the smallest number of butterscotch candies?",
        "answer": 9.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbutterscotch_number_list = [9, 21, 22, 24, 47, 50, 50, 50, 69, 70, 71, 75, 80, 88, 90]\nans = min(butterscotch_number_list)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "How much money does Billy need to buy 5 boxes of crayons?",
        "answer": 11.2,
        "generated": [
            "crayon_price = 2.24\nnumber_of_crayons = 5\nans = crayon_price * number_of_crayons"
        ],
        "results": [
            11.200000000000001
        ],
        "result_counter": {
            "11.200000000000001": 1
        },
        "prediction": 11.200000000000001
    },
    {
        "question": "How much money does David need to buy 4 pairs of shorts?",
        "answer": 66.6,
        "generated": [
            "shorts_price = 16.65\nnumber_of_shorts = 4\nans = shorts_price * number_of_shorts"
        ],
        "results": [
            66.6
        ],
        "result_counter": {
            "66.6": 1
        },
        "prediction": 66.6
    },
    {
        "question": "How much would it cost to buy 4 pounds of quick oatmeal ?",
        "answer": 5.88,
        "generated": [
            "quick_oatmeal_price_per_lb = 1.47\npounds = 4\nans = quick_oatmeal_price_per_lb * pounds"
        ],
        "results": [
            5.88
        ],
        "result_counter": {
            "5.88": 1
        },
        "prediction": 5.88
    },
    {
        "question": "The financial aid office at Barton University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2013 and 2014?",
        "answer": 3.0,
        "generated": [
            "students_2013 = 45\nstudents_2014 = 48\nans = students_2014 - students_2013"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "A health instructor surveyed all her students, and tallied the results. The first survey question asked, \"Do you adhere to a vegetarian diet or omnivorous diet?\" The second question asked, \"If you were to buy a pet today, which animal would it be?\" What is the probability that a randomly selected student adheres to a vegetarian diet and would buy a cat? Simplify any fractions.",
        "answer": "3/10",
        "generated": [
            "total_students = 3 + 6 + 5 + 6\nvegetarian_and_cat = 6\nans = vegetarian_and_cat / total_students"
        ],
        "results": [
            0.3
        ],
        "result_counter": {
            "0.3": 1
        },
        "prediction": 0.3
    },
    {
        "question": "Roger has $1,485. How much money will Roger have left if he buys a washing machine and a dishwasher?",
        "answer": 913.0,
        "generated": [
            "total_money = 1485\nwashing_machine_price = 171\ndishwasher_price = 401\nmoney_left = total_money - (washing_machine_price + dishwasher_price)\nans = money_left"
        ],
        "results": [
            913.0
        ],
        "result_counter": {
            "913.0": 1
        },
        "prediction": 913.0
    },
    {
        "question": "At a hot air balloon festival, Harold made note of how many passengers were in each balloon and the color of each balloon. What is the probability that a randomly selected hot air balloon is blue and contains 1 passenger? Simplify any fractions.",
        "answer": "1/3",
        "generated": [
            "blue_1_passenger = 6\ntotal_balloons = 6 + 4 + 3 + 5\nans = blue_1_passenger / total_balloons"
        ],
        "results": [
            0.3333333333333333
        ],
        "result_counter": {
            "0.3333333333333333": 1
        },
        "prediction": 0.3333333333333333
    },
    {
        "question": "A math textbook explains probability by showing a set of cards numbered 4 through 9 and showing the number of people who might draw each card. Which number was drawn the most times?",
        "answer": 8.0,
        "generated": [
            "number_frequency = {4: 14, 5: 11, 6: 3, 7: 9, 8: 18, 9: 16}\nmax_value = max(number_frequency.values())\nfor key, value in number_frequency.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Lola counted the number of peanuts in each bag of trail mix. How many bags had exactly 72 peanuts?",
        "answer": 4.0,
        "generated": [
            "peanuts_per_bag = [46, 53, 63, 69, 70, 72, 72, 72, 72, 77, 78, 85, 89]\nbags_with_72_peanuts = peanuts_per_bag.count(72)\nans = bags_with_72_peanuts"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "Keenan has $1,482.00. Does he have enough to buy a motorcycle and a sailboat?",
        "answer": "yes",
        "generated": [
            "motorcycle_price = 932.00\nsailboat_price = 528.00\ntotal_money = 1482.00\nif total_money > motorcycle_price + sailboat_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Jackson, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did more than 1 pull-up?",
        "answer": 35.0,
        "generated": [
            "number_of_pullups_frequency = {0: 17, 1: 15, 2: 4, 3: 0, 4: 19, 5: 12}\nans = sum([frequency for pullups, frequency in number_of_pullups_frequency.items() if pullups > 1])"
        ],
        "results": [
            35.0
        ],
        "result_counter": {
            "35.0": 1
        },
        "prediction": 35.0
    },
    {
        "question": "Look at the following schedule. Which event ends at 4.50 P.M.?",
        "answer": "student government meeting",
        "generated": [
            "event_dict = {'women\\'s soccer practice': ('2:25 P.M.', '3:35 P.M.'),\n              'student government meeting': ('3:10 P.M.', '4:50 P.M.'),\n              'men\\'s soccer practice': ('4:10 P.M.', '5:35 P.M.'),\n              'water polo practice': ('5:20 P.M.', '6:10 P.M.'),\n              'marching band practice': ('6:00 P.M.', '7:30 P.M.'),\n              'choir concert': ('7:15 P.M.', '8:00 P.M.')}\n\nfor key, value in event_dict.items():\n    if value[1] == '4:50 P.M.':\n        ans = key"
        ],
        "results": [
            "student government meeting"
        ],
        "result_counter": {
            "student government meeting": 1
        },
        "prediction": "student government meeting"
    },
    {
        "question": "A school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2019 and 2020?",
        "answer": 3.0,
        "generated": [
            "students_2019 = 10\nstudents_2020 = 13\nans = students_2020 - students_2019"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [11, 12, 13]\ny_values = [9, 6, 3]\n\nslope1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "A plant nursery in Oxford keeps records of how many of its plants are annuals, biennials, and perennials. What fraction of the plants are annuals? Simplify your answer.",
        "answer": "47/137",
        "generated": [
            "total_plants = 38 + 47 + 52\nannuals = 47\nans = annuals / total_plants"
        ],
        "results": [
            0.34306569343065696
        ],
        "result_counter": {
            "0.34306569343065696": 1
        },
        "prediction": 0.34306569343065696
    },
    {
        "question": "Kathleen, an employee at McCarthy's Convenience Store, looked at the sales of each of its soda products. How much did the convenience store make from Krazy Kola sales on Saturday?",
        "answer": 2.0,
        "generated": [
            "krazy_kola_sales_saturday = 2\nans = krazy_kola_sales_saturday"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "Aiden went to the store and bought 2+1/2 pounds of marmalade. How much did he spend?",
        "answer": 10.0,
        "generated": [
            "marmalade_price_per_lb = 4\nmarmalade_weight = 2 + 1/2\ntotal_cost = marmalade_price_per_lb * marmalade_weight\nans = total_cost"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "Each shelf has 2 purple crayons. How many purple crayons are on 4 shelves?",
        "answer": 8.0,
        "generated": [
            "purple_crayons_per_shelf = 2\nnumber_of_shelves = 4\nans = purple_crayons_per_shelf * number_of_shelves"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "A city's school board compared how many students attend each high school. Which school has the most students?",
        "answer": "Truman High",
        "generated": [
            "school_dict = {'Truman High': 776, 'Oak High': 764, 'Hillcrest High': 746, 'Watson High': 747}\nmax_value = max(school_dict.values())\nfor key, value in school_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Truman High"
        ],
        "result_counter": {
            "Truman High": 1
        },
        "prediction": "Truman High"
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [4, 5, 6]\ny_values = [20, 11, 2]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "A waitress kept track of how many hours she worked each day. What is the mean of the numbers?",
        "answer": 8.0,
        "generated": [
            "hours_worked = [10, 10, 6, 6, 8]\nans = sum(hours_worked) / len(hours_worked)"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Krysta has $5,311.00. Does she have enough to buy a boa constrictor and an alpaca?",
        "answer": "no",
        "generated": [
            "boa_constrictor_price = 1483.00\nalpaca_price = 3992.00\ntotal_money = 5311.00\nif total_money > boa_constrictor_price + alpaca_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "While doing a project for P. E. class, Kendra researched the number of athletes competing in an international sporting event. How many countries have exactly 64 athletes?",
        "answer": 3.0,
        "generated": [
            "stem_leaf = {\n    4: [3, 9],\n    5: [4, 7],\n    6: [2, 3, 4, 4, 4, 9],\n    7: [1, 1, 3, 5],\n    8: [],\n    9: [0]\n}\n\ncountries_with_64_athletes = stem_leaf[6].count(4)\nans = countries_with_64_athletes"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Each shelf has 2 history books. How many history books are on 6 shelves?",
        "answer": 12.0,
        "generated": [
            "number_of_shelves = 6\nbooks_per_shelf = 2\nans = number_of_shelves * books_per_shelf"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "Each bunch has 5 balloons. How many balloons are in 4 bunches?",
        "answer": 20.0,
        "generated": [
            "balloons_per_bunch = 5\nnumber_of_bunches = 4\nans = balloons_per_bunch * number_of_bunches"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "A chef kept track of the number of bananas people ate last week in her cafeteria. How many people ate at least 2 bananas last week?",
        "answer": 27.0,
        "generated": [
            "frequency_at_least_2_bananas = [10, 6, 11]\nans = sum(frequency_at_least_2_bananas)"
        ],
        "results": [
            27.0
        ],
        "result_counter": {
            "27.0": 1
        },
        "prediction": 27.0
    },
    {
        "question": "Each table has 10 notepads. How many notepads are on 6 tables?",
        "answer": 60.0,
        "generated": [
            "notepads_per_table = 10\nnumber_of_tables = 6\nans = notepads_per_table * number_of_tables"
        ],
        "results": [
            60.0
        ],
        "result_counter": {
            "60.0": 1
        },
        "prediction": 60.0
    },
    {
        "question": "While working as a summer camp counselor, Cole monitored how many candy necklaces each child made. How many children did not make any candy necklaces?",
        "answer": 1.0,
        "generated": [
            "number_of_necklaces = [0, 1, 2, 3]\nfrequency = [1, 3, 19, 2]\nno_necklaces_index = number_of_necklaces.index(0)\nans = frequency[no_necklaces_index]"
        ],
        "results": [
            1.0
        ],
        "result_counter": {
            "1.0": 1
        },
        "prediction": 1.0
    },
    {
        "question": "How much money does Ruben need to buy a white polo shirt and a white T-shirt?",
        "answer": 14.0,
        "generated": [
            "white_polo_shirt = 9.00\nwhite_tshirt = 5.00\nans = white_polo_shirt + white_tshirt"
        ],
        "results": [
            14.0
        ],
        "result_counter": {
            "14.0": 1
        },
        "prediction": 14.0
    },
    {
        "question": "Mariana purchased 3/10 of a kilogram of size 1 screws. What was the total cost?",
        "answer": 0.9,
        "generated": [
            "size_1_screws_price = 3\namount_purchased = 3/10\ntotal_cost = size_1_screws_price * amount_purchased\nans = total_cost"
        ],
        "results": [
            0.8999999999999999
        ],
        "result_counter": {
            "0.8999999999999999": 1
        },
        "prediction": 0.8999999999999999
    },
    {
        "question": "How much money does Quinn need to buy a package of oatmeal cookies and 4 bags of walnuts?",
        "answer": 15.87,
        "generated": [
            "oatmeal_cookies = 4.63\nwalnuts = 2.81\ntotal_cost = oatmeal_cookies + (4 * walnuts)\nans = total_cost"
        ],
        "results": [
            15.870000000000001
        ],
        "result_counter": {
            "15.870000000000001": 1
        },
        "prediction": 15.870000000000001
    },
    {
        "question": "If Luther buys 1 pound of raspberry yogurt and 1 pound of low-fat yogurt, how much will he spend?",
        "answer": 6.59,
        "generated": [
            "raspberry_yogurt_price = 3.20\nlow_fat_yogurt_price = 3.39\ntotal_cost = raspberry_yogurt_price + low_fat_yogurt_price\nans = total_cost"
        ],
        "results": [
            6.59
        ],
        "result_counter": {
            "6.59": 1
        },
        "prediction": 6.59
    },
    {
        "question": "A Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Wednesday and Thursday?",
        "answer": -4.0,
        "generated": [
            "wednesday_sales = 38\nthursday_sales = 34\nans = thursday_sales - wednesday_sales"
        ],
        "results": [
            -4.0
        ],
        "result_counter": {
            "-4.0": 1
        },
        "prediction": -4.0
    },
    {
        "question": "A volunteer for the local running club counted the number of participants at each race. How many races had at least 30 participants but fewer than 60 participants?",
        "answer": 6.0,
        "generated": [
            "number_list = [29, 34, 38, 42, 45, 46, 59, 65, 68, 71, 74, 77, 80, 83, 87]\ncount = 0\nfor number in number_list:\n    if 30 <= number < 60:\n        count += 1\nans = count"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Robert entered his sister into their town's Smelly Shoe Competition. Robert observed contestants of all ages proudly strutting around wearing different kinds of smelly shoes. What is the probability that a randomly selected contestant is wearing high heels and is under age 12? Simplify any fractions.",
        "answer": "3/19",
        "generated": [
            "total_contestants = (4 + 5) + (3 + 7)\nhigh_heels_under_12 = 3\nans = high_heels_under_12 / total_contestants"
        ],
        "results": [
            0.15789473684210525
        ],
        "result_counter": {
            "0.15789473684210525": 1
        },
        "prediction": 0.15789473684210525
    },
    {
        "question": "Jeanette's classmates recorded how many books they read last year. What is the range of the numbers?",
        "answer": 19.0,
        "generated": [
            "books_read = [30, 49, 35, 41, 35, 49, 36, 42]\nans = max(books_read) - min(books_read)"
        ],
        "results": [
            19.0
        ],
        "result_counter": {
            "19.0": 1
        },
        "prediction": 19.0
    },
    {
        "question": "A farmer wrote down how many kilograms of cherries were sold in the past 4 days. How many more kilograms of cherries were sold on Tuesday than on Monday?",
        "answer": 743.0,
        "generated": [
            "cherries_sold_monday = 101\ncherries_sold_tuesday = 844\nans = cherries_sold_tuesday - cherries_sold_monday"
        ],
        "results": [
            743.0
        ],
        "result_counter": {
            "743.0": 1
        },
        "prediction": 743.0
    },
    {
        "question": "How much money does Gabe need to buy 7 books of crossword puzzles and 6 books of piano music?",
        "answer": 64.41,
        "generated": [
            "crossword_puzzle_book_price = 2.55\npiano_music_book_price = 7.76\ntotal_money_needed = (7 * crossword_puzzle_book_price) + (6 * piano_music_book_price)\nans = total_money_needed"
        ],
        "results": [
            64.41
        ],
        "result_counter": {
            "64.41": 1
        },
        "prediction": 64.41
    },
    {
        "question": "A parent volunteer counted the number of boxes sold by each student participating in the cookie fundraiser. How many students sold at least 4 boxes of cookies?",
        "answer": 20.0,
        "generated": [
            "boxes_sold_frequency = {1: 3, 2: 2, 3: 6, 4: 0, 5: 20}\nstudents_sold_at_least_4 = sum([frequency for boxes, frequency in boxes_sold_frequency.items() if boxes >= 4])\nans = students_sold_at_least_4"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "A college professor asked her Psychology students to complete a personality test. She paid special attention to her students' career goals and their greatest fears. What is the probability that a randomly selected student has a fear of heights and wants to be a social worker? Simplify any fractions.",
        "answer": "1/6",
        "generated": [
            "total_students = 8 + 2 + 3 + 5\nfear_of_heights_social_worker = 3\nans = fear_of_heights_social_worker / total_students"
        ],
        "results": [
            0.16666666666666666
        ],
        "result_counter": {
            "0.16666666666666666": 1
        },
        "prediction": 0.16666666666666666
    },
    {
        "question": "Look at Carly's pay stub. Carly lives in a state without state income tax. How much payroll tax did Carly pay in total?",
        "answer": 80.17,
        "generated": [
            "federal_income_tax = 47.50\nother_taxes = 32.67\ntotal_taxes = federal_income_tax + other_taxes\nans = total_taxes"
        ],
        "results": [
            80.17
        ],
        "result_counter": {
            "80.17": 1
        },
        "prediction": 80.17
    },
    {
        "question": "To figure out how many vacation days she had left to use, Mandy looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2016 and 2017?",
        "answer": 8.0,
        "generated": [
            "vacation_days_2016 = 18\nvacation_days_2017 = 26\nans = vacation_days_2017 - vacation_days_2016"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Look at the following schedule. Which stop does the train depart from at 2.45 A.M.?",
        "answer": "Princeton",
        "generated": [
            "depart_times = {'Princeton': '2:45 A.M.', 'Westminster': '3:30 A.M.', 'Newberg': '5:30 A.M.', 'Belleville': '6:25 A.M.', 'Stamford': '7:55 A.M.', 'Oakland': '10:00 A.M.', 'Salem': '12:00 P.M.', 'Oakdale': '1:15 P.M.', 'Lakeside': '2:45 P.M.'}\nfor key, value in depart_times.items():\n    if value == '2:45 A.M.':\n        ans = key"
        ],
        "results": [
            "Princeton"
        ],
        "result_counter": {
            "Princeton": 1
        },
        "prediction": "Princeton"
    },
    {
        "question": "Josie has two part-time jobs. She works at the ice skating rink in the fall and winter, and she works at the amusement park during the spring and summer. Here are her yearly finances. What is Josie's gross income for the year?",
        "answer": 40851.0,
        "generated": [
            "ice_skating_rink_earnings = 19760\namusement_park_earnings = 21091\ngross_income = ice_skating_rink_earnings + amusement_park_earnings\nans = gross_income"
        ],
        "results": [
            40851.0
        ],
        "result_counter": {
            "40851.0": 1
        },
        "prediction": 40851.0
    },
    {
        "question": "The shop teacher, Mr. Suzuki, wrote down how many picture frames the students made last week. How many students made more than 1 picture frame?",
        "answer": 18.0,
        "generated": [
            "students_made_2_frames = 11\nstudents_made_3_frames = 7\nans = students_made_2_frames + students_made_3_frames"
        ],
        "results": [
            18.0
        ],
        "result_counter": {
            "18.0": 1
        },
        "prediction": 18.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [18, 19, 20]\ny_values = [0, 10, 20]\n\nslope1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "The manager of a party supply store researched how many balloons it sold in the past 6 days. What is the mode of the numbers?",
        "answer": 5.0,
        "generated": [
            "from collections import Counter\n\nballoons_sold = [4, 3, 4, 5, 5, 5]\ncounter = Counter(balloons_sold)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "Reggie has $0.50. Does he have enough to buy a thin green highlighter and a small box of paper clips?",
        "answer": "yes",
        "generated": [
            "green_highlighter_price = 0.14\npaper_clips_price = 0.25\ntotal_money = 0.50\nif total_money >= green_highlighter_price + paper_clips_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "How much would it cost to buy 5 pounds of soybeans?",
        "answer": 7.0,
        "generated": [
            "soybeans_price_per_lb = 1.40\npounds = 5\nans = soybeans_price_per_lb * pounds"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. How many bags had at least 54 lemon-flavored candies?",
        "answer": 7.0,
        "generated": [
            "stem_leaf_data = {\n    1: [2, 7],\n    2: [4],\n    3: [2, 3, 7],\n    4: [3, 4, 5, 5, 6],\n    5: [2],\n    6: [9],\n    7: [3, 9],\n    8: [4, 4, 9],\n    9: [0]\n}\n\nbags_with_54_or_more = 0\nfor stem, leaves in stem_leaf_data.items():\n    if stem >= 5:\n        bags_with_54_or_more += len(leaves)\n\nans = bags_with_54_or_more"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $385, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_385 = 14800\nquantity_supplied_price_385 = 7000\nif quantity_demanded_price_385 > quantity_supplied_price_385:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "Riley counted the number of words per page in her new book. What is the smallest number of words?",
        "answer": 65.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nwords_per_page_list = [65, 66, 69, 71, 72, 74, 79, 83, 83, 84, 88, 88, 90]\nans = min(words_per_page_list)"
        ],
        "results": [
            65.0
        ],
        "result_counter": {
            "65.0": 1
        },
        "prediction": 65.0
    },
    {
        "question": "If Wesley buys 3 kilograms of blue beads, how much will he spend?",
        "answer": 6.0,
        "generated": [
            "blue_beads_price = 2\nquantity = 3\nans = blue_beads_price * quantity"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "The teachers at a middle school counted how many computers they had in their classrooms. Which teacher has the most computers?",
        "answer": "Mr. Watson",
        "generated": [
            "computers_dict = {'Mrs. Rossi': 18, 'Mr. Watson': 19, 'Mrs. Tan': 11, 'Ms. Cohen': 17}\nmax_value = max(computers_dict.values())\nfor key, value in computers_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Mr. Watson"
        ],
        "result_counter": {
            "Mr. Watson": 1
        },
        "prediction": "Mr. Watson"
    },
    {
        "question": "An office manager counts the number of letters sent by each of her company's employees each week. How many employees mailed at least 3 letters?",
        "answer": 29.0,
        "generated": [
            "employees_mailing_3_or_more = 20 + 9\nans = employees_mailing_3_or_more"
        ],
        "results": [
            29.0
        ],
        "result_counter": {
            "29.0": 1
        },
        "prediction": 29.0
    },
    {
        "question": "Kaylee graphed the temperature at noon for 7 days. What is the range of the numbers?",
        "answer": 4.0,
        "generated": [
            "temperatures = [8, 8, 7, 7, 5, 6, 4]\nans = max(temperatures) - min(temperatures)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "Felipe's class tracked how many newspapers each student collected for their recycling project. What is the mean of the numbers?",
        "answer": 64.0,
        "generated": [
            "number_of_newspapers = [67, 66, 68, 72, 56, 56, 63]\nans = sum(number_of_newspapers) / len(number_of_newspapers)"
        ],
        "results": [
            64.0
        ],
        "result_counter": {
            "64.0": 1
        },
        "prediction": 64.0
    },
    {
        "question": "A coffee shop monitored the number of cups of coffee sold each day. What is the median of the numbers?",
        "answer": 60.0,
        "generated": [
            "cups_sold = [71, 57, 69, 59, 65, 58, 60]\ncups_sold = sorted(cups_sold)\nmiddle1 = (len(cups_sold) - 1) // 2\nmiddle2 = len(cups_sold) // 2\nans = (cups_sold[middle1] + cups_sold[middle2]) / 2"
        ],
        "results": [
            60.0
        ],
        "result_counter": {
            "60.0": 1
        },
        "prediction": 60.0
    },
    {
        "question": "A transportation analyst compared various bridges' tolls. Which charges more for a car, the Golden Gate bridge or the Oakland Bay bridge?",
        "answer": "Golden Gate",
        "generated": [
            "car_tolls = {'Fort Madison': 1, 'Golden Gate': 6, 'San Mateo': 4, 'Oakland Bay': 4}\ngolden_gate_car_toll = car_tolls['Golden Gate']\noakland_bay_car_toll = car_tolls['Oakland Bay']\nif golden_gate_car_toll > oakland_bay_car_toll:\n    ans = 'Golden Gate'\nelse:\n    ans = 'Oakland Bay'"
        ],
        "results": [
            "Golden Gate"
        ],
        "result_counter": {
            "Golden Gate": 1
        },
        "prediction": "Golden Gate"
    },
    {
        "question": "Mrs. Newman hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2012 and 2013?",
        "answer": 5.0,
        "generated": [
            "entries_2012 = 28\nentries_2013 = 33\nans = entries_2013 - entries_2012"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "The employee at the department store counted the number of ties on each tie rack. How many racks have at least 18 ties but fewer than 46 ties?",
        "answer": 9.0,
        "generated": [
            "tie_rack_numbers = [14, 17, 20, 25, 26, 26, 28, 28, 31, 32, 45, 46, 49]\ncount = 0\nfor number in tie_rack_numbers:\n    if 18 <= number < 46:\n        count += 1\nans = count"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Professor Gilmore informed his students of their scores on the midterm exam. How many students scored fewer than 80 points?",
        "answer": 19.0,
        "generated": [
            "scores = [40, 41, 43, 43, 44, 45, 45, 46, 47, 47, 51, 52, 54, 56, 56, 57, 62, 64, 79]\nans = len(scores)"
        ],
        "results": [
            19.0
        ],
        "result_counter": {
            "19.0": 1
        },
        "prediction": 19.0
    },
    {
        "question": "A technical support line tracked how many calls it received each day. On which day did the support line receive the fewest calls?",
        "answer": "Sunday",
        "generated": [
            "calls_dict = {'Sunday': 434, 'Monday': 435, 'Tuesday': 459, 'Wednesday': 445}\nmin_calls = min(calls_dict.values())\nfor day, calls in calls_dict.items():\n    if calls == min_calls:\n        ans = day"
        ],
        "results": [
            "Sunday"
        ],
        "result_counter": {
            "Sunday": 1
        },
        "prediction": "Sunday"
    },
    {
        "question": "Shane's school reported how many members each sports team had. Which team has the most members?",
        "answer": "volleyball team",
        "generated": [
            "team_members = {'wrestling team': 27, 'volleyball team': 29, 'track team': 21, 'swimming team': 26}\nmax_value = max(team_members.values())\nfor key, value in team_members.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "volleyball team"
        ],
        "result_counter": {
            "volleyball team": 1
        },
        "prediction": "volleyball team"
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "yes",
        "generated": [
            "x_values = [18, 17, 14]\nif len(x_values) == len(set(x_values)):\n    ans = 'yes'\nelse:\n    ans = 'no'"
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Ava has $13,906.00. Does she have enough to buy a designer handbag and a designer coat?",
        "answer": "no",
        "generated": [
            "handbag_price = 8180.00\ncoat_price = 5950.00\ntotal_money = 13906.00\nif total_money > handbag_price + coat_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Emilia went to the store and bought 5 pounds of gingersnap cookie dough, 4 pounds of snickerdoodle cookie dough, and 2 pounds of chocolate chip cookie dough. How much did she spend?",
        "answer": 70.0,
        "generated": [
            "gingersnap_price = 8\nsnickerdoodle_price = 4\nchocolate_chip_price = 7\n\ngingersnap_quantity = 5\nsnickerdoodle_quantity = 4\nchocolate_chip_quantity = 2\n\ntotal_cost = (gingersnap_price * gingersnap_quantity) + (snickerdoodle_price * snickerdoodle_quantity) + (chocolate_chip_price * chocolate_chip_quantity)\nans = total_cost"
        ],
        "results": [
            70.0
        ],
        "result_counter": {
            "70.0": 1
        },
        "prediction": 70.0
    },
    {
        "question": "How much more does a pair of skis cost than a set of golf clubs?",
        "answer": 316.0,
        "generated": [
            "skis_cost = 648\ngolf_clubs_cost = 332\nans = skis_cost - golf_clubs_cost"
        ],
        "results": [
            316.0
        ],
        "result_counter": {
            "316.0": 1
        },
        "prediction": 316.0
    },
    {
        "question": "Daniel paid attention to how many comic strips he read in the past 7 days. What is the mean of the numbers?",
        "answer": 4.0,
        "generated": [
            "number_of_comic_strips = [5, 1, 8, 2, 3, 7, 2]\nans = sum(number_of_comic_strips) / len(number_of_comic_strips)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "How much money does Nina need to buy 2 orders of buttermilk pancakes?",
        "answer": 14.48,
        "generated": [
            "buttermilk_pancakes_price = 7.24\nquantity = 2\nans = buttermilk_pancakes_price * quantity"
        ],
        "results": [
            14.48
        ],
        "result_counter": {
            "14.48": 1
        },
        "prediction": 14.48
    },
    {
        "question": "How much money does Gabby need to buy 5 tickets for a Caribbean cruise?",
        "answer": 4940.0,
        "generated": [
            "caribbean_cruise_ticket = 988\nnumber_of_tickets = 5\nans = caribbean_cruise_ticket * number_of_tickets"
        ],
        "results": [
            4940.0
        ],
        "result_counter": {
            "4940.0": 1
        },
        "prediction": 4940.0
    },
    {
        "question": "Jennifer was the lucky journalist assigned to cover the Best Beard Competition. She recorded the contestants' beard colors in her notepad. Jennifer also noted if the contestants were signed up for the mustache competition later in the day. What is the probability that a randomly selected contestant is also in the mustache competition and has a red beard? Simplify any fractions.",
        "answer": "1/3",
        "generated": [
            "total_contestants = (5 + 3) + (5 + 2)\nred_beard_mustache_contestants = 5\nans = red_beard_mustache_contestants / total_contestants"
        ],
        "results": [
            0.3333333333333333
        ],
        "result_counter": {
            "0.3333333333333333": 1
        },
        "prediction": 0.3333333333333333
    },
    {
        "question": "Look at the following schedule. Jake got on the bus at the hotel at 8.45 A.M. What time will he get to the baseball stadium?",
        "answer": "9:30 A.M.",
        "generated": [
            "hotel_to_baseball_stadium = {'8:30 A.M.': '9:15 A.M.', '8:45 A.M.': '9:30 A.M.', '9:15 A.M.': '10:00 A.M.', '9:45 A.M.': '10:30 A.M.', '10:00 A.M.': '10:45 A.M.'}\njake_departure_time = '8:45 A.M.'\nans = hotel_to_baseball_stadium[jake_departure_time]"
        ],
        "results": [
            "9:30 A.M."
        ],
        "result_counter": {
            "9:30 A.M.": 1
        },
        "prediction": "9:30 A.M."
    },
    {
        "question": "A toy store employee counted the number of toys in each bin in the sale section. What is the largest number of toys?",
        "answer": 88.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\ntoys_number_list = [22, 30, 31, 37, 40, 43, 44, 44, 45, 46, 49, 60, 67, 70, 71, 72, 72, 74, 77, 80, 80, 86, 88, 88]\nans = max(toys_number_list)"
        ],
        "results": [
            88.0
        ],
        "result_counter": {
            "88.0": 1
        },
        "prediction": 88.0
    },
    {
        "question": "Some friends compared the sizes of their sticker collections. What is the mean of the numbers?",
        "answer": 70.0,
        "generated": [
            "number_of_stickers_for_different_person = [74, 66, 72, 71, 69, 71, 69, 68]\nans = sum(number_of_stickers_for_different_person) / len(number_of_stickers_for_different_person)"
        ],
        "results": [
            70.0
        ],
        "result_counter": {
            "70.0": 1
        },
        "prediction": 70.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $635, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_635 = 10400\nquantity_supplied_price_635 = 14600\nif quantity_demanded_price_635 > quantity_supplied_price_635:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "In order to complete their model of a futuristic highway, students in Ms. Frank's design class find out how many toy cars each student can bring to class. How many students have more than 1 toy car?",
        "answer": 62.0,
        "generated": [
            "number_of_students_with_cars = {0: 15, 1: 5, 2: 17, 3: 6, 4: 19, 5: 2, 6: 18}\nstudents_with_more_than_one_car = sum([value for key, value in number_of_students_with_cars.items() if key > 1])\nans = students_with_more_than_one_car"
        ],
        "results": [
            62.0
        ],
        "result_counter": {
            "62.0": 1
        },
        "prediction": 62.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [4, 5, 6]\ny_values = [2, 11, 20]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "How much more does a crane cost than a hydrofoil?",
        "answer": 522.0,
        "generated": [
            "crane_cost = 8867\nhydrofoil_cost = 8345\nans = crane_cost - hydrofoil_cost"
        ],
        "results": [
            522.0
        ],
        "result_counter": {
            "522.0": 1
        },
        "prediction": 522.0
    },
    {
        "question": "Jeanette just returned from a spring break volunteer trip. She is shopping for a photo album that will showcase her photos from the trip. The albums range in photo capacity and orientation. What is the probability that a randomly selected photo album is oriented vertically and holds exactly 100 photos? Simplify any fractions.",
        "answer": "3/13",
        "generated": [
            "total_albums = 2 + 4 + 4 + 3\nvertical_100_photos = 3\nans = vertical_100_photos / total_albums"
        ],
        "results": [
            0.23076923076923078
        ],
        "result_counter": {
            "0.23076923076923078": 1
        },
        "prediction": 0.23076923076923078
    },
    {
        "question": "Zach just downloaded the new game Gem Excavator on his phone. In the first level, Zach gains points for each green gem he finds. However, he loses points for each red gem he finds. The table shows how the gems affect Zach's points. Which color gem affects Zach's points less?",
        "answer": "green",
        "generated": [
            "green_points = 25\nred_points = -40\nif abs(green_points) < abs(red_points):\n    ans = 'green'\nelse:\n    ans = 'red'"
        ],
        "results": [
            "green"
        ],
        "result_counter": {
            "green": 1
        },
        "prediction": "green"
    },
    {
        "question": "The houses in Myra's town get their water from a local reservoir. Myra and a group of engineers monitor the water level for safety and health reasons. The change in water level over two months is shown in the table. During which month did the water level change more?",
        "answer": "April",
        "generated": [
            "change_in_water_level = {'April': -6, 'May': 4}\nmax_change = max(abs(value) for value in change_in_water_level.values())\nfor month, change in change_in_water_level.items():\n    if abs(change) == max_change:\n        ans = month"
        ],
        "results": [
            "April"
        ],
        "result_counter": {
            "April": 1
        },
        "prediction": "April"
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [13, 14, 15]\ny_values = [1, 10, 19]\n\nslope1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "How much would it cost to buy 1 kilogram of tuna and 2 kilograms of catfish?",
        "answer": 9.0,
        "generated": [
            "tuna_price_per_kg = 3\ncatfish_price_per_kg = 3\ntuna_quantity = 1\ncatfish_quantity = 2\nans = (tuna_price_per_kg * tuna_quantity) + (catfish_price_per_kg * catfish_quantity)"
        ],
        "results": [
            9.0
        ],
        "result_counter": {
            "9.0": 1
        },
        "prediction": 9.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $1,020, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_1020 = 4300\nquantity_supplied_price_1020 = 20300\nif quantity_demanded_price_1020 > quantity_supplied_price_1020:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "Lamar has $26,720.00. How much money will Lamar have left if he buys a green station wagon and a red sports car?",
        "answer": 8535.0,
        "generated": [
            "green_station_wagon = 9657\nred_sports_car = 8528\ntotal_money = 26720\nmoney_left = total_money - (green_station_wagon + red_sports_car)\nans = money_left"
        ],
        "results": [
            8535.0
        ],
        "result_counter": {
            "8535.0": 1
        },
        "prediction": 8535.0
    },
    {
        "question": "Each year the Springdale School District publishes its annual budget, which includes information on the sports program's per-student spending. According to the table, what was the rate of change between 2012 and 2013?",
        "answer": 2.0,
        "generated": [
            "per_student_budget_2012 = 25\nper_student_budget_2013 = 27\nans = per_student_budget_2013 - per_student_budget_2012"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "Maddie's class paid attention to how many bottles each student collected for their recycling project. What is the range of the numbers?",
        "answer": 5.0,
        "generated": [
            "bottles_collected = [33, 33, 35, 36, 31, 35, 32, 33]\nans = max(bottles_collected) - min(bottles_collected)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "A school interested in expanding its playground counted the number of times that students went down the slide during recess. How many students went down the slide more than 2 times?",
        "answer": 17.0,
        "generated": [
            "frequency_more_than_2_times = [12, 5]\nans = sum(frequency_more_than_2_times)"
        ],
        "results": [
            17.0
        ],
        "result_counter": {
            "17.0": 1
        },
        "prediction": 17.0
    },
    {
        "question": "Oscar has $12,538.00. Does he have enough to buy a ticket for a Mediterranean cruise and a ticket for an Atlantic cruise?",
        "answer": "no",
        "generated": [
            "mediterranean_cruise = 6138\natlantic_cruise = 6795\ntotal_money = 12538\nif total_money > mediterranean_cruise + atlantic_cruise:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "How much money does Helen need to buy 4 cookie sheets and a glass bowl?",
        "answer": 47.4,
        "generated": [
            "cookie_sheet_price = 9.86\nglass_bowl_price = 7.96\ntotal_money_needed = (4 * cookie_sheet_price) + glass_bowl_price\nans = total_money_needed"
        ],
        "results": [
            47.4
        ],
        "result_counter": {
            "47.4": 1
        },
        "prediction": 47.4
    },
    {
        "question": "A researcher recorded the number of cows on each farm in the county. What is the largest number of cows?",
        "answer": 88.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\ncows_number_list = [20, 23, 25, 32, 37, 57, 59, 60, 61, 62, 73, 74, 80, 84, 87, 88]\nans = max(cows_number_list)"
        ],
        "results": [
            88.0
        ],
        "result_counter": {
            "88.0": 1
        },
        "prediction": 88.0
    },
    {
        "question": "A baker wrote down how many pies she made in the past 7 days. What is the mean of the numbers?",
        "answer": 6.0,
        "generated": [
            "pies_baked = [0, 2, 10, 8, 5, 7, 10]\nans = sum(pies_baked) / len(pies_baked)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Dr. Barton, a zoo director, researched ticket prices at other zoos around the country. How much more does a senior ticket cost at the San Francisco Zoo than at the Central Florida Zoo?",
        "answer": 3.0,
        "generated": [
            "senior_ticket_sf = 12\nsenior_ticket_cf = 9\nans = senior_ticket_sf - senior_ticket_cf"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "The Springfield Middle School fundraising committee found out how many sweatshirts students already had, in order to decide whether to sell sweatshirts for a fundraiser. How many students have more than 2 sweatshirts?",
        "answer": 19.0,
        "generated": [
            "number_of_students_with_more_than_2_sweatshirts = 19\nans = number_of_students_with_more_than_2_sweatshirts"
        ],
        "results": [
            19.0
        ],
        "result_counter": {
            "19.0": 1
        },
        "prediction": 19.0
    },
    {
        "question": "An employee at the craft store counted the number of red buttons in each bag of mixed buttons. What is the largest number of red buttons?",
        "answer": 59.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nred_buttons_number_list = [23, 25, 42, 42, 43, 56, 58, 59]\nans = max(red_buttons_number_list)"
        ],
        "results": [
            59.0
        ],
        "result_counter": {
            "59.0": 1
        },
        "prediction": 59.0
    },
    {
        "question": "Dr. Lin, a pediatrician, weighed all the children who recently visited her office. How many children weighed exactly 30 pounds?",
        "answer": 4.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nweights_list = [30, 30, 30, 30, 34, 35, 37, 41, 41, 41, 43, 44, 48, 49, 54, 55, 56, 56, 58, 59, 59, 62, 65, 68]\nans = weights_list.count(30)"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "How much money does Connor need to buy a mechanical pencil and a bright yellow highlighter?",
        "answer": 0.07,
        "generated": [
            "mechanical_pencil_price = 0.06\nbright_yellow_highlighter_price = 0.01\nans = mechanical_pencil_price + bright_yellow_highlighter_price"
        ],
        "results": [
            0.06999999999999999
        ],
        "result_counter": {
            "0.06999999999999999": 1
        },
        "prediction": 0.06999999999999999
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [6, 7, 8]\ny_values = [16, 6, 0]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between April and May?",
        "answer": -1.0,
        "generated": [
            "waiting_time_april = 18\nwaiting_time_may = 17\nans = waiting_time_may - waiting_time_april"
        ],
        "results": [
            -1.0
        ],
        "result_counter": {
            "-1.0": 1
        },
        "prediction": -1.0
    },
    {
        "question": "How much more does a bottle of mustard cost than a jar of tomato sauce?",
        "answer": 0.24,
        "generated": [
            "mustard_price = 0.88\ntomato_sauce_price = 0.64\nans = mustard_price - tomato_sauce_price"
        ],
        "results": [
            0.24
        ],
        "result_counter": {
            "0.24": 1
        },
        "prediction": 0.24
    },
    {
        "question": "Justin's Candies has been studying how much chocolate people have been eating in different countries. Which country consumed less chocolate per capita in 2005, Australia or Sweden?",
        "answer": "Australia",
        "generated": [
            "chocolate_consumption_2005 = {'Austria': 9, 'Australia': 5, 'Belgium': 11, 'Sweden': 7, 'Denmark': 8}\nif chocolate_consumption_2005['Australia'] < chocolate_consumption_2005['Sweden']:\n    ans = 'Australia'\nelse:\n    ans = 'Sweden'"
        ],
        "results": [
            "Australia"
        ],
        "result_counter": {
            "Australia": 1
        },
        "prediction": "Australia"
    },
    {
        "question": "How much more does a winter jacket cost than a pair of sweat pants?",
        "answer": 16.19,
        "generated": [
            "winter_jacket_cost = 33.37\nsweat_pants_cost = 17.18\nans = winter_jacket_cost - sweat_pants_cost"
        ],
        "results": [
            16.189999999999998
        ],
        "result_counter": {
            "16.189999999999998": 1
        },
        "prediction": 16.189999999999998
    },
    {
        "question": "A pet store owner had his staff count the number of fish in each tank. How many tanks have fewer than 70 fish?",
        "answer": 17.0,
        "generated": [
            "stem_leaf_data = {\n    3: [5, 8],\n    4: [0, 2, 4, 4, 6],\n    5: [0, 2, 3, 4, 5, 6, 6, 8, 8],\n    6: [3]\n}\n\ntanks_with_fewer_than_70_fish = 0\n\nfor stem, leaves in stem_leaf_data.items():\n    for leaf in leaves:\n        if stem * 10 + leaf < 70:\n            tanks_with_fewer_than_70_fish += 1\n\nans = tanks_with_fewer_than_70_fish"
        ],
        "results": [
            17.0
        ],
        "result_counter": {
            "17.0": 1
        },
        "prediction": 17.0
    },
    {
        "question": "Look at Margarita's pay stub. Margarita lives in a state without state income tax. How much did Margarita make after taxes?",
        "answer": 542.04,
        "generated": [
            "total_earnings = 670\nfederal_income_tax = 76.70\nother_taxes = 51.26\ntotal_taxes = federal_income_tax + other_taxes\nans = total_earnings - total_taxes"
        ],
        "results": [
            542.04
        ],
        "result_counter": {
            "542.04": 1
        },
        "prediction": 542.04
    },
    {
        "question": "Each desk drawer has 2 notepads. How many notepads are in 4 desk drawers?",
        "answer": 8.0,
        "generated": [
            "notepads_per_drawer = 2\nnumber_of_drawers = 4\nans = notepads_per_drawer * number_of_drawers"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Look at the following schedule. At which stop does the train arrive at 1.15 P.M.?",
        "answer": "Lee Avenue",
        "generated": [
            "train_schedule = {'Spruce Boulevard': '10:40 A.M.', 'Church Road': '11:30 A.M.', 'Meadow Road': '12:00 P.M.', 'Center Boulevard': '12:10 P.M.', 'Hickory Road': '12:40 P.M.', 'Lee Avenue': '1:15 P.M.', 'Franklin Boulevard': '2:05 P.M.'}\ntime_to_find = '1:15 P.M.'\nfor location, time in train_schedule.items():\n    if time == time_to_find:\n        ans = location"
        ],
        "results": [
            "Lee Avenue"
        ],
        "result_counter": {
            "Lee Avenue": 1
        },
        "prediction": "Lee Avenue"
    },
    {
        "question": "Heather's classmates revealed how many science articles they read. How many more science articles did Heather read than Danny?",
        "answer": 212.0,
        "generated": [
            "heather_articles = 389\ndanny_articles = 177\nans = heather_articles - danny_articles"
        ],
        "results": [
            212.0
        ],
        "result_counter": {
            "212.0": 1
        },
        "prediction": 212.0
    },
    {
        "question": "How much more does a trumpet cost than a piccolo?",
        "answer": 543.0,
        "generated": [
            "trumpet_cost = 969.00\npiccolo_cost = 426.00\nans = trumpet_cost - piccolo_cost"
        ],
        "results": [
            543.0
        ],
        "result_counter": {
            "543.0": 1
        },
        "prediction": 543.0
    },
    {
        "question": "A transportation analyst compared various bridges' tolls. On the George Washington bridge, how much more is the toll for a truck than for a car?",
        "answer": 8.0,
        "generated": [
            "truck_toll = 16\ncar_toll = 8\nans = truck_toll - car_toll"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "Each tin has 5 muffins. How many muffins are in 4 tins?",
        "answer": 20.0,
        "generated": [
            "muffins_per_tin = 5\nnumber_of_tins = 4\nans = muffins_per_tin * number_of_tins"
        ],
        "results": [
            20.0
        ],
        "result_counter": {
            "20.0": 1
        },
        "prediction": 20.0
    },
    {
        "question": "A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2017 and 2018?",
        "answer": -34.0,
        "generated": [
            "weight_2017 = 49\nweight_2018 = 15\nrate_of_change = weight_2018 - weight_2017\nans = rate_of_change"
        ],
        "results": [
            -34.0
        ],
        "result_counter": {
            "-34.0": 1
        },
        "prediction": -34.0
    },
    {
        "question": "Some students visited nearby zoos to record the number of bears kept there. Which zoo has the fewest bears?",
        "answer": "Atlantic Zoo",
        "generated": [
            "zoo_bears = {'Atlantic Zoo': 3+5, 'Mountain Zoo': 3+16, 'Pacific Zoo': 5+4, 'Eastern Zoo': 10+15}\nmin_bears = min(zoo_bears.values())\nfor key, value in zoo_bears.items():\n    if value == min_bears:\n        ans = key"
        ],
        "results": [
            "Atlantic Zoo"
        ],
        "result_counter": {
            "Atlantic Zoo": 1
        },
        "prediction": "Atlantic Zoo"
    },
    {
        "question": "If Shawn buys 4 kilograms of yellow beads and 4 kilograms of green beads, how much will he spend?",
        "answer": 16.0,
        "generated": [
            "yellow_beads_price = 2\ngreen_beads_price = 2\nyellow_beads_weight = 4\ngreen_beads_weight = 4\nans = (yellow_beads_price * yellow_beads_weight) + (green_beads_price * green_beads_weight)"
        ],
        "results": [
            16.0
        ],
        "result_counter": {
            "16.0": 1
        },
        "prediction": 16.0
    },
    {
        "question": "A dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2009 and 2010?",
        "answer": 4.0,
        "generated": [
            "weight_2009 = 7\nweight_2010 = 11\nans = weight_2010 - weight_2009"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "A farmer wrote down how many kilograms of cherries were sold in the past 5 days. What is the median of the numbers?",
        "answer": 6.0,
        "generated": [
            "cherries_sold = [5, 7, 9, 5, 6]\ncherries_sold = sorted(cherries_sold)\nmiddle1 = (len(cherries_sold) - 1) // 2\nmiddle2 = len(cherries_sold) // 2\nans = (cherries_sold[middle1] + cherries_sold[middle2]) / 2"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "The owner of an orchard kept records about how many apples were picked in the past 4 days. On which day were the fewest apples picked?",
        "answer": "Friday",
        "generated": [
            "apples_picked = {'Tuesday': 314, 'Wednesday': 331, 'Thursday': 341, 'Friday': 313}\nmin_value = min(apples_picked.values())\nfor key, value in apples_picked.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Friday"
        ],
        "result_counter": {
            "Friday": 1
        },
        "prediction": "Friday"
    },
    {
        "question": "Tucker buys 1/4 of a pound of jasmine rice. How much does he spend?",
        "answer": 0.75,
        "generated": [
            "jasmine_rice_price_per_lb = 3\njasmine_rice_weight = 1/4\nans = jasmine_rice_price_per_lb * jasmine_rice_weight"
        ],
        "results": [
            0.75
        ],
        "result_counter": {
            "0.75": 1
        },
        "prediction": 0.75
    },
    {
        "question": "The town council reported on how many stop signs there are on each street. What is the mode of the numbers?",
        "answer": 10.0,
        "generated": [
            "stop_signs = [5, 10, 6, 10, 6, 6, 10, 10]\nfrom collections import Counter\ncounter = Counter(stop_signs)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            10.0
        ],
        "result_counter": {
            "10.0": 1
        },
        "prediction": 10.0
    },
    {
        "question": "How much money does Hugo need to buy a tiny bottle of sand and a plastic crab?",
        "answer": 1.01,
        "generated": [
            "tiny_bottle_of_sand = 0.42\nplastic_crab = 0.59\nans = tiny_bottle_of_sand + plastic_crab"
        ],
        "results": [
            1.01
        ],
        "result_counter": {
            "1.01": 1
        },
        "prediction": 1.01
    },
    {
        "question": "Each shopping bag has 2 pairs of jeans. How many pairs of jeans are in 6 shopping bags?",
        "answer": 12.0,
        "generated": [
            "pairs_of_jeans_per_bag = 2\nnumber_of_bags = 6\nans = pairs_of_jeans_per_bag * number_of_bags"
        ],
        "results": [
            12.0
        ],
        "result_counter": {
            "12.0": 1
        },
        "prediction": 12.0
    },
    {
        "question": "Dana counted the number of silver beads on each bracelet at Oakdale Jewelry, the store where she works. What is the largest number of silver beads?",
        "answer": 85.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nsilver_beads_number_list = [21, 22, 24, 28, 29, 34, 36, 38, 39, 39, 46, 48, 48, 51, 56, 62, 68, 70, 73, 74, 78, 78, 85]\nans = max(silver_beads_number_list)"
        ],
        "results": [
            85.0
        ],
        "result_counter": {
            "85.0": 1
        },
        "prediction": 85.0
    },
    {
        "question": "The bird watcher counted the number of birds in each flock that passed overhead. How many flocks had fewer than 27 birds?",
        "answer": 0.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nflocks = [28, 34, 46, 52, 54, 57]\nans = sum(1 for flock in flocks if flock < 27)"
        ],
        "results": [
            0.0
        ],
        "result_counter": {
            "0.0": 1
        },
        "prediction": 0.0
    },
    {
        "question": "Ben has $17,781. Does he have enough to buy a shaved ice cart and a peanut cart?",
        "answer": "yes",
        "generated": [
            "shaved_ice_cart_price = 7649\npeanut_cart_price = 9406\ntotal_money = 17781\nif total_money > shaved_ice_cart_price + peanut_cart_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "The members of the track team compared how many miles they ran last week. What is the mean of the numbers?",
        "answer": 15.0,
        "generated": [
            "miles_run = [14, 15, 18, 12, 14, 15, 17]\nans = sum(miles_run) / len(miles_run)"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "linear",
        "generated": [
            "x_values = [7, 8, 9]\ny_values = [15, 16, 17]\n\nslope = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nis_linear = True\n\nfor i in range(1, len(x_values) - 1):\n    current_slope = (y_values[i + 1] - y_values[i]) / (x_values[i + 1] - x_values[i])\n    if current_slope != slope:\n        is_linear = False\n        break\n\nif is_linear:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "linear"
        ],
        "result_counter": {
            "linear": 1
        },
        "prediction": "linear"
    },
    {
        "question": "Diana bought a bag of colored chocolate candies. Before putting them into a bowl, she counted the number of candies of each color in a frequency chart. Diana then puts another bag of 56 black and white chocolate candies into a second bowl. How many candies are in both bowls combined?",
        "answer": 114.0,
        "generated": [
            "color_frequencies = [7, 12, 8, 11, 13, 7]\ntotal_colored_candies = sum(color_frequencies)\nblack_and_white_candies = 56\nans = total_colored_candies + black_and_white_candies"
        ],
        "results": [
            114.0
        ],
        "result_counter": {
            "114.0": 1
        },
        "prediction": 114.0
    },
    {
        "question": "How much more does an Australian vacation package cost than a Jamaican vacation package?",
        "answer": 2625.0,
        "generated": [
            "australian_vacation_cost = 9664\njamaican_vacation_cost = 7039\nans = australian_vacation_cost - jamaican_vacation_cost"
        ],
        "results": [
            2625.0
        ],
        "result_counter": {
            "2625.0": 1
        },
        "prediction": 2625.0
    },
    {
        "question": "A bookstore employee looked up how many books were sold each month. In which month did the bookstore sell the fewest books?",
        "answer": "June",
        "generated": [
            "books_sold = {'April': 797, 'May': 796, 'June': 769, 'July': 776}\nmin_value = min(books_sold.values())\nfor key, value in books_sold.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "June"
        ],
        "result_counter": {
            "June": 1
        },
        "prediction": "June"
    },
    {
        "question": "Gwen wants to buy 3 pounds of tapioca pudding. How much will she spend?",
        "answer": 13.26,
        "generated": [
            "tapioca_pudding_price = 4.42\npounds = 3\nans = tapioca_pudding_price * pounds"
        ],
        "results": [
            13.26
        ],
        "result_counter": {
            "13.26": 1
        },
        "prediction": 13.26
    },
    {
        "question": "Each restaurant table has 2 salt shakers. How many salt shakers are on 3 restaurant tables?",
        "answer": 6.0,
        "generated": [
            "salt_shakers_per_table = 2\nnumber_of_tables = 3\nans = salt_shakers_per_table * number_of_tables"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Each shelf has 5 belts. How many belts are on 3 shelves?",
        "answer": 15.0,
        "generated": [
            "belts_per_shelf = 5\nshelves = 3\nans = belts_per_shelf * shelves"
        ],
        "results": [
            15.0
        ],
        "result_counter": {
            "15.0": 1
        },
        "prediction": 15.0
    },
    {
        "question": "In science class, Trisha is measuring the temperature of different chemical mixtures. The temperatures of two mixtures are shown in the table. Which mixture's temperature is closest to zero?",
        "answer": "bromine mixture",
        "generated": [
            "bromine_temperature = -4\nacetone_temperature = 5\nif abs(bromine_temperature) < abs(acetone_temperature):\n    ans = 'bromine mixture'\nelse:\n    ans = 'acetone mixture'"
        ],
        "results": [
            "bromine mixture"
        ],
        "result_counter": {
            "bromine mixture": 1
        },
        "prediction": "bromine mixture"
    },
    {
        "question": "Edna, a soup chef at a new restaurant, kept track of the first week's soup sales. What is the probability that a randomly selected soup was ordered in a cup and was split pea? Simplify any fractions.",
        "answer": "3/17",
        "generated": [
            "total_soups = 3 + 6 + 5 + 3\nsplit_pea_cup = 3\nans = split_pea_cup / total_soups"
        ],
        "results": [
            0.17647058823529413
        ],
        "result_counter": {
            "0.17647058823529413": 1
        },
        "prediction": 0.17647058823529413
    },
    {
        "question": "For a math assignment, students noted the number of times a wheel landed on the numbers 0 through 5. How many students spun 4?",
        "answer": 4.0,
        "generated": [
            "number_of_students_spun_4 = 4\nans = number_of_students_spun_4"
        ],
        "results": [
            4.0
        ],
        "result_counter": {
            "4.0": 1
        },
        "prediction": 4.0
    },
    {
        "question": "Look at the following schedule. Betty got on the ferry at Windy Sands at 4.00 P.M. What time will she get to Foggy Port?",
        "answer": "5:45 P.M.",
        "generated": [
            "ferry_schedule = {\n    \"Bay Harbor\": [\"7:00 A.M.\", \"7:15 A.M.\", \"7:30 A.M.\", \"7:45 A.M.\", \"8:00 A.M.\"],\n    \"Sandy Shores\": [\"8:30 A.M.\", \"8:45 A.M.\", \"9:00 A.M.\", \"9:15 A.M.\", \"9:30 A.M.\"],\n    \"Seagull Port\": [\"10:15 A.M.\", \"10:30 A.M.\", \"10:45 A.M.\", \"11:00 A.M.\", \"11:15 A.M.\"],\n    \"Cliff View\": [\"12:00 P.M.\", \"12:15 P.M.\", \"12:30 P.M.\", \"12:45 P.M.\", \"1:00 P.M.\"],\n    \"Green Harbor\": [\"1:45 P.M.\", \"2:00 P.M.\", \"2:15 P.M.\", \"2:30 P.M.\", \"2:45 P.M.\"],\n    \"Windy Sands\": [\"3:15 P.M.\", \"3:30 P.M.\", \"3:45 P.M.\", \"4:00 P.M.\", \"4:15 P.M.\"],\n    \"Foggy Port\": [\"5:00 P.M.\", \"5:15 P.M.\", \"5:30 P.M.\", \"5:45 P.M.\", \"6:00 P.M.\"]\n}\n\ndeparture_time = \"4:00 P.M.\"\ndeparture_location = \"Windy Sands\"\narrival_location = \"Foggy Port\"\n\ndeparture_index = ferry_schedule[departure_location].index(departure_time)\nans = ferry_schedule[arrival_location][departure_index]"
        ],
        "results": [
            "5:45 P.M."
        ],
        "result_counter": {
            "5:45 P.M.": 1
        },
        "prediction": "5:45 P.M."
    },
    {
        "question": "An archer recalled how many times he hit the bull's-eye in the past 7 days. What is the median of the numbers?",
        "answer": 6.0,
        "generated": [
            "bullseyes = [8, 8, 3, 9, 6, 6, 4]\nbullseyes = sorted(bullseyes)\nmiddle1 = (len(bullseyes) - 1) // 2\nmiddle2 = len(bullseyes) // 2\nans = (bullseyes[middle1] + bullseyes[middle2]) / 2"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Rita wants to buy 1 kilogram of Cavendish bananas, 3 kilograms of pink bananas, and 3 kilograms of red bananas. How much will she spend?",
        "answer": 6.2,
        "generated": [
            "cavendish_price = 0.98\npink_bananas_price = 1.09\nred_bananas_price = 0.65\n\ncavendish_weight = 1\npink_bananas_weight = 3\nred_bananas_weight = 3\n\ntotal_cost = (cavendish_price * cavendish_weight) + (pink_bananas_price * pink_bananas_weight) + (red_bananas_price * red_bananas_weight)\nans = total_cost"
        ],
        "results": [
            6.2
        ],
        "result_counter": {
            "6.2": 1
        },
        "prediction": 6.2
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "x_values = [16, 17, 18]\ny_values = [18, 11, 8]\n\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])\n\nif slope_1 == slope_2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "Ruben has $8.50. Does he have enough to buy a red pepper and a pumpkin?",
        "answer": "no",
        "generated": [
            "red_pepper_price = 1.25\npumpkin_price = 7.38\ntotal_money = 8.5\nif total_money > red_pepper_price + pumpkin_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "Look at the following schedule. At which stop does the train arrive at 12.30 P.M.?",
        "answer": "baseball stadium",
        "generated": [
            "train_schedule = {'library': '10:30 A.M.', 'soccer field': '10:35 A.M.', 'town square': '10:55 A.M.', 'university': '11:20 A.M.', 'grocery store': '11:40 A.M.', 'swimming pool': '12:10 P.M.', 'baseball stadium': '12:30 P.M.', 'art museum': '12:35 P.M.', 'shopping mall': '12:55 P.M.', 'science museum': '1:10 P.M.'}\ntime_to_find = '12:30 P.M.'\nfor location, time in train_schedule.items():\n    if time == time_to_find:\n        ans = location"
        ],
        "results": [
            "baseball stadium"
        ],
        "result_counter": {
            "baseball stadium": 1
        },
        "prediction": "baseball stadium"
    },
    {
        "question": "The Cedarburg Middle School fundraising committee found out how many sweatshirts students already had, in order to decide whether to sell sweatshirts for a fundraiser. How many students have at least 2 sweatshirts?",
        "answer": 30.0,
        "generated": [
            "students_with_2_sweatshirts = 19\nstudents_with_3_sweatshirts = 11\nans = students_with_2_sweatshirts + students_with_3_sweatshirts"
        ],
        "results": [
            30.0
        ],
        "result_counter": {
            "30.0": 1
        },
        "prediction": 30.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $55, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_55 = 16300\nquantity_supplied_price_55 = 7600\nif quantity_demanded_price_55 > quantity_supplied_price_55:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "In considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people went to the library at least 2 times last month?",
        "answer": 16.0,
        "generated": [
            "number_of_trips_frequency = {1: 20, 2: 10, 3: 2, 4: 4}\nans = sum([frequency for trips, frequency in number_of_trips_frequency.items() if trips >= 2])"
        ],
        "results": [
            16.0
        ],
        "result_counter": {
            "16.0": 1
        },
        "prediction": 16.0
    },
    {
        "question": "Look at this table. Is this relation a function?",
        "answer": "yes",
        "generated": [
            "x_values = [3, 7, 10, 14]\ny_values = [3, 19, 18, 1]\n\nif len(set(x_values)) == len(x_values):\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Each aquarium has 10 orange fish. How many orange fish are in 4 aquariums?",
        "answer": 40.0,
        "generated": [
            "orange_fish_per_aquarium = 10\nnumber_of_aquariums = 4\nans = orange_fish_per_aquarium * number_of_aquariums"
        ],
        "results": [
            40.0
        ],
        "result_counter": {
            "40.0": 1
        },
        "prediction": 40.0
    },
    {
        "question": "Some friends played miniature golf and wrote down their scores. How many more strokes did Sandeep take than Erica?",
        "answer": 47.0,
        "generated": [
            "scores = {'Marshall': 150, 'Barbara': 131, 'Darius': 114, 'Erica': 128, 'Sandeep': 175}\nsandeep_score = scores['Sandeep']\nerica_score = scores['Erica']\nans = sandeep_score - erica_score"
        ],
        "results": [
            47.0
        ],
        "result_counter": {
            "47.0": 1
        },
        "prediction": 47.0
    },
    {
        "question": "The table shows a function. Is the function linear or nonlinear?",
        "answer": "nonlinear",
        "generated": [
            "xy_values = [(14, 14), (15, 13), (16, 7)]\nslope1 = (xy_values[1][1] - xy_values[0][1]) / (xy_values[1][0] - xy_values[0][0])\nslope2 = (xy_values[2][1] - xy_values[1][1]) / (xy_values[2][0] - xy_values[1][0])\n\nif slope1 == slope2:\n    ans = 'linear'\nelse:\n    ans = 'nonlinear'"
        ],
        "results": [
            "nonlinear"
        ],
        "result_counter": {
            "nonlinear": 1
        },
        "prediction": "nonlinear"
    },
    {
        "question": "A reporter looked through her notebook to remember how many people she had interviewed in the past 7 days. What is the mean of the numbers?",
        "answer": 13.0,
        "generated": [
            "number_of_people_interviewed = [19, 12, 12, 21, 8, 7, 12]\nans = sum(number_of_people_interviewed) / len(number_of_people_interviewed)"
        ],
        "results": [
            13.0
        ],
        "result_counter": {
            "13.0": 1
        },
        "prediction": 13.0
    },
    {
        "question": "Mona spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Tuesday and Wednesday?",
        "answer": -2.0,
        "generated": [
            "shells_tuesday = 2\nshells_wednesday = 0\nans = shells_wednesday - shells_tuesday"
        ],
        "results": [
            -2.0
        ],
        "result_counter": {
            "-2.0": 1
        },
        "prediction": -2.0
    },
    {
        "question": "What is the total cost for 3/10 of a pound of crab meat?",
        "answer": 1.8,
        "generated": [
            "crab_meat_price_per_pound = 6\ncrab_meat_weight = 3/10\ntotal_cost = crab_meat_price_per_pound * crab_meat_weight\nans = total_cost"
        ],
        "results": [
            1.7999999999999998
        ],
        "result_counter": {
            "1.7999999999999998": 1
        },
        "prediction": 1.7999999999999998
    },
    {
        "question": "A researcher recorded the number of cows on each farm in the county. How many farms have exactly 25 cows?",
        "answer": 2.0,
        "generated": [
            "stem_leaf = {\n    2: [5, 5],\n    3: [3, 8, 9],\n    4: [],\n    5: [5],\n    6: [7]\n}\n\nans = stem_leaf[2].count(5)"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    },
    {
        "question": "Look at the following schedule. When does the men's vault event end?",
        "answer": "2:30 P.M.",
        "generated": [
            "event_schedule = {\n    \"men's parallel bars\": {\"begin\": \"11:30 A.M.\", \"end\": \"12:05 P.M.\"},\n    \"women's balance beam\": {\"begin\": \"12:20 P.M.\", \"end\": \"12:55 P.M.\"},\n    \"men's floor exercise\": {\"begin\": \"12:50 P.M.\", \"end\": \"1:40 P.M.\"},\n    \"men's vault\": {\"begin\": \"1:45 P.M.\", \"end\": \"2:30 P.M.\"},\n    \"men's rings\": {\"begin\": \"2:30 P.M.\", \"end\": \"2:50 P.M.\"},\n    \"men's pommel horse\": {\"begin\": \"2:35 P.M.\", \"end\": \"3:00 P.M.\"},\n    \"men's high bar\": {\"begin\": \"2:45 P.M.\", \"end\": \"3:45 P.M.\"},\n}\n\nans = event_schedule[\"men's vault\"][\"end\"]"
        ],
        "results": [
            "2:30 P.M."
        ],
        "result_counter": {
            "2:30 P.M.": 1
        },
        "prediction": "2:30 P.M."
    },
    {
        "question": "Bryant has $1,544.00. Does he have enough to buy an African safari vacation package and a Jamaican vacation package?",
        "answer": "no",
        "generated": [
            "african_safari_price = 962.00\njamaican_vacation_price = 608.00\ntotal_money = 1544.00\nif total_money > african_safari_price + jamaican_vacation_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "no"
        ],
        "result_counter": {
            "no": 1
        },
        "prediction": "no"
    },
    {
        "question": "For a fundraiser, the children in the art club made greeting cards and kept track of how many they produced. How many children made more than 1 greeting card?",
        "answer": 36.0,
        "generated": [
            "children_with_more_than_1_card = 17 + 4 + 15\nans = children_with_more_than_1_card"
        ],
        "results": [
            36.0
        ],
        "result_counter": {
            "36.0": 1
        },
        "prediction": 36.0
    },
    {
        "question": "Mr. Middleton, a track coach, recorded the sizes of all the nearby track teams. How many teams have at least 27 members?",
        "answer": 16.0,
        "generated": [
            "team_sizes = [20, 23, 23, 24, 26, 26, 32, 32, 35, 38, 49, 50, 54, 54, 62, 66, 70, 71, 73, 75, 83, 84]\nteams_with_27_or_more_members = [size for size in team_sizes if size >= 27]\nans = len(teams_with_27_or_more_members)"
        ],
        "results": [
            16.0
        ],
        "result_counter": {
            "16.0": 1
        },
        "prediction": 16.0
    },
    {
        "question": "Some friends played a trivia game and recorded their scores. What is the mode of the numbers?",
        "answer": 55.0,
        "generated": [
            "from collections import Counter\n\nscores = [46, 55, 55, 46, 48, 55, 48]\nscore_counts = Counter(scores)\nmode = score_counts.most_common(1)[0][0]\nans = mode"
        ],
        "results": [
            55.0
        ],
        "result_counter": {
            "55.0": 1
        },
        "prediction": 55.0
    },
    {
        "question": "Ariel is looking at the price of new cell phones online. Her favorite company, OrangeTech, has a special this weekend. Ariel can add an upgrade to a phone for an additional cost, or she can buy a used phone to get a discount. The change in price for each option is shown in the table. Which option results in a greater change in price?",
        "answer": "buying a used phone",
        "generated": [
            "upgrade_price = 60\nused_phone_discount = -75\nif abs(upgrade_price) > abs(used_phone_discount):\n    ans = \"adding an upgrade\"\nelse:\n    ans = \"buying a used phone\""
        ],
        "results": [
            "buying a used phone"
        ],
        "result_counter": {
            "buying a used phone": 1
        },
        "prediction": "buying a used phone"
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $180, is there a shortage or a surplus?",
        "answer": "surplus",
        "generated": [
            "quantity_demanded_price_180 = 11600\nquantity_supplied_price_180 = 22500\nif quantity_demanded_price_180 > quantity_supplied_price_180:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "surplus"
        ],
        "result_counter": {
            "surplus": 1
        },
        "prediction": "surplus"
    },
    {
        "question": "Each branch has 5 caterpillars. How many caterpillars are on 5 branches?",
        "answer": 25.0,
        "generated": [
            "caterpillars_per_branch = 5\nbranches = 5\nans = caterpillars_per_branch * branches"
        ],
        "results": [
            25.0
        ],
        "result_counter": {
            "25.0": 1
        },
        "prediction": 25.0
    },
    {
        "question": "Lena joined a book club to spend more quality time with her cousin. At the first meeting, club members recorded how many hours a week they typically read and whether they preferred e-readers or paperback books. What is the probability that a randomly selected club member reads about 3 hours per week and prefers e-readers? Simplify any fractions.",
        "answer": "1/3",
        "generated": [
            "total_members = 3 + 6 + 6 + 3\nmembers_3_hours_e_readers = 6\nans = members_3_hours_e_readers / total_members"
        ],
        "results": [
            0.3333333333333333
        ],
        "result_counter": {
            "0.3333333333333333": 1
        },
        "prediction": 0.3333333333333333
    },
    {
        "question": "How much money does Laura need to buy 8 designer watches and 8 designer ball gowns?",
        "answer": 56672.0,
        "generated": [
            "watch_price = 5254\nball_gown_price = 1830\nquantity = 8\ntotal_cost = (watch_price + ball_gown_price) * quantity\nans = total_cost"
        ],
        "results": [
            56672.0
        ],
        "result_counter": {
            "56672.0": 1
        },
        "prediction": 56672.0
    },
    {
        "question": "Savannah works at a coffee shop on weekends. Every now and then, a customer will order a hot tea and ask Savannah to surprise them with the flavor. The teas are categorized by flavor and caffeine level. What is the probability that a randomly selected tea is caffeine-free and mint? Simplify any fractions.",
        "answer": "1/5",
        "generated": [
            "total_tea = (3 + 5) + (2 + 5)\ncaffeine_free_mint = 3\nans = caffeine_free_mint / total_tea"
        ],
        "results": [
            0.2
        ],
        "result_counter": {
            "0.2": 1
        },
        "prediction": 0.2
    },
    {
        "question": "Wildgrove Flooring tracked the number of broken tiles in each shipment it received last year. What is the smallest number of broken tiles?",
        "answer": 22.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbroken_tiles_number_list = [22, 26, 31, 35, 39, 46, 52, 53, 56, 56, 62, 62, 72, 73, 77, 80, 83, 88]\nans = min(broken_tiles_number_list)"
        ],
        "results": [
            22.0
        ],
        "result_counter": {
            "22.0": 1
        },
        "prediction": 22.0
    },
    {
        "question": "To get credit for meeting her school's community service requirement, Lola kept a volunteering log. What is the median of the numbers?",
        "answer": 6.0,
        "generated": [
            "hours = [4, 8, 6, 2, 10]\nhours = sorted(hours)\nmiddle1 = (len(hours) - 1) // 2\nmiddle2 = len(hours) // 2\nans = (hours[middle1] + hours[middle2]) / 2"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Irma's classmates revealed how many science articles they read. Who read the fewest science articles?",
        "answer": "Rose",
        "generated": [
            "articles_dict = {'Irma': 659, 'Rose': 635, 'Carmen': 638, 'Hugo': 665}\nmin_value = min(articles_dict.values())\nfor key, value in articles_dict.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            "Rose"
        ],
        "result_counter": {
            "Rose": 1
        },
        "prediction": "Rose"
    },
    {
        "question": "As part of a math lab, Rosanne tracked the number of times her classmates drew a number between 2 and 8. Which number was drawn the fewest times?",
        "answer": 7.0,
        "generated": [
            "number_frequency = {2: 16, 3: 20, 4: 19, 5: 5, 6: 7, 7: 0, 8: 11}\nmin_value = min(number_frequency.values())\nfor key, value in number_frequency.items():\n    if value == min_value:\n        ans = key"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "Sparrowtown High School's student council recruited teachers and students to serve on each of its committees. Are there fewer people on the party committee or the cafeteria committee?",
        "answer": "cafeteria",
        "generated": [
            "total_cafeteria = 13 + 7\ntotal_party = 18 + 16\nif total_cafeteria < total_party:\n    ans = 'cafeteria'\nelse:\n    ans = 'party'"
        ],
        "results": [
            "cafeteria"
        ],
        "result_counter": {
            "cafeteria": 1
        },
        "prediction": "cafeteria"
    },
    {
        "question": "The advertising agency counted the number of billboards in each city in the state. What is the largest number of billboards?",
        "answer": 56.0,
        "generated": [
            "# From the table, the stem represents the ten digits and the leaf represents the single digits.\nbillboards_number_list = [2, 4, 6, 14, 16, 17, 19, 19, 24, 33, 43, 45, 46, 55, 56]\nans = max(billboards_number_list)"
        ],
        "results": [
            56.0
        ],
        "result_counter": {
            "56.0": 1
        },
        "prediction": 56.0
    },
    {
        "question": "Derek bought 1.3 pounds of pepper. How much did he spend?",
        "answer": 10.4,
        "generated": [
            "pepper_price_per_lb = 8\npepper_weight = 1.3\nans = pepper_price_per_lb * pepper_weight"
        ],
        "results": [
            10.4
        ],
        "result_counter": {
            "10.4": 1
        },
        "prediction": 10.4
    },
    {
        "question": "Compare pattern A to pattern B. Which statement is true? ",
        "answer": "Each term in pattern B can be found by multiplying the corresponding term in pattern A by 4 and then subtracting 2.",
        "generated": [
            "pattern_A = [2, 6, 8, 10, 12]\npattern_B = [8, 22, 30, 38, 46]\n\nsubtract_28 = [28 - a for a in pattern_A]\nmultiply_4_subtract_2 = [(4 * a) - 2 for a in pattern_A]\n\nif subtract_28 == pattern_B:\n    ans = 'Each term in pattern B can be found by subtracting the corresponding term in pattern A from 28.'\nelif multiply_4_subtract_2 == pattern_B:\n    ans = 'Each term in pattern B can be found by multiplying the corresponding term in pattern A by 4 and then subtracting 2.'"
        ],
        "results": [
            null
        ],
        "result_counter": {},
        "prediction": null
    },
    {
        "question": "A law firm in Kensington kept track of how many hours were billed by each partner last year. What fraction of the hours were billed by Bob? Simplify your answer.",
        "answer": "93/517",
        "generated": [
            "hours_billed = {'Kendall': 760, 'Melissa': 910, 'Allie': 1000, 'Bob': 930, 'Gordon': 820, 'Gina': 750}\ntotal_hours_billed = sum(hours_billed.values())\nbob_hours_billed = hours_billed['Bob']\nans = bob_hours_billed / total_hours_billed"
        ],
        "results": [
            0.17988394584139264
        ],
        "result_counter": {
            "0.17988394584139264": 1
        },
        "prediction": 0.17988394584139264
    },
    {
        "question": "The members of the science club shared how many times they had been to the zoo last year. How many members went to the zoo more than 3 times?",
        "answer": 8.0,
        "generated": [
            "number_of_trips_frequency = {0: 13, 1: 4, 2: 16, 3: 0, 4: 3, 5: 5}\nans = sum([frequency for trips, frequency in number_of_trips_frequency.items() if trips > 3])"
        ],
        "results": [
            8.0
        ],
        "result_counter": {
            "8.0": 1
        },
        "prediction": 8.0
    },
    {
        "question": "How much money does Cody need to buy 5 jars of olives?",
        "answer": 2.1,
        "generated": [
            "olive_price = 0.42\nnumber_of_olives = 5\nans = olive_price * number_of_olives"
        ],
        "results": [
            2.1
        ],
        "result_counter": {
            "2.1": 1
        },
        "prediction": 2.1
    },
    {
        "question": "A stock broker followed the stock prices of a certain set of companies. On Wednesday, how much more did Thompson Corporation's stock cost than Houston Sporting Goods's stock?",
        "answer": 5.0,
        "generated": [
            "thompson_wednesday = 19\nhouston_wednesday = 14\nans = thompson_wednesday - houston_wednesday"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "A researcher asked people how many letters they had written in the past year and recorded the results. How many people did not write letters?",
        "answer": 3.0,
        "generated": [
            "letters_written_frequency = {'0': 3, '1': 16, '2': 9, '3': 6}\nans = letters_written_frequency['0']"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Miguel has $6.00. Does he have enough to buy a book about dinosaurs and a book about helicopters?",
        "answer": "yes",
        "generated": [
            "helicopter_book_price = 2.00\ndinosaur_book_price = 3.00\ntotal_money = 6.00\nif total_money >= helicopter_book_price + dinosaur_book_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "A survey was conducted to learn people's chocolate preferences. What fraction of the respondents preferred milk chocolate? Simplify your answer.",
        "answer": "53/201",
        "generated": [
            "total_respondents = 480 + 530 + 1000\nmilk_chocolate_respondents = 530\nans = milk_chocolate_respondents / total_respondents"
        ],
        "results": [
            0.263681592039801
        ],
        "result_counter": {
            "0.263681592039801": 1
        },
        "prediction": 0.263681592039801
    },
    {
        "question": "Brett, who has five different fruit trees growing in his yard, kept track of how many pieces of fruit he picked this year. What fraction of the pieces of fruit picked were pears? Simplify your answer.",
        "answer": "11/56",
        "generated": [
            "fruit_dict = {'Lemons': 41, 'Nectarines': 100, 'Apples': 71, 'Plums': 13, 'Pears': 55}\ntotal_fruit = sum(fruit_dict.values())\npears = fruit_dict['Pears']\nans = pears / total_fruit"
        ],
        "results": [
            0.19642857142857142
        ],
        "result_counter": {
            "0.19642857142857142": 1
        },
        "prediction": 0.19642857142857142
    },
    {
        "question": "A researcher recorded the number of cows on each farm in the county. How many farms have at least 70 cows but fewer than 100 cows?",
        "answer": 3.0,
        "generated": [
            "number_list = [30, 32, 32, 33, 39, 42, 46, 54, 63, 78, 88, 90]\ncount = 0\nfor number in number_list:\n    if 70 <= number < 100:\n        count += 1\nans = count"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "To figure out how many vacation days she had left to use, Abby looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2014 and 2015?",
        "answer": -5.0,
        "generated": [
            "vacation_days_2014 = 39\nvacation_days_2015 = 34\nans = vacation_days_2015 - vacation_days_2014"
        ],
        "results": [
            -5.0
        ],
        "result_counter": {
            "-5.0": 1
        },
        "prediction": -5.0
    },
    {
        "question": "Look at the table. Then answer the question. At a price of $180, is there a shortage or a surplus?",
        "answer": "shortage",
        "generated": [
            "quantity_demanded_price_180 = 11500\nquantity_supplied_price_180 = 6000\nif quantity_demanded_price_180 > quantity_supplied_price_180:\n    ans = 'shortage'\nelse:\n    ans = 'surplus'"
        ],
        "results": [
            "shortage"
        ],
        "result_counter": {
            "shortage": 1
        },
        "prediction": "shortage"
    },
    {
        "question": "Derek has $0.13. Does he have enough to buy a spiral snail shell and a pink and white striped shell?",
        "answer": "yes",
        "generated": [
            "spiral_snail_shell_price = 0.05\npink_and_white_striped_shell_price = 0.07\ntotal_money = 0.13\nif total_money >= spiral_snail_shell_price + pink_and_white_striped_shell_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Chad looked at the dates of the digital photos on his computer to find out how many he had taken in the past 5 days. What is the mean of the numbers?",
        "answer": 5.0,
        "generated": [
            "number_of_photos = [6, 0, 8, 3, 8]\nans = sum(number_of_photos) / len(number_of_photos)"
        ],
        "results": [
            5.0
        ],
        "result_counter": {
            "5.0": 1
        },
        "prediction": 5.0
    },
    {
        "question": "Natalie just returned from a spring break volunteer trip. She is shopping for a photo album that will showcase her photos from the trip. The albums range in photo capacity and orientation. What is the probability that a randomly selected photo album holds exactly 100 photos and is oriented horizontally? Simplify any fractions.",
        "answer": "1/9",
        "generated": [
            "total_albums = (8 + 5) + (2 + 3)\nhorizontal_100_photos = 2\nans = horizontal_100_photos / total_albums"
        ],
        "results": [
            0.1111111111111111
        ],
        "result_counter": {
            "0.1111111111111111": 1
        },
        "prediction": 0.1111111111111111
    },
    {
        "question": "Rosa, a journalism student, counted the number of pages in several major magazines. How many magazines had exactly 26 pages?",
        "answer": 3.0,
        "generated": [
            "stem_leaf = {'2': [6, 6, 6], '3': [], '4': [9], '5': [0], '6': [], '7': [3, 4, 6]}\nans = stem_leaf['2'].count(6)"
        ],
        "results": [
            3.0
        ],
        "result_counter": {
            "3.0": 1
        },
        "prediction": 3.0
    },
    {
        "question": "Look at the following schedule. When does the discus throw end?",
        "answer": "1:45 P.M.",
        "generated": [
            "event_schedule = {\n    \"javelin throw\": {\"begin\": \"11:00 A.M.\", \"end\": \"11:15 A.M.\"},\n    \"steeplechase\": {\"begin\": \"11:30 A.M.\", \"end\": \"11:45 A.M.\"},\n    \"men's relay\": {\"begin\": \"11:50 A.M.\", \"end\": \"12:40 P.M.\"},\n    \"discus throw\": {\"begin\": \"12:45 P.M.\", \"end\": \"1:45 P.M.\"},\n    \"pole vault\": {\"begin\": \"1:55 P.M.\", \"end\": \"2:25 P.M.\"},\n    \"long jump\": {\"begin\": \"2:40 P.M.\", \"end\": \"3:15 P.M.\"},\n}\n\nans = event_schedule[\"discus throw\"][\"end\"]"
        ],
        "results": [
            "1:45 P.M."
        ],
        "result_counter": {
            "1:45 P.M.": 1
        },
        "prediction": "1:45 P.M."
    },
    {
        "question": "How much money does Darnel need to buy a black motorcycle, a red two-door coupe, and a black convertible?",
        "answer": 23520.0,
        "generated": [
            "motorcycle_price = 9734\ncoupe_price = 7702\nconvertible_price = 6084\nans = motorcycle_price + coupe_price + convertible_price"
        ],
        "results": [
            23520.0
        ],
        "result_counter": {
            "23520.0": 1
        },
        "prediction": 23520.0
    },
    {
        "question": "The art club examined how many cookies each student baked for the bake sale. Who baked the most cookies?",
        "answer": "Madelyn",
        "generated": [
            "cookies_dict = {'Riley': 71, 'Hannah': 75, 'Layla': 78, 'Madelyn': 79}\nmax_value = max(cookies_dict.values())\nfor key, value in cookies_dict.items():\n    if value == max_value:\n        ans = key"
        ],
        "results": [
            "Madelyn"
        ],
        "result_counter": {
            "Madelyn": 1
        },
        "prediction": "Madelyn"
    },
    {
        "question": "Terrell has $14.49. How much money will Terrell have left if he buys a can of coffee beans and a block of cheddar cheese?",
        "answer": 5.86,
        "generated": [
            "coffee_beans_price = 5.16\ncheddar_cheese_price = 3.47\ntotal_money = 14.49\nmoney_left = total_money - (coffee_beans_price + cheddar_cheese_price)\nans = money_left"
        ],
        "results": [
            5.859999999999999
        ],
        "result_counter": {
            "5.859999999999999": 1
        },
        "prediction": 5.859999999999999
    },
    {
        "question": "A skating rink attendant monitored the number of injuries at the rink over the past year. He tracked the ages of those injured and the kinds of skates worn during injury. What is the probability that a randomly selected injured skater was wearing in-line skates and was age 8? Simplify any fractions.",
        "answer": "1/5",
        "generated": [
            "total_injuries = 2 + 3 + 2 + 3\ninjuries_age_8_inline_skates = 2\nans = injuries_age_8_inline_skates / total_injuries"
        ],
        "results": [
            0.2
        ],
        "result_counter": {
            "0.2": 1
        },
        "prediction": 0.2
    },
    {
        "question": "Nolan has $1,425.00. Does he have enough to buy a wetsuit and a mountain bike?",
        "answer": "yes",
        "generated": [
            "wetsuit_price = 660\nmountain_bike_price = 763\ntotal_money = 1425\nif total_money > wetsuit_price + mountain_bike_price:\n    ans = \"yes\"\nelse:\n    ans = \"no\""
        ],
        "results": [
            "yes"
        ],
        "result_counter": {
            "yes": 1
        },
        "prediction": "yes"
    },
    {
        "question": "Reba buys 2.6 pounds of liverwurst. How much does she spend?",
        "answer": 10.4,
        "generated": [
            "liverwurst_price_per_pound = 4\nliverwurst_weight = 2.6\nans = liverwurst_price_per_pound * liverwurst_weight"
        ],
        "results": [
            10.4
        ],
        "result_counter": {
            "10.4": 1
        },
        "prediction": 10.4
    },
    {
        "question": "The teachers at a middle school counted how many computers they had in their classrooms. What is the mode of the numbers?",
        "answer": 6.0,
        "generated": [
            "from collections import Counter\n\ncomputers = [6, 4, 5, 6, 9, 4, 6, 5]\ncounter = Counter(computers)\nmode = counter.most_common(1)\nans = mode[0][0]"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "Sally looked at the dates of the digital photos on her computer to find out how many she had taken in the past 7 days. What is the mean of the numbers?",
        "answer": 6.0,
        "generated": [
            "number_of_photos = [0, 7, 4, 8, 5, 12, 6]\nans = sum(number_of_photos) / len(number_of_photos)"
        ],
        "results": [
            6.0
        ],
        "result_counter": {
            "6.0": 1
        },
        "prediction": 6.0
    },
    {
        "question": "A concession stand worker at the movie theater looked up how many bags of popcorn were sold in the past 7 days. What is the range of the numbers?",
        "answer": 7.0,
        "generated": [
            "popcorn_sales = [1, 6, 3, 2, 3, 3, 8]\nans = max(popcorn_sales) - min(popcorn_sales)"
        ],
        "results": [
            7.0
        ],
        "result_counter": {
            "7.0": 1
        },
        "prediction": 7.0
    },
    {
        "question": "A stock broker followed the stock prices of a certain set of companies. Which company's stock cost more on Wednesday, Watson and Partners or White and Company?",
        "answer": "White and Company",
        "generated": [
            "watson_wednesday = 17\nwhite_wednesday = 19\nif watson_wednesday > white_wednesday:\n    ans = 'Watson and Partners'\nelse:\n    ans = 'White and Company'"
        ],
        "results": [
            "White and Company"
        ],
        "result_counter": {
            "White and Company": 1
        },
        "prediction": "White and Company"
    },
    {
        "question": "Look at the following schedule. Linda got on the boat at Fisherman's Cove at 9.45 A.M. What time will she get to Palm Tree Island?",
        "answer": "1:15 P.M.",
        "generated": [
            "departure_time = \"9:45 A.M.\"\narrival_times = {\"Sea Town\": [\"8:00 A.M.\", \"8:15 A.M.\", \"8:30 A.M.\", \"9:30 A.M.\"],\n                 \"Fisherman's Cove\": [\"9:45 A.M.\", \"10:00 A.M.\", \"10:15 A.M.\", \"11:15 A.M.\"],\n                 \"Starfish Point\": [\"10:30 A.M.\", \"10:45 A.M.\", \"11:00 A.M.\", \"12:00 P.M.\"],\n                 \"Rocky Cliffs\": [\"11:45 A.M.\", \"12:00 P.M.\", \"12:15 P.M.\", \"1:15 P.M.\"],\n                 \"Palm Tree Island\": [\"1:15 P.M.\", \"1:30 P.M.\", \"1:45 P.M.\", \"2:45 P.M.\"]}\n\ndeparture_index = arrival_times[\"Fisherman's Cove\"].index(departure_time)\nans = arrival_times[\"Palm Tree Island\"][departure_index]"
        ],
        "results": [
            "1:15 P.M."
        ],
        "result_counter": {
            "1:15 P.M.": 1
        },
        "prediction": "1:15 P.M."
    },
    {
        "question": "Joseph, an employee at Morrison's Convenience Store, looked at the sales of each of its soda products. How much more did the convenience store make from Nature's Nectar sales on Friday than on Thursday?",
        "answer": 2.0,
        "generated": [
            "natures_nectar_thursday = 2\nnatures_nectar_friday = 4\nans = natures_nectar_friday - natures_nectar_thursday"
        ],
        "results": [
            2.0
        ],
        "result_counter": {
            "2.0": 1
        },
        "prediction": 2.0
    }
]